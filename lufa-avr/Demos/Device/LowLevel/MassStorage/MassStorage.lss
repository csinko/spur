
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000176  00800100  00001fce  00002062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000236  00800276  00800276  000021d8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007611  00000000  00000000  00002544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002408  00000000  00000000  00009b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003cf5  00000000  00000000  0000bf5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a18  00000000  00000000  0000fc54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002775  00000000  00000000  0001066c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004781  00000000  00000000  00012de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  00017562  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ce c0       	rjmp	.+412    	; 0x19e <__ctors_end>
       2:	00 00       	nop
       4:	e8 c0       	rjmp	.+464    	; 0x1d6 <__bad_interrupt>
       6:	00 00       	nop
       8:	e6 c0       	rjmp	.+460    	; 0x1d6 <__bad_interrupt>
       a:	00 00       	nop
       c:	e4 c0       	rjmp	.+456    	; 0x1d6 <__bad_interrupt>
       e:	00 00       	nop
      10:	e2 c0       	rjmp	.+452    	; 0x1d6 <__bad_interrupt>
      12:	00 00       	nop
      14:	e0 c0       	rjmp	.+448    	; 0x1d6 <__bad_interrupt>
      16:	00 00       	nop
      18:	de c0       	rjmp	.+444    	; 0x1d6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dc c0       	rjmp	.+440    	; 0x1d6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	da c0       	rjmp	.+436    	; 0x1d6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d8 c0       	rjmp	.+432    	; 0x1d6 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 b6 09 	jmp	0x136c	; 0x136c <__vector_10>
      2c:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__vector_11>
      30:	d2 c0       	rjmp	.+420    	; 0x1d6 <__bad_interrupt>
      32:	00 00       	nop
      34:	d0 c0       	rjmp	.+416    	; 0x1d6 <__bad_interrupt>
      36:	00 00       	nop
      38:	ce c0       	rjmp	.+412    	; 0x1d6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cc c0       	rjmp	.+408    	; 0x1d6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ca c0       	rjmp	.+404    	; 0x1d6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c8 c0       	rjmp	.+400    	; 0x1d6 <__bad_interrupt>
      46:	00 00       	nop
      48:	c6 c0       	rjmp	.+396    	; 0x1d6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c4 c0       	rjmp	.+392    	; 0x1d6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c2 c0       	rjmp	.+388    	; 0x1d6 <__bad_interrupt>
      52:	00 00       	nop
      54:	c0 c0       	rjmp	.+384    	; 0x1d6 <__bad_interrupt>
      56:	00 00       	nop
      58:	be c0       	rjmp	.+380    	; 0x1d6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bc c0       	rjmp	.+376    	; 0x1d6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ba c0       	rjmp	.+372    	; 0x1d6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b8 c0       	rjmp	.+368    	; 0x1d6 <__bad_interrupt>
      66:	00 00       	nop
      68:	b6 c0       	rjmp	.+364    	; 0x1d6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b4 c0       	rjmp	.+360    	; 0x1d6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b2 c0       	rjmp	.+356    	; 0x1d6 <__bad_interrupt>
      72:	00 00       	nop
      74:	b0 c0       	rjmp	.+352    	; 0x1d6 <__bad_interrupt>
      76:	00 00       	nop
      78:	ae c0       	rjmp	.+348    	; 0x1d6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ac c0       	rjmp	.+344    	; 0x1d6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	aa c0       	rjmp	.+340    	; 0x1d6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a8 c0       	rjmp	.+336    	; 0x1d6 <__bad_interrupt>
      86:	00 00       	nop
      88:	a6 c0       	rjmp	.+332    	; 0x1d6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a4 c0       	rjmp	.+328    	; 0x1d6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a2 c0       	rjmp	.+324    	; 0x1d6 <__bad_interrupt>
      92:	00 00       	nop
      94:	a0 c0       	rjmp	.+320    	; 0x1d6 <__bad_interrupt>
      96:	00 00       	nop
      98:	9e c0       	rjmp	.+316    	; 0x1d6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	9c c0       	rjmp	.+312    	; 0x1d6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	9a c0       	rjmp	.+308    	; 0x1d6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	98 c0       	rjmp	.+304    	; 0x1d6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	96 c0       	rjmp	.+300    	; 0x1d6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	07 63       	ori	r16, 0x37	; 55
      ae:	42 36       	cpi	r20, 0x62	; 98
      b0:	b7 9b       	sbis	0x16, 7	; 22
      b2:	d8 a7       	std	Y+40, r29	; 0x28
      b4:	1a 39       	cpi	r17, 0x9A	; 154
      b6:	68 56       	subi	r22, 0x68	; 104
      b8:	18 ae       	std	Y+56, r1	; 0x38
      ba:	ba ab       	std	Y+50, r27	; 0x32
      bc:	55 8c       	ldd	r5, Z+29	; 0x1d
      be:	1d 3c       	cpi	r17, 0xCD	; 205
      c0:	b7 cc       	rjmp	.-1682   	; 0xfffffa30 <__eeprom_end+0xff7efa30>
      c2:	57 63       	ori	r21, 0x37	; 55
      c4:	bd 6d       	ori	r27, 0xDD	; 221
      c6:	ed fd       	.word	0xfded	; ????
      c8:	75 3e       	cpi	r23, 0xE5	; 229
      ca:	f6 17       	cp	r31, r22
      cc:	72 31       	cpi	r23, 0x12	; 18
      ce:	bf 00       	.word	0x00bf	; ????
      d0:	00 00       	nop
      d2:	80 3f       	cpi	r24, 0xF0	; 240
      d4:	08 00       	.word	0x0008	; ????
      d6:	00 00       	nop
      d8:	be 92       	st	-X, r11
      da:	24 49       	sbci	r18, 0x94	; 148
      dc:	12 3e       	cpi	r17, 0xE2	; 226
      de:	ab aa       	std	Y+51, r10	; 0x33
      e0:	aa 2a       	or	r10, r26
      e2:	be cd       	rjmp	.-1156   	; 0xfffffc60 <__eeprom_end+0xff7efc60>
      e4:	cc cc       	rjmp	.-1640   	; 0xfffffa7e <__eeprom_end+0xff7efa7e>
      e6:	4c 3e       	cpi	r20, 0xEC	; 236
      e8:	00 00       	nop
      ea:	00 80       	ld	r0, Z
      ec:	be ab       	std	Y+54, r27	; 0x36
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	aa 3e       	cpi	r26, 0xEA	; 234
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	bf 00       	.word	0x00bf	; ????
      f8:	00 00       	nop
      fa:	80 3f       	cpi	r24, 0xF0	; 240
      fc:	00 00       	nop
      fe:	00 00       	nop
     100:	00 08       	sbc	r0, r0
     102:	41 78       	andi	r20, 0x81	; 129
     104:	d3 bb       	out	0x13, r29	; 19
     106:	43 87       	std	Z+11, r20	; 0x0b
     108:	d1 13       	cpse	r29, r17
     10a:	3d 19       	sub	r19, r13
     10c:	0e 3c       	cpi	r16, 0xCE	; 206
     10e:	c3 bd       	out	0x23, r28	; 35
     110:	42 82       	std	Z+2, r4	; 0x02
     112:	ad 2b       	or	r26, r29
     114:	3e 68       	ori	r19, 0x8E	; 142
     116:	ec 82       	std	Y+4, r14	; 0x04
     118:	76 be       	out	0x36, r7	; 54
     11a:	d9 8f       	std	Y+25, r29	; 0x19
     11c:	e1 a9       	ldd	r30, Z+49	; 0x31
     11e:	3e 4c       	sbci	r19, 0xCE	; 206
     120:	80 ef       	ldi	r24, 0xF0	; 240
     122:	ff be       	out	0x3f, r15	; 63
     124:	01 c4       	rjmp	.+2050   	; 0x928 <SCSI_DecodeSCSICommand+0x184>
     126:	ff 7f       	andi	r31, 0xFF	; 255
     128:	3f 00       	.word	0x003f	; ????
     12a:	00 00       	nop
     12c:	00 00       	nop

0000012e <ProductString>:
     12e:	2c 03 53 00 70 00 75 00 72 00 20 00 4d 00 75 00     ,.S.p.u.r. .M.u.
     13e:	6c 00 74 00 69 00 62 00 6f 00 6f 00 74 00 20 00     l.t.i.b.o.o.t. .
     14e:	44 00 65 00 76 00 69 00 63 00 65 00 00 00           D.e.v.i.c.e...

0000015c <ManufacturerString>:
     15c:	0a 03 53 00 70 00 75 00 72 00 00 00                 ..S.p.u.r...

00000168 <LanguageString>:
     168:	04 03 09 04                                         ....

0000016c <ConfigurationDescriptor>:
     16c:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
     17c:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

0000018c <DeviceDescriptor>:
     18c:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     19c:	dc 01                                               ..

0000019e <__ctors_end>:
     19e:	11 24       	eor	r1, r1
     1a0:	1f be       	out	0x3f, r1	; 63
     1a2:	cf ef       	ldi	r28, 0xFF	; 255
     1a4:	da e0       	ldi	r29, 0x0A	; 10
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	cd bf       	out	0x3d, r28	; 61

000001aa <__do_copy_data>:
     1aa:	12 e0       	ldi	r17, 0x02	; 2
     1ac:	a0 e0       	ldi	r26, 0x00	; 0
     1ae:	b1 e0       	ldi	r27, 0x01	; 1
     1b0:	ee ec       	ldi	r30, 0xCE	; 206
     1b2:	ff e1       	ldi	r31, 0x1F	; 31
     1b4:	02 c0       	rjmp	.+4      	; 0x1ba <__do_copy_data+0x10>
     1b6:	05 90       	lpm	r0, Z+
     1b8:	0d 92       	st	X+, r0
     1ba:	a6 37       	cpi	r26, 0x76	; 118
     1bc:	b1 07       	cpc	r27, r17
     1be:	d9 f7       	brne	.-10     	; 0x1b6 <__do_copy_data+0xc>

000001c0 <__do_clear_bss>:
     1c0:	24 e0       	ldi	r18, 0x04	; 4
     1c2:	a6 e7       	ldi	r26, 0x76	; 118
     1c4:	b2 e0       	ldi	r27, 0x02	; 2
     1c6:	01 c0       	rjmp	.+2      	; 0x1ca <.do_clear_bss_start>

000001c8 <.do_clear_bss_loop>:
     1c8:	1d 92       	st	X+, r1

000001ca <.do_clear_bss_start>:
     1ca:	ac 3a       	cpi	r26, 0xAC	; 172
     1cc:	b2 07       	cpc	r27, r18
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <.do_clear_bss_loop>
     1d0:	71 d1       	rcall	.+738    	; 0x4b4 <main>
     1d2:	0c 94 e5 0f 	jmp	0x1fca	; 0x1fca <_exit>

000001d6 <__bad_interrupt>:
     1d6:	14 cf       	rjmp	.-472    	; 0x0 <__vectors>

000001d8 <LEDs_SetAllLEDs>:
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
     1d8:	25 b1       	in	r18, 0x05	; 5
     1da:	98 2f       	mov	r25, r24
     1dc:	91 70       	andi	r25, 0x01	; 1
     1de:	90 95       	com	r25
     1e0:	21 60       	ori	r18, 0x01	; 1
     1e2:	92 23       	and	r25, r18
     1e4:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
     1e6:	2b b1       	in	r18, 0x0b	; 11
     1e8:	98 2f       	mov	r25, r24
     1ea:	90 72       	andi	r25, 0x20	; 32
     1ec:	90 95       	com	r25
     1ee:	20 62       	ori	r18, 0x20	; 32
     1f0:	92 23       	and	r25, r18
     1f2:	9b b9       	out	0x0b, r25	; 11
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
     1f4:	98 b1       	in	r25, 0x08	; 8
     1f6:	9f 77       	andi	r25, 0x7F	; 127
     1f8:	80 78       	andi	r24, 0x80	; 128
     1fa:	89 2b       	or	r24, r25
     1fc:	88 b9       	out	0x08, r24	; 8
     1fe:	08 95       	ret

00000200 <SetupHardware>:

void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     200:	84 b7       	in	r24, 0x34	; 52
     202:	87 7f       	andi	r24, 0xF7	; 247
     204:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	a8 95       	wdr
     20c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     210:	88 61       	ori	r24, 0x18	; 24
     212:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     216:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     21a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	80 e8       	ldi	r24, 0x80	; 128
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     228:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     22c:	0f be       	out	0x3f, r0	; 63
				DDRB  |=  LEDS_PORTB_LEDS;
     22e:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     230:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     232:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     234:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     236:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     238:	47 98       	cbi	0x08, 7	; 8
#endif

	/* Hardware Initialization */
	LEDs_Init();
	//Dataflash_Init();
	USB_Init();
     23a:	0c 94 99 09 	jmp	0x1332	; 0x1332 <USB_Init>

0000023e <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     23e:	80 ea       	ldi	r24, 0xA0	; 160
     240:	cb df       	rcall	.-106    	; 0x1d8 <LEDs_SetAllLEDs>

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     242:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
     246:	08 95       	ret

00000248 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	c6 cf       	rjmp	.-116    	; 0x1d8 <LEDs_SetAllLEDs>

0000024c <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     24c:	cf 93       	push	r28
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     24e:	42 e3       	ldi	r20, 0x32	; 50
     250:	61 e8       	ldi	r22, 0x81	; 129
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	ab d7       	rcall	.+3926   	; 0x11ac <Endpoint_ConfigureEndpoint_Prv>
     256:	c8 2f       	mov	r28, r24
     258:	42 e3       	ldi	r20, 0x32	; 50
     25a:	60 e8       	ldi	r22, 0x80	; 128
     25c:	84 e0       	ldi	r24, 0x04	; 4
     25e:	a6 d7       	rcall	.+3916   	; 0x11ac <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     260:	88 23       	and	r24, r24
     262:	11 f0       	breq	.+4      	; 0x268 <EVENT_USB_Device_ConfigurationChanged+0x1c>
     264:	c1 11       	cpse	r28, r1
     266:	03 c0       	rjmp	.+6      	; 0x26e <EVENT_USB_Device_ConfigurationChanged+0x22>
     268:	81 e8       	ldi	r24, 0x81	; 129
}
     26a:	cf 91       	pop	r28
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     26c:	b5 cf       	rjmp	.-150    	; 0x1d8 <LEDs_SetAllLEDs>
     26e:	80 e2       	ldi	r24, 0x20	; 32
     270:	fc cf       	rjmp	.-8      	; 0x26a <EVENT_USB_Device_ConfigurationChanged+0x1e>

00000272 <EVENT_USB_Device_ControlRequest>:
	serialWrite(' ');
	serialWrite('\n');
	serialWrite('\r');*/

	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     272:	80 91 a5 04 	lds	r24, 0x04A5	; 0x8004a5 <USB_ControlRequest+0x1>
     276:	8e 3f       	cpi	r24, 0xFE	; 254
     278:	81 f0       	breq	.+32     	; 0x29a <EVENT_USB_Device_ControlRequest+0x28>
     27a:	8f 3f       	cpi	r24, 0xFF	; 255
     27c:	f9 f4       	brne	.+62     	; 0x2bc <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     27e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <USB_ControlRequest>
     282:	81 32       	cpi	r24, 0x21	; 33
     284:	d9 f4       	brne	.+54     	; 0x2bc <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     286:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     28a:	87 7f       	andi	r24, 0xF7	; 247
     28c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     290:	c2 d7       	rcall	.+3972   	; 0x1216 <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <__data_end>
     298:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     29a:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <USB_ControlRequest>
     29e:	81 3a       	cpi	r24, 0xA1	; 161
     2a0:	69 f4       	brne	.+26     	; 0x2bc <EVENT_USB_Device_ControlRequest+0x4a>
     2a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     2a6:	87 7f       	andi	r24, 0xF7	; 247
     2a8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     2ac:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     2b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     2b4:	8e 77       	andi	r24, 0x7E	; 126
     2b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     2ba:	ad c7       	rjmp	.+3930   	; 0x1216 <Endpoint_ClearStatusStage>
     2bc:	08 95       	ret

000002be <MassStorage_Task>:

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	00 d0       	rcall	.+0      	; 0x2c4 <MassStorage_Task+0x6>
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     2c8:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <USB_DeviceState>
     2cc:	84 30       	cpi	r24, 0x04	; 4
     2ce:	09 f0       	breq	.+2      	; 0x2d2 <MassStorage_Task+0x14>
     2d0:	69 c0       	rjmp	.+210    	; 0x3a4 <MassStorage_Task+0xe6>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2d2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     2d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     2da:	82 ff       	sbrs	r24, 2
     2dc:	39 c0       	rjmp	.+114    	; 0x350 <MassStorage_Task+0x92>
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
     2de:	1a 82       	std	Y+2, r1	; 0x02
     2e0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     2e2:	ae 01       	movw	r20, r28
     2e4:	4f 5f       	subi	r20, 0xFF	; 255
     2e6:	5f 4f       	sbci	r21, 0xFF	; 255
     2e8:	6f e0       	ldi	r22, 0x0F	; 15
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	80 e8       	ldi	r24, 0x80	; 128
     2ee:	94 e0       	ldi	r25, 0x04	; 4
     2f0:	55 d6       	rcall	.+3242   	; 0xf9c <Endpoint_Read_Stream_LE>
     2f2:	85 30       	cpi	r24, 0x05	; 5
     2f4:	49 f1       	breq	.+82     	; 0x348 <MassStorage_Task+0x8a>
		if (IsMassStoreReset)
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     2f6:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <CommandBlock>
     2fa:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <CommandBlock+0x1>
     2fe:	a0 91 82 04 	lds	r26, 0x0482	; 0x800482 <CommandBlock+0x2>
     302:	b0 91 83 04 	lds	r27, 0x0483	; 0x800483 <CommandBlock+0x3>
     306:	85 35       	cpi	r24, 0x55	; 85
     308:	93 45       	sbci	r25, 0x53	; 83
     30a:	a2 44       	sbci	r26, 0x42	; 66
     30c:	b3 44       	sbci	r27, 0x43	; 67
     30e:	71 f4       	brne	.+28     	; 0x32c <MassStorage_Task+0x6e>
     310:	80 91 8d 04 	lds	r24, 0x048D	; 0x80048d <CommandBlock+0xd>
     314:	81 11       	cpse	r24, r1
     316:	0a c0       	rjmp	.+20     	; 0x32c <MassStorage_Task+0x6e>
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
     318:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <CommandBlock+0xc>
     31c:	8f 71       	andi	r24, 0x1F	; 31
     31e:	31 f4       	brne	.+12     	; 0x32c <MassStorage_Task+0x6e>
		(CommandBlock.Flags              & 0x1F)             ||
     320:	80 91 8e 04 	lds	r24, 0x048E	; 0x80048e <CommandBlock+0xe>
     324:	81 50       	subi	r24, 0x01	; 1
     326:	80 31       	cpi	r24, 0x10	; 16
     328:	08 f4       	brcc	.+2      	; 0x32c <MassStorage_Task+0x6e>
     32a:	41 c0       	rjmp	.+130    	; 0x3ae <MassStorage_Task+0xf0>
				UECONX |= (1 << STALLRQ);
     32c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     330:	80 62       	ori	r24, 0x20	; 32
     332:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     336:	83 e0       	ldi	r24, 0x03	; 3
     338:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQ);
     33c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     340:	80 62       	ori	r24, 0x20	; 32
     342:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     346:	04 c0       	rjmp	.+8      	; 0x350 <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     348:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     34c:	88 23       	and	r24, r24
     34e:	49 f2       	breq	.-110    	; 0x2e2 <MassStorage_Task+0x24>
	if (IsMassStoreReset)
     350:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     354:	88 23       	and	r24, r24
     356:	31 f1       	breq	.+76     	; 0x3a4 <MassStorage_Task+0xe6>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     358:	80 e1       	ldi	r24, 0x10	; 16
     35a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     35e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     362:	88 e0       	ldi	r24, 0x08	; 8
     364:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     368:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     36c:	84 e0       	ldi	r24, 0x04	; 4
     36e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     372:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     376:	80 61       	ori	r24, 0x10	; 16
     378:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     37c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     380:	88 60       	ori	r24, 0x08	; 8
     382:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     386:	83 e0       	ldi	r24, 0x03	; 3
     388:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     38c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     390:	80 61       	ori	r24, 0x10	; 16
     392:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     396:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     39a:	88 60       	ori	r24, 0x08	; 8
     39c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		IsMassStoreReset = false;
     3a0:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <__data_end>
}
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret
	}

	//serialWriteArray(msg, 21);

	/* Read in command block command data */
	BytesTransferred = 0;
     3ae:	1a 82       	std	Y+2, r1	; 0x02
     3b0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     3b2:	60 91 8e 04 	lds	r22, 0x048E	; 0x80048e <CommandBlock+0xe>
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	ae 01       	movw	r20, r28
     3ba:	4f 5f       	subi	r20, 0xFF	; 255
     3bc:	5f 4f       	sbci	r21, 0xFF	; 255
     3be:	8f e8       	ldi	r24, 0x8F	; 143
     3c0:	94 e0       	ldi	r25, 0x04	; 4
     3c2:	ec d5       	rcall	.+3032   	; 0xf9c <Endpoint_Read_Stream_LE>
     3c4:	85 30       	cpi	r24, 0x05	; 5
     3c6:	09 f4       	brne	.+2      	; 0x3ca <MassStorage_Task+0x10c>
     3c8:	5e c0       	rjmp	.+188    	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     3ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3ce:	8b 77       	andi	r24, 0x7B	; 123
     3d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     3d4:	80 e2       	ldi	r24, 0x20	; 32
     3d6:	00 df       	rcall	.-512    	; 0x1d8 <LEDs_SetAllLEDs>
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     3d8:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <CommandBlock+0xc>
     3dc:	87 ff       	sbrs	r24, 7
     3de:	03 c0       	rjmp	.+6      	; 0x3e6 <MassStorage_Task+0x128>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     3e6:	de d1       	rcall	.+956    	; 0x7a4 <SCSI_DecodeSCSICommand>
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	89 27       	eor	r24, r25
     3ec:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <CommandStatus+0xc>
		CommandStatus.Tag = CommandBlock.Tag;
     3f0:	40 91 84 04 	lds	r20, 0x0484	; 0x800484 <CommandBlock+0x4>
     3f4:	50 91 85 04 	lds	r21, 0x0485	; 0x800485 <CommandBlock+0x5>
     3f8:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <CommandBlock+0x6>
     3fc:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <CommandBlock+0x7>
     400:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <CommandStatus+0x4>
     404:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <CommandStatus+0x5>
     408:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <CommandStatus+0x6>
     40c:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <CommandStatus+0x7>
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     410:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <CommandBlock+0x8>
     414:	50 91 89 04 	lds	r21, 0x0489	; 0x800489 <CommandBlock+0x9>
     418:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <CommandBlock+0xa>
     41c:	70 91 8b 04 	lds	r23, 0x048B	; 0x80048b <CommandBlock+0xb>
     420:	40 93 2f 01 	sts	0x012F, r20	; 0x80012f <CommandStatus+0x8>
     424:	50 93 30 01 	sts	0x0130, r21	; 0x800130 <CommandStatus+0x9>
     428:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <CommandStatus+0xa>
     42c:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <CommandStatus+0xb>
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     430:	88 23       	and	r24, r24
     432:	49 f0       	breq	.+18     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
     434:	45 2b       	or	r20, r21
     436:	46 2b       	or	r20, r22
     438:	47 2b       	or	r20, r23
     43a:	29 f0       	breq	.+10     	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
				UECONX |= (1 << STALLRQ);
     43c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     440:	80 62       	ori	r24, 0x20	; 32
     442:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     44c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     450:	85 fd       	sbrc	r24, 5
     452:	1f c0       	rjmp	.+62     	; 0x492 <__FUSE_REGION_LENGTH__+0x92>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     45a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     45e:	85 fd       	sbrc	r24, 5
     460:	1f c0       	rjmp	.+62     	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
     462:	1a 82       	std	Y+2, r1	; 0x02
     464:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     466:	ae 01       	movw	r20, r28
     468:	4f 5f       	subi	r20, 0xFF	; 255
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	6d e0       	ldi	r22, 0x0D	; 13
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	87 e2       	ldi	r24, 0x27	; 39
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	46 d5       	rcall	.+2700   	; 0xf02 <Endpoint_Write_Stream_LE>
     476:	85 30       	cpi	r24, 0x05	; 5
     478:	c1 f0       	breq	.+48     	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     47a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     47e:	8e 77       	andi	r24, 0x7E	; 126
     480:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     484:	0a c0       	rjmp	.+20     	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
		if (IsMassStoreReset)
     486:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     48a:	88 23       	and	r24, r24
     48c:	09 f4       	brne	.+2      	; 0x490 <__FUSE_REGION_LENGTH__+0x90>
     48e:	91 cf       	rjmp	.-222    	; 0x3b2 <MassStorage_Task+0xf4>
     490:	5f cf       	rjmp	.-322    	; 0x350 <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     492:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     496:	88 23       	and	r24, r24
     498:	c9 f2       	breq	.-78     	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     49a:	80 e2       	ldi	r24, 0x20	; 32
     49c:	9d de       	rcall	.-710    	; 0x1d8 <LEDs_SetAllLEDs>
     49e:	58 cf       	rjmp	.-336    	; 0x350 <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     4a0:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     4a4:	88 23       	and	r24, r24
     4a6:	c9 f2       	breq	.-78     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
     4a8:	f8 cf       	rjmp	.-16     	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     4aa:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     4ae:	88 23       	and	r24, r24
     4b0:	d1 f2       	breq	.-76     	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
     4b2:	f3 cf       	rjmp	.-26     	; 0x49a <__FUSE_REGION_LENGTH__+0x9a>

000004b4 <main>:
	serialBegin();
     4b4:	43 d0       	rcall	.+134    	; 0x53c <serialBegin>
	if(!sd_raw_init())
     4b6:	20 d4       	rcall	.+2112   	; 0xcf8 <sd_raw_init>
     4b8:	81 11       	cpse	r24, r1
     4ba:	08 c0       	rjmp	.+16     	; 0x4cc <main+0x18>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     4bc:	81 e8       	ldi	r24, 0x81	; 129
     4be:	8c de       	rcall	.-744    	; 0x1d8 <LEDs_SetAllLEDs>
		serialWriteArray(sderrormsg, 20);
     4c0:	64 e1       	ldi	r22, 0x14	; 20
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	50 d0       	rcall	.+160    	; 0x56a <serialWriteArray>
     4ca:	ff cf       	rjmp	.-2      	; 0x4ca <main+0x16>
	SetupHardware();
     4cc:	99 de       	rcall	.-718    	; 0x200 <SetupHardware>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	83 de       	rcall	.-762    	; 0x1d8 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     4d2:	78 94       	sei
		MassStorage_Task();
     4d4:	f4 de       	rcall	.-536    	; 0x2be <MassStorage_Task>
		USB_USBTask();
     4d6:	0e 94 17 0c 	call	0x182e	; 0x182e <USB_USBTask>
     4da:	fc cf       	rjmp	.-8      	; 0x4d4 <main+0x20>

000004dc <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     4dc:	29 2f       	mov	r18, r25
     4de:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4e0:	22 30       	cpi	r18, 0x02	; 2
     4e2:	31 05       	cpc	r19, r1
     4e4:	71 f0       	breq	.+28     	; 0x502 <CALLBACK_USB_GetDescriptor+0x26>
     4e6:	23 30       	cpi	r18, 0x03	; 3
     4e8:	31 05       	cpc	r19, r1
     4ea:	81 f0       	breq	.+32     	; 0x50c <CALLBACK_USB_GetDescriptor+0x30>
     4ec:	21 30       	cpi	r18, 0x01	; 1
     4ee:	31 05       	cpc	r19, r1
     4f0:	a1 f4       	brne	.+40     	; 0x51a <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4f2:	82 e1       	ldi	r24, 0x12	; 18
     4f4:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     4f6:	2c e8       	ldi	r18, 0x8C	; 140
     4f8:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     4fa:	fa 01       	movw	r30, r20
     4fc:	31 83       	std	Z+1, r19	; 0x01
     4fe:	20 83       	st	Z, r18
	return Size;
}
     500:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
     502:	80 e2       	ldi	r24, 0x20	; 32
     504:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     506:	2c e6       	ldi	r18, 0x6C	; 108
     508:	31 e0       	ldi	r19, 0x01	; 1
			break;
     50a:	f7 cf       	rjmp	.-18     	; 0x4fa <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
     50c:	99 27       	eor	r25, r25
     50e:	81 30       	cpi	r24, 0x01	; 1
     510:	91 05       	cpc	r25, r1
     512:	71 f0       	breq	.+28     	; 0x530 <CALLBACK_USB_GetDescriptor+0x54>
     514:	38 f0       	brcs	.+14     	; 0x524 <CALLBACK_USB_GetDescriptor+0x48>
     516:	02 97       	sbiw	r24, 0x02	; 2
     518:	71 f0       	breq	.+28     	; 0x536 <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	90 e0       	ldi	r25, 0x00	; 0
	const void* Address = NULL;
     51e:	20 e0       	ldi	r18, 0x00	; 0
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	eb cf       	rjmp	.-42     	; 0x4fa <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     524:	e8 e6       	ldi	r30, 0x68	; 104
     526:	f1 e0       	ldi	r31, 0x01	; 1
					Size    = pgm_read_byte(&ProductString.Header.Size);
     528:	84 91       	lpm	r24, Z
     52a:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     52c:	9f 01       	movw	r18, r30
					break;
     52e:	e5 cf       	rjmp	.-54     	; 0x4fa <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     530:	ec e5       	ldi	r30, 0x5C	; 92
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	f9 cf       	rjmp	.-14     	; 0x528 <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     536:	ee e2       	ldi	r30, 0x2E	; 46
     538:	f1 e0       	ldi	r31, 0x01	; 1
     53a:	f6 cf       	rjmp	.-20     	; 0x528 <CALLBACK_USB_GetDescriptor+0x4c>

0000053c <serialBegin>:

// initialize the hardware uart: 57600 baud, 8 bits, no parity, 2 stop bits
void serialBegin()
{
	const unsigned int baud = 57600;
	UBRR1 = (F_CPU / 4 / baud - 1) / 2;
     53c:	82 e2       	ldi	r24, 0x22	; 34
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     544:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1A = (1<<U2X1);		// set double transmission speed
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
     54e:	88 e9       	ldi	r24, 0x98	; 152
     550:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);
     554:	8e e0       	ldi	r24, 0x0E	; 14
     556:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     55a:	08 95       	ret

0000055c <serialWrite>:

// output a single byte to uart
void serialWrite( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
     55c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     560:	95 ff       	sbrs	r25, 5
     562:	fc cf       	rjmp	.-8      	; 0x55c <serialWrite>
	;
	/* Put data into buffer, sends the data */
	UDR1 = (uint8_t)data;
     564:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     568:	08 95       	ret

0000056a <serialWriteArray>:
}

// output a string to uart
void serialWriteArray( unsigned char data[], unsigned int len)
{
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	ec 01       	movw	r28, r24
     574:	8c 01       	movw	r16, r24
     576:	06 0f       	add	r16, r22
     578:	17 1f       	adc	r17, r23
	for(int i = 0; i < len; i++)
     57a:	c0 17       	cp	r28, r16
     57c:	d1 07       	cpc	r29, r17
     57e:	29 f4       	brne	.+10     	; 0x58a <serialWriteArray+0x20>
	{
		serialWrite(*(data + i));
	}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	1f 91       	pop	r17
     586:	0f 91       	pop	r16
     588:	08 95       	ret
		serialWrite(*(data + i));
     58a:	89 91       	ld	r24, Y+
     58c:	e7 df       	rcall	.-50     	; 0x55c <serialWrite>
     58e:	f5 cf       	rjmp	.-22     	; 0x57a <serialWriteArray+0x10>

00000590 <readData>:
unsigned char readcmdmsg2[] = {' ', 'l', 'e', 'n', 'g', 't', 'h', ' '};
unsigned char digitLookup[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
uint32_t test = 1234567890;

void readData(const uint32_t BlockAddress, uint16_t TotalBlocks)
{
     590:	2f 92       	push	r2
     592:	3f 92       	push	r3
     594:	4f 92       	push	r4
     596:	5f 92       	push	r5
     598:	6f 92       	push	r6
     59a:	7f 92       	push	r7
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	2a 97       	sbiw	r28, 0x0a	; 10
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	6a 01       	movw	r12, r20
	uint32_t offset = BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE;
     5c6:	4b 01       	movw	r8, r22
     5c8:	5c 01       	movw	r10, r24
     5ca:	39 e0       	ldi	r19, 0x09	; 9
     5cc:	88 0c       	add	r8, r8
     5ce:	99 1c       	adc	r9, r9
     5d0:	aa 1c       	adc	r10, r10
     5d2:	bb 1c       	adc	r11, r11
     5d4:	3a 95       	dec	r19
     5d6:	d1 f7       	brne	.-12     	; 0x5cc <readData+0x3c>
	uint32_t length = TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE;
     5d8:	ca 01       	movw	r24, r20
     5da:	98 2f       	mov	r25, r24
     5dc:	88 27       	eor	r24, r24
     5de:	99 0f       	add	r25, r25
     5e0:	9c 01       	movw	r18, r24
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	2a 83       	std	Y+2, r18	; 0x02
     5e8:	3b 83       	std	Y+3, r19	; 0x03
     5ea:	4c 83       	std	Y+4, r20	; 0x04
     5ec:	5d 83       	std	Y+5, r21	; 0x05

	serialWriteArray(readcmdmsg, 5);
     5ee:	65 e0       	ldi	r22, 0x05	; 5
     5f0:	70 e0       	ldi	r23, 0x00	; 0
     5f2:	8a e4       	ldi	r24, 0x4A	; 74
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	b9 df       	rcall	.-142    	; 0x56a <serialWriteArray>
	for(int i = 9; i >= 0; i--)
     5f8:	09 e0       	ldi	r16, 0x09	; 9
     5fa:	10 e0       	ldi	r17, 0x00	; 0
	{
		serialWrite(digitLookup[(offset / (uint32_t)pow(10, i)) % 10]);
     5fc:	5a e0       	ldi	r21, 0x0A	; 10
     5fe:	45 2e       	mov	r4, r21
     600:	51 2c       	mov	r5, r1
     602:	61 2c       	mov	r6, r1
     604:	71 2c       	mov	r7, r1
     606:	b8 01       	movw	r22, r16
     608:	01 2e       	mov	r0, r17
     60a:	00 0c       	add	r0, r0
     60c:	88 0b       	sbc	r24, r24
     60e:	99 0b       	sbc	r25, r25
     610:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__floatsisf>
     614:	9b 01       	movw	r18, r22
     616:	ac 01       	movw	r20, r24
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	80 e2       	ldi	r24, 0x20	; 32
     61e:	91 e4       	ldi	r25, 0x41	; 65
     620:	0e 94 c4 0c 	call	0x1988	; 0x1988 <pow>
     624:	0e 94 32 0c 	call	0x1864	; 0x1864 <__fixunssfsi>
     628:	9b 01       	movw	r18, r22
     62a:	ac 01       	movw	r20, r24
     62c:	c5 01       	movw	r24, r10
     62e:	b4 01       	movw	r22, r8
     630:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodsi4>
     634:	ca 01       	movw	r24, r20
     636:	b9 01       	movw	r22, r18
     638:	a3 01       	movw	r20, r6
     63a:	92 01       	movw	r18, r4
     63c:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodsi4>
     640:	68 5c       	subi	r22, 0xC8	; 200
     642:	7e 4f       	sbci	r23, 0xFE	; 254
     644:	fb 01       	movw	r30, r22
     646:	80 81       	ld	r24, Z
     648:	89 df       	rcall	.-238    	; 0x55c <serialWrite>
	for(int i = 9; i >= 0; i--)
     64a:	01 50       	subi	r16, 0x01	; 1
     64c:	11 09       	sbc	r17, r1
     64e:	d8 f6       	brcc	.-74     	; 0x606 <readData+0x76>
	}
	serialWriteArray(readcmdmsg2, 8);
     650:	68 e0       	ldi	r22, 0x08	; 8
     652:	70 e0       	ldi	r23, 0x00	; 0
     654:	82 e4       	ldi	r24, 0x42	; 66
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	88 df       	rcall	.-240    	; 0x56a <serialWriteArray>
	for(int i = 9; i >= 0; i--)
     65a:	09 e0       	ldi	r16, 0x09	; 9
     65c:	10 e0       	ldi	r17, 0x00	; 0
	{
		serialWrite(digitLookup[(length / (uint32_t)pow(10, i)) % 10]);
     65e:	2a e0       	ldi	r18, 0x0A	; 10
     660:	42 2e       	mov	r4, r18
     662:	51 2c       	mov	r5, r1
     664:	61 2c       	mov	r6, r1
     666:	71 2c       	mov	r7, r1
     668:	b8 01       	movw	r22, r16
     66a:	01 2e       	mov	r0, r17
     66c:	00 0c       	add	r0, r0
     66e:	88 0b       	sbc	r24, r24
     670:	99 0b       	sbc	r25, r25
     672:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <__floatsisf>
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	80 e2       	ldi	r24, 0x20	; 32
     680:	91 e4       	ldi	r25, 0x41	; 65
     682:	0e 94 c4 0c 	call	0x1988	; 0x1988 <pow>
     686:	0e 94 32 0c 	call	0x1864	; 0x1864 <__fixunssfsi>
     68a:	9b 01       	movw	r18, r22
     68c:	ac 01       	movw	r20, r24
     68e:	6a 81       	ldd	r22, Y+2	; 0x02
     690:	7b 81       	ldd	r23, Y+3	; 0x03
     692:	8c 81       	ldd	r24, Y+4	; 0x04
     694:	9d 81       	ldd	r25, Y+5	; 0x05
     696:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodsi4>
     69a:	ca 01       	movw	r24, r20
     69c:	b9 01       	movw	r22, r18
     69e:	a3 01       	movw	r20, r6
     6a0:	92 01       	movw	r18, r4
     6a2:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodsi4>
     6a6:	68 5c       	subi	r22, 0xC8	; 200
     6a8:	7e 4f       	sbci	r23, 0xFE	; 254
     6aa:	fb 01       	movw	r30, r22
     6ac:	80 81       	ld	r24, Z
     6ae:	56 df       	rcall	.-340    	; 0x55c <serialWrite>
	for(int i = 9; i >= 0; i--)
     6b0:	01 50       	subi	r16, 0x01	; 1
     6b2:	11 09       	sbc	r17, r1
     6b4:	c8 f6       	brcc	.-78     	; 0x668 <readData+0xd8>
	}
	serialWrite('\n');
     6b6:	8a e0       	ldi	r24, 0x0A	; 10
     6b8:	51 df       	rcall	.-350    	; 0x55c <serialWrite>
	serialWrite('\r');
     6ba:	8d e0       	ldi	r24, 0x0D	; 13
     6bc:	4f df       	rcall	.-354    	; 0x55c <serialWrite>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     6be:	ca d5       	rcall	.+2964   	; 0x1254 <Endpoint_WaitUntilReady>
     6c0:	81 11       	cpse	r24, r1
     6c2:	57 c0       	rjmp	.+174    	; 0x772 <readData+0x1e2>
	  return;

	while (TotalBlocks)
     6c4:	c1 14       	cp	r12, r1
     6c6:	d1 04       	cpc	r13, r1
     6c8:	51 f4       	brne	.+20     	; 0x6de <readData+0x14e>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     6ce:	85 fd       	sbrc	r24, 5
     6d0:	50 c0       	rjmp	.+160    	; 0x772 <readData+0x1e2>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6d6:	8e 77       	andi	r24, 0x7E	; 126
     6d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     6dc:	4a c0       	rjmp	.+148    	; 0x772 <readData+0x1e2>
     6de:	20 e2       	ldi	r18, 0x20	; 32
     6e0:	2a 87       	std	Y+10, r18	; 0x0a
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (!(Endpoint_IsReadWriteAllowed()))
     6e6:	85 ff       	sbrs	r24, 5
     6e8:	3b c0       	rjmp	.+118    	; 0x760 <readData+0x1d0>
     6ea:	14 01       	movw	r2, r8
     6ec:	25 01       	movw	r4, r10
     6ee:	90 e1       	ldi	r25, 0x10	; 16
     6f0:	69 2e       	mov	r6, r25
     6f2:	71 2c       	mov	r7, r1
				sd_raw_read(offset, &buffer, 1);
     6f4:	a2 01       	movw	r20, r4
     6f6:	91 01       	movw	r18, r2
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	cb 01       	movw	r24, r22
     6fe:	2a 82       	std	Y+2, r2	; 0x02
     700:	3b 83       	std	Y+3, r19	; 0x03
     702:	4c 83       	std	Y+4, r20	; 0x04
     704:	5d 83       	std	Y+5, r21	; 0x05
     706:	6e 83       	std	Y+6, r22	; 0x06
     708:	7f 83       	std	Y+7, r23	; 0x07
     70a:	88 87       	std	Y+8, r24	; 0x08
     70c:	99 87       	std	Y+9, r25	; 0x09
     70e:	ee 24       	eor	r14, r14
     710:	e3 94       	inc	r14
     712:	f1 2c       	mov	r15, r1
     714:	8e 01       	movw	r16, r28
     716:	0f 5f       	subi	r16, 0xFF	; 255
     718:	1f 4f       	sbci	r17, 0xFF	; 255
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	e6 d1       	rcall	.+972    	; 0xaf0 <sd_raw_read>
				Endpoint_Write_8(buffer);
     724:	89 81       	ldd	r24, Y+1	; 0x01
				UEDATX = Data;
     726:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				offset++;
     72a:	3f ef       	ldi	r19, 0xFF	; 255
     72c:	23 1a       	sub	r2, r19
     72e:	33 0a       	sbc	r3, r19
     730:	43 0a       	sbc	r4, r19
     732:	53 0a       	sbc	r5, r19
     734:	41 e0       	ldi	r20, 0x01	; 1
     736:	64 1a       	sub	r6, r20
     738:	71 08       	sbc	r7, r1
			for(int j = 0; j < 16; j++)
     73a:	e1 f6       	brne	.-72     	; 0x6f4 <readData+0x164>
     73c:	50 e1       	ldi	r21, 0x10	; 16
     73e:	85 0e       	add	r8, r21
     740:	91 1c       	adc	r9, r1
     742:	a1 1c       	adc	r10, r1
     744:	b1 1c       	adc	r11, r1
			if (IsMassStoreReset)
     746:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     74a:	81 11       	cpse	r24, r1
     74c:	12 c0       	rjmp	.+36     	; 0x772 <readData+0x1e2>
     74e:	6a 85       	ldd	r22, Y+10	; 0x0a
     750:	61 50       	subi	r22, 0x01	; 1
     752:	6a 87       	std	Y+10, r22	; 0x0a
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     754:	61 11       	cpse	r22, r1
     756:	c5 cf       	rjmp	.-118    	; 0x6e2 <readData+0x152>
		TotalBlocks--;
     758:	71 e0       	ldi	r23, 0x01	; 1
     75a:	c7 1a       	sub	r12, r23
     75c:	d1 08       	sbc	r13, r1
     75e:	b2 cf       	rjmp	.-156    	; 0x6c4 <readData+0x134>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     760:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     764:	8e 77       	andi	r24, 0x7E	; 126
     766:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				if (Endpoint_WaitUntilReady())
     76a:	74 d5       	rcall	.+2792   	; 0x1254 <Endpoint_WaitUntilReady>
     76c:	88 23       	and	r24, r24
     76e:	09 f4       	brne	.+2      	; 0x772 <readData+0x1e2>
     770:	bc cf       	rjmp	.-136    	; 0x6ea <readData+0x15a>
	  Endpoint_ClearIN();
     772:	2a 96       	adiw	r28, 0x0a	; 10
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	f8 94       	cli
     778:	de bf       	out	0x3e, r29	; 62
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	cd bf       	out	0x3d, r28	; 61
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	ff 90       	pop	r15
     788:	ef 90       	pop	r14
     78a:	df 90       	pop	r13
     78c:	cf 90       	pop	r12
     78e:	bf 90       	pop	r11
     790:	af 90       	pop	r10
     792:	9f 90       	pop	r9
     794:	8f 90       	pop	r8
     796:	7f 90       	pop	r7
     798:	6f 90       	pop	r6
     79a:	5f 90       	pop	r5
     79c:	4f 90       	pop	r4
     79e:	3f 90       	pop	r3
     7a0:	2f 90       	pop	r2
     7a2:	08 95       	ret

000007a4 <SCSI_DecodeSCSICommand>:
 *  a command failure due to a ILLEGAL REQUEST.
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(void)
{
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     7ac:	80 91 8f 04 	lds	r24, 0x048F	; 0x80048f <CommandBlock+0xf>
     7b0:	8d 31       	cpi	r24, 0x1D	; 29
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <SCSI_DecodeSCSICommand+0x12>
     7b4:	e5 c0       	rjmp	.+458    	; 0x980 <SCSI_DecodeSCSICommand+0x1dc>
     7b6:	e0 f4       	brcc	.+56     	; 0x7f0 <SCSI_DecodeSCSICommand+0x4c>
     7b8:	82 31       	cpi	r24, 0x12	; 18
     7ba:	09 f4       	brne	.+2      	; 0x7be <SCSI_DecodeSCSICommand+0x1a>
     7bc:	5b c0       	rjmp	.+182    	; 0x874 <SCSI_DecodeSCSICommand+0xd0>
     7be:	70 f4       	brcc	.+28     	; 0x7dc <SCSI_DecodeSCSICommand+0x38>
     7c0:	88 23       	and	r24, r24
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <SCSI_DecodeSCSICommand+0x22>
     7c4:	4d c1       	rjmp	.+666    	; 0xa60 <SCSI_DecodeSCSICommand+0x2bc>
     7c6:	83 30       	cpi	r24, 0x03	; 3
     7c8:	09 f4       	brne	.+2      	; 0x7cc <SCSI_DecodeSCSICommand+0x28>
     7ca:	ae c0       	rjmp	.+348    	; 0x928 <SCSI_DecodeSCSICommand+0x184>
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     7cc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <SenseData+0x2>
     7d0:	80 7f       	andi	r24, 0xF0	; 240
     7d2:	85 60       	ori	r24, 0x05	; 5
     7d4:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SenseData+0x2>
     7d8:	80 e2       	ldi	r24, 0x20	; 32
     7da:	66 c0       	rjmp	.+204    	; 0x8a8 <SCSI_DecodeSCSICommand+0x104>
	switch (CommandBlock.SCSICommandData[0])
     7dc:	8a 31       	cpi	r24, 0x1A	; 26
     7de:	09 f4       	brne	.+2      	; 0x7e2 <SCSI_DecodeSCSICommand+0x3e>
     7e0:	20 c1       	rjmp	.+576    	; 0xa22 <SCSI_DecodeSCSICommand+0x27e>
     7e2:	8b 31       	cpi	r24, 0x1B	; 27
     7e4:	99 f7       	brne	.-26     	; 0x7cc <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(startstopmsg, 20);
     7e6:	64 e1       	ldi	r22, 0x14	; 20
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	84 eb       	ldi	r24, 0xB4	; 180
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	cc c0       	rjmp	.+408    	; 0x988 <SCSI_DecodeSCSICommand+0x1e4>
	switch (CommandBlock.SCSICommandData[0])
     7f0:	88 32       	cpi	r24, 0x28	; 40
     7f2:	09 f4       	brne	.+2      	; 0x7f6 <SCSI_DecodeSCSICommand+0x52>
     7f4:	e0 c0       	rjmp	.+448    	; 0x9b6 <SCSI_DecodeSCSICommand+0x212>
     7f6:	98 f5       	brcc	.+102    	; 0x85e <SCSI_DecodeSCSICommand+0xba>
     7f8:	8e 31       	cpi	r24, 0x1E	; 30
     7fa:	09 f4       	brne	.+2      	; 0x7fe <SCSI_DecodeSCSICommand+0x5a>
     7fc:	36 c1       	rjmp	.+620    	; 0xa6a <SCSI_DecodeSCSICommand+0x2c6>
     7fe:	85 32       	cpi	r24, 0x25	; 37
     800:	29 f7       	brne	.-54     	; 0x7cc <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(readcapacitymsg, 23);
     802:	67 e1       	ldi	r22, 0x17	; 23
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	82 e1       	ldi	r24, 0x12	; 18
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	af de       	rcall	.-674    	; 0x56a <serialWriteArray>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     80c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     810:	8c ee       	ldi	r24, 0xEC	; 236
     812:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     816:	8f ed       	ldi	r24, 0xDF	; 223
     818:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     81c:	8f ef       	ldi	r24, 0xFF	; 255
     81e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
     822:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     826:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     830:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     834:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <__data_end>
     838:	81 11       	cpse	r24, r1
     83a:	3a c0       	rjmp	.+116    	; 0x8b0 <SCSI_DecodeSCSICommand+0x10c>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     83c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     840:	8e 77       	andi	r24, 0x7E	; 126
     842:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     846:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <CommandBlock+0x8>
     84a:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <CommandBlock+0x9>
     84e:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <CommandBlock+0xa>
     852:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <CommandBlock+0xb>
     856:	08 97       	sbiw	r24, 0x08	; 8
     858:	a1 09       	sbc	r26, r1
     85a:	b1 09       	sbc	r27, r1
     85c:	52 c0       	rjmp	.+164    	; 0x902 <SCSI_DecodeSCSICommand+0x15e>
	switch (CommandBlock.SCSICommandData[0])
     85e:	8a 32       	cpi	r24, 0x2A	; 42
     860:	09 f4       	brne	.+2      	; 0x864 <SCSI_DecodeSCSICommand+0xc0>
     862:	9c c0       	rjmp	.+312    	; 0x99c <SCSI_DecodeSCSICommand+0x1f8>
     864:	8f 32       	cpi	r24, 0x2F	; 47
     866:	09 f0       	breq	.+2      	; 0x86a <SCSI_DecodeSCSICommand+0xc6>
     868:	b1 cf       	rjmp	.-158    	; 0x7cc <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(verifymsg, 16);
     86a:	60 e1       	ldi	r22, 0x10	; 16
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	82 e7       	ldi	r24, 0x72	; 114
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	8a c0       	rjmp	.+276    	; 0x988 <SCSI_DecodeSCSICommand+0x1e4>
			serialWriteArray(inquirymsg, 17);
     874:	61 e1       	ldi	r22, 0x11	; 17
     876:	70 e0       	ldi	r23, 0x00	; 0
     878:	80 e4       	ldi	r24, 0x40	; 64
     87a:	92 e0       	ldi	r25, 0x02	; 2
     87c:	76 de       	rcall	.-788    	; 0x56a <serialWriteArray>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     87e:	20 91 93 04 	lds	r18, 0x0493	; 0x800493 <CommandBlock+0x13>
     882:	c2 2f       	mov	r28, r18
     884:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <CommandBlock+0x12>
     888:	d8 2f       	mov	r29, r24
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     88a:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <CommandBlock+0x10>
     88e:	83 70       	andi	r24, 0x03	; 3
     890:	21 f4       	brne	.+8      	; 0x89a <SCSI_DecodeSCSICommand+0xf6>
     892:	80 91 91 04 	lds	r24, 0x0491	; 0x800491 <CommandBlock+0x11>
     896:	88 23       	and	r24, r24
     898:	89 f0       	breq	.+34     	; 0x8bc <SCSI_DecodeSCSICommand+0x118>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     89a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <SenseData+0x2>
     89e:	80 7f       	andi	r24, 0xF0	; 240
     8a0:	85 60       	ori	r24, 0x05	; 5
     8a2:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SenseData+0x2>
     8a6:	84 e2       	ldi	r24, 0x24	; 36
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     8a8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <SenseData+0xc>
     8ac:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <SenseData+0xd>
	return false;
     8b0:	80 e0       	ldi	r24, 0x00	; 0
}
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     8bc:	8e 01       	movw	r16, r28
     8be:	c5 32       	cpi	r28, 0x25	; 37
     8c0:	d1 05       	cpc	r29, r1
     8c2:	10 f0       	brcs	.+4      	; 0x8c8 <SCSI_DecodeSCSICommand+0x124>
     8c4:	04 e2       	ldi	r16, 0x24	; 36
     8c6:	10 e0       	ldi	r17, 0x00	; 0
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	b8 01       	movw	r22, r16
     8ce:	81 e5       	ldi	r24, 0x51	; 81
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	17 d3       	rcall	.+1582   	; 0xf02 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	ce 01       	movw	r24, r28
     8da:	80 1b       	sub	r24, r16
     8dc:	91 0b       	sbc	r25, r17
     8de:	ce d2       	rcall	.+1436   	; 0xe7c <Endpoint_Null_Stream>
     8e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8e4:	8e 77       	andi	r24, 0x7E	; 126
     8e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     8ea:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <CommandBlock+0x8>
     8ee:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <CommandBlock+0x9>
     8f2:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <CommandBlock+0xa>
     8f6:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <CommandBlock+0xb>
     8fa:	80 1b       	sub	r24, r16
     8fc:	91 0b       	sbc	r25, r17
     8fe:	a1 09       	sbc	r26, r1
     900:	b1 09       	sbc	r27, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     902:	80 93 88 04 	sts	0x0488, r24	; 0x800488 <CommandBlock+0x8>
     906:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <CommandBlock+0x9>
     90a:	a0 93 8a 04 	sts	0x048A, r26	; 0x80048a <CommandBlock+0xa>
     90e:	b0 93 8b 04 	sts	0x048B, r27	; 0x80048b <CommandBlock+0xb>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     912:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <SenseData+0x2>
     916:	80 7f       	andi	r24, 0xF0	; 240
     918:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SenseData+0x2>
     91c:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <SenseData+0xc>
     920:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <SenseData+0xd>
		return true;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	c5 cf       	rjmp	.-118    	; 0x8b2 <SCSI_DecodeSCSICommand+0x10e>
			serialWriteArray(requestsensemsg, 23);
     928:	67 e1       	ldi	r22, 0x17	; 23
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	89 e2       	ldi	r24, 0x29	; 41
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	1c de       	rcall	.-968    	; 0x56a <serialWriteArray>
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     932:	c0 91 93 04 	lds	r28, 0x0493	; 0x800493 <CommandBlock+0x13>
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     936:	dc 2f       	mov	r29, r28
     938:	c3 31       	cpi	r28, 0x13	; 19
     93a:	08 f0       	brcs	.+2      	; 0x93e <SCSI_DecodeSCSICommand+0x19a>
     93c:	d2 e1       	ldi	r29, 0x12	; 18
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     93e:	0d 2f       	mov	r16, r29
     940:	10 e0       	ldi	r17, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	b8 01       	movw	r22, r16
     948:	8f e4       	ldi	r24, 0x4F	; 79
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	da d2       	rcall	.+1460   	; 0xf02 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     94e:	8c 2f       	mov	r24, r28
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	80 1b       	sub	r24, r16
     958:	91 0b       	sbc	r25, r17
     95a:	90 d2       	rcall	.+1312   	; 0xe7c <Endpoint_Null_Stream>
     95c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     960:	8e 77       	andi	r24, 0x7E	; 126
     962:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     966:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <CommandBlock+0x8>
     96a:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <CommandBlock+0x9>
     96e:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <CommandBlock+0xa>
     972:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <CommandBlock+0xb>
     976:	8d 1b       	sub	r24, r29
     978:	91 09       	sbc	r25, r1
     97a:	a1 09       	sbc	r26, r1
     97c:	b1 09       	sbc	r27, r1
     97e:	c1 cf       	rjmp	.-126    	; 0x902 <SCSI_DecodeSCSICommand+0x15e>
			serialWriteArray(senddiagnosticmsg, 25);
     980:	69 e1       	ldi	r22, 0x19	; 25
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	89 ef       	ldi	r24, 0xF9	; 249
     986:	91 e0       	ldi	r25, 0x01	; 1
			serialWriteArray(preventallowmediumremovalmsg, 31);
     988:	f0 dd       	rcall	.-1056   	; 0x56a <serialWriteArray>
			CommandBlock.DataTransferLength = 0;
     98a:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <CommandBlock+0x8>
     98e:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <CommandBlock+0x9>
     992:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <CommandBlock+0xa>
     996:	10 92 8b 04 	sts	0x048B, r1	; 0x80048b <CommandBlock+0xb>
			break;
     99a:	bb cf       	rjmp	.-138    	; 0x912 <SCSI_DecodeSCSICommand+0x16e>
			serialWriteArray(writemsg, 15);
     99c:	6f e0       	ldi	r22, 0x0F	; 15
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	8a ee       	ldi	r24, 0xEA	; 234
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	e2 dd       	rcall	.-1084   	; 0x56a <serialWriteArray>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_DATA_PROTECT,
     9a6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <SenseData+0x2>
     9aa:	80 7f       	andi	r24, 0xF0	; 240
     9ac:	87 60       	ori	r24, 0x07	; 7
     9ae:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SenseData+0x2>
     9b2:	87 e2       	ldi	r24, 0x27	; 39
     9b4:	79 cf       	rjmp	.-270    	; 0x8a8 <SCSI_DecodeSCSICommand+0x104>

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     9b6:	60 91 94 04 	lds	r22, 0x0494	; 0x800494 <CommandBlock+0x14>
     9ba:	70 91 93 04 	lds	r23, 0x0493	; 0x800493 <CommandBlock+0x13>
     9be:	80 91 92 04 	lds	r24, 0x0492	; 0x800492 <CommandBlock+0x12>
     9c2:	90 91 91 04 	lds	r25, 0x0491	; 0x800491 <CommandBlock+0x11>
				return Data.Word;
     9c6:	20 91 97 04 	lds	r18, 0x0497	; 0x800497 <CommandBlock+0x17>
     9ca:	c2 2f       	mov	r28, r18
     9cc:	20 91 96 04 	lds	r18, 0x0496	; 0x800496 <CommandBlock+0x16>
     9d0:	d2 2f       	mov	r29, r18
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     9d2:	61 15       	cp	r22, r1
     9d4:	20 ee       	ldi	r18, 0xE0	; 224
     9d6:	72 07       	cpc	r23, r18
     9d8:	2c ee       	ldi	r18, 0xEC	; 236
     9da:	82 07       	cpc	r24, r18
     9dc:	91 05       	cpc	r25, r1
     9de:	40 f0       	brcs	.+16     	; 0x9f0 <SCSI_DecodeSCSICommand+0x24c>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9e0:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <SenseData+0x2>
     9e4:	80 7f       	andi	r24, 0xF0	; 240
     9e6:	85 60       	ori	r24, 0x05	; 5
     9e8:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <SenseData+0x2>
     9ec:	81 e2       	ldi	r24, 0x21	; 33
     9ee:	5c cf       	rjmp	.-328    	; 0x8a8 <SCSI_DecodeSCSICommand+0x104>
	readData(BlockAddress, TotalBlocks);
     9f0:	ae 01       	movw	r20, r28
     9f2:	ce dd       	rcall	.-1124   	; 0x590 <readData>
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     9f4:	ae 01       	movw	r20, r28
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	89 e0       	ldi	r24, 0x09	; 9
     9fc:	44 0f       	add	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	66 1f       	adc	r22, r22
     a02:	77 1f       	adc	r23, r23
     a04:	8a 95       	dec	r24
     a06:	d1 f7       	brne	.-12     	; 0x9fc <SCSI_DecodeSCSICommand+0x258>
     a08:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <CommandBlock+0x8>
     a0c:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <CommandBlock+0x9>
     a10:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <CommandBlock+0xa>
     a14:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <CommandBlock+0xb>
     a18:	84 1b       	sub	r24, r20
     a1a:	95 0b       	sbc	r25, r21
     a1c:	a6 0b       	sbc	r26, r22
     a1e:	b7 0b       	sbc	r27, r23
     a20:	70 cf       	rjmp	.-288    	; 0x902 <SCSI_DecodeSCSICommand+0x15e>
			serialWriteArray(modesensemsg, 20);
     a22:	64 e1       	ldi	r22, 0x14	; 20
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	88 ec       	ldi	r24, 0xC8	; 200
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	9f dd       	rcall	.-1218   	; 0x56a <serialWriteArray>
				UEDATX = Data;
     a2c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a30:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a34:	80 e8       	ldi	r24, 0x80	; 128
     a36:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a3a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a42:	8e 77       	andi	r24, 0x7E	; 126
     a44:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= 4;
     a48:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <CommandBlock+0x8>
     a4c:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <CommandBlock+0x9>
     a50:	a0 91 8a 04 	lds	r26, 0x048A	; 0x80048a <CommandBlock+0xa>
     a54:	b0 91 8b 04 	lds	r27, 0x048B	; 0x80048b <CommandBlock+0xb>
     a58:	04 97       	sbiw	r24, 0x04	; 4
     a5a:	a1 09       	sbc	r26, r1
     a5c:	b1 09       	sbc	r27, r1
     a5e:	51 cf       	rjmp	.-350    	; 0x902 <SCSI_DecodeSCSICommand+0x15e>
			serialWriteArray(testunitmsg, 19);
     a60:	63 e1       	ldi	r22, 0x13	; 19
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	81 ea       	ldi	r24, 0xA1	; 161
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	8f cf       	rjmp	.-226    	; 0x988 <SCSI_DecodeSCSICommand+0x1e4>
			serialWriteArray(preventallowmediumremovalmsg, 31);
     a6a:	6f e1       	ldi	r22, 0x1F	; 31
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	82 e8       	ldi	r24, 0x82	; 130
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	8a cf       	rjmp	.-236    	; 0x988 <SCSI_DecodeSCSICommand+0x1e4>

00000a74 <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
     a74:	8e bd       	out	0x2e, r24	; 46
     a76:	0d b4       	in	r0, 0x2d	; 45
     a78:	07 fe       	sbrs	r0, 7
     a7a:	fd cf       	rjmp	.-6      	; 0xa76 <sd_raw_send_byte+0x2>
     a7c:	8d b5       	in	r24, 0x2d	; 45
     a7e:	8f 77       	andi	r24, 0x7F	; 127
     a80:	8d bd       	out	0x2d, r24	; 45
     a82:	08 95       	ret

00000a84 <sd_raw_rec_byte>:
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	8e bd       	out	0x2e, r24	; 46
     a88:	0d b4       	in	r0, 0x2d	; 45
     a8a:	07 fe       	sbrs	r0, 7
     a8c:	fd cf       	rjmp	.-6      	; 0xa88 <sd_raw_rec_byte+0x4>
     a8e:	8d b5       	in	r24, 0x2d	; 45
     a90:	8f 77       	andi	r24, 0x7F	; 127
     a92:	8d bd       	out	0x2d, r24	; 45
     a94:	8e b5       	in	r24, 0x2e	; 46
     a96:	08 95       	ret

00000a98 <sd_raw_send_command>:
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	c8 2f       	mov	r28, r24
     aa4:	d4 2f       	mov	r29, r20
     aa6:	15 2f       	mov	r17, r21
     aa8:	06 2f       	mov	r16, r22
     aaa:	f7 2e       	mov	r15, r23
     aac:	eb df       	rcall	.-42     	; 0xa84 <sd_raw_rec_byte>
     aae:	8c 2f       	mov	r24, r28
     ab0:	80 64       	ori	r24, 0x40	; 64
     ab2:	e0 df       	rcall	.-64     	; 0xa74 <sd_raw_send_byte>
     ab4:	8f 2d       	mov	r24, r15
     ab6:	de df       	rcall	.-68     	; 0xa74 <sd_raw_send_byte>
     ab8:	80 2f       	mov	r24, r16
     aba:	dc df       	rcall	.-72     	; 0xa74 <sd_raw_send_byte>
     abc:	81 2f       	mov	r24, r17
     abe:	da df       	rcall	.-76     	; 0xa74 <sd_raw_send_byte>
     ac0:	8d 2f       	mov	r24, r29
     ac2:	d8 df       	rcall	.-80     	; 0xa74 <sd_raw_send_byte>
     ac4:	cc 23       	and	r28, r28
     ac6:	21 f0       	breq	.+8      	; 0xad0 <sd_raw_send_command+0x38>
     ac8:	c8 30       	cpi	r28, 0x08	; 8
     aca:	81 f0       	breq	.+32     	; 0xaec <sd_raw_send_command+0x54>
     acc:	8f ef       	ldi	r24, 0xFF	; 255
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <sd_raw_send_command+0x3a>
     ad0:	85 e9       	ldi	r24, 0x95	; 149
     ad2:	d0 df       	rcall	.-96     	; 0xa74 <sd_raw_send_byte>
     ad4:	ca e0       	ldi	r28, 0x0A	; 10
     ad6:	d6 df       	rcall	.-84     	; 0xa84 <sd_raw_rec_byte>
     ad8:	8f 3f       	cpi	r24, 0xFF	; 255
     ada:	11 f4       	brne	.+4      	; 0xae0 <sd_raw_send_command+0x48>
     adc:	c1 50       	subi	r28, 0x01	; 1
     ade:	d9 f7       	brne	.-10     	; 0xad6 <sd_raw_send_command+0x3e>
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	1f 91       	pop	r17
     ae6:	0f 91       	pop	r16
     ae8:	ff 90       	pop	r15
     aea:	08 95       	ret
     aec:	87 e8       	ldi	r24, 0x87	; 135
     aee:	f1 cf       	rjmp	.-30     	; 0xad2 <sd_raw_send_command+0x3a>

00000af0 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
     af0:	2f 92       	push	r2
     af2:	3f 92       	push	r3
     af4:	4f 92       	push	r4
     af6:	5f 92       	push	r5
     af8:	6f 92       	push	r6
     afa:	7f 92       	push	r7
     afc:	8f 92       	push	r8
     afe:	9f 92       	push	r9
     b00:	af 92       	push	r10
     b02:	bf 92       	push	r11
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	60 97       	sbiw	r28, 0x10	; 16
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	de bf       	out	0x3e, r29	; 62
     b20:	0f be       	out	0x3f, r0	; 63
     b22:	cd bf       	out	0x3d, r28	; 61
     b24:	29 83       	std	Y+1, r18	; 0x01
     b26:	3a 83       	std	Y+2, r19	; 0x02
     b28:	4b 83       	std	Y+3, r20	; 0x03
     b2a:	5c 83       	std	Y+4, r21	; 0x04
     b2c:	6d 83       	std	Y+5, r22	; 0x05
     b2e:	7e 83       	std	Y+6, r23	; 0x06
     b30:	8f 83       	std	Y+7, r24	; 0x07
     b32:	98 87       	std	Y+8, r25	; 0x08
     b34:	1a 87       	std	Y+10, r17	; 0x0a
     b36:	09 87       	std	Y+9, r16	; 0x09
     b38:	fc 86       	std	Y+12, r15	; 0x0c
     b3a:	eb 86       	std	Y+11, r14	; 0x0b
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
     b3c:	2b 85       	ldd	r18, Y+11	; 0x0b
     b3e:	3c 85       	ldd	r19, Y+12	; 0x0c
     b40:	23 2b       	or	r18, r19
     b42:	11 f4       	brne	.+4      	; 0xb48 <__stack+0x49>

        length -= read_length;
        offset += read_length;
    }

    return 1;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	54 c0       	rjmp	.+168    	; 0xbf0 <__stack+0xf1>
        block_offset = offset & 0x01ff;
     b48:	29 81       	ldd	r18, Y+1	; 0x01
     b4a:	3a 81       	ldd	r19, Y+2	; 0x02
     b4c:	31 70       	andi	r19, 0x01	; 1
     b4e:	3e 87       	std	Y+14, r19	; 0x0e
     b50:	2d 87       	std	Y+13, r18	; 0x0d
        block_address = offset - block_offset;
     b52:	19 01       	movw	r2, r18
     b54:	29 81       	ldd	r18, Y+1	; 0x01
     b56:	3a 81       	ldd	r19, Y+2	; 0x02
     b58:	4b 81       	ldd	r20, Y+3	; 0x03
     b5a:	5c 81       	ldd	r21, Y+4	; 0x04
     b5c:	6d 81       	ldd	r22, Y+5	; 0x05
     b5e:	7e 81       	ldd	r23, Y+6	; 0x06
     b60:	8f 81       	ldd	r24, Y+7	; 0x07
     b62:	98 85       	ldd	r25, Y+8	; 0x08
     b64:	51 01       	movw	r10, r2
     b66:	c1 2c       	mov	r12, r1
     b68:	d1 2c       	mov	r13, r1
     b6a:	e1 2c       	mov	r14, r1
     b6c:	f1 2c       	mov	r15, r1
     b6e:	00 e0       	ldi	r16, 0x00	; 0
     b70:	10 e0       	ldi	r17, 0x00	; 0
     b72:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__subdi3>
     b76:	39 01       	movw	r6, r18
     b78:	4a 01       	movw	r8, r20
     b7a:	1b 01       	movw	r2, r22
     b7c:	2c 01       	movw	r4, r24
        read_length = 512 - block_offset; /* read up to block border */
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	ed 85       	ldd	r30, Y+13	; 0x0d
     b84:	fe 85       	ldd	r31, Y+14	; 0x0e
     b86:	8e 1b       	sub	r24, r30
     b88:	9f 0b       	sbc	r25, r31
     b8a:	2b 85       	ldd	r18, Y+11	; 0x0b
     b8c:	3c 85       	ldd	r19, Y+12	; 0x0c
     b8e:	38 8b       	std	Y+16, r19	; 0x10
     b90:	2f 87       	std	Y+15, r18	; 0x0f
     b92:	82 17       	cp	r24, r18
     b94:	93 07       	cpc	r25, r19
     b96:	10 f4       	brcc	.+4      	; 0xb9c <__stack+0x9d>
     b98:	98 8b       	std	Y+16, r25	; 0x10
     b9a:	8f 87       	std	Y+15, r24	; 0x0f
        if(block_address != raw_block_address)
     b9c:	a0 90 78 02 	lds	r10, 0x0278	; 0x800278 <raw_block_address>
     ba0:	b0 90 79 02 	lds	r11, 0x0279	; 0x800279 <raw_block_address+0x1>
     ba4:	c0 90 7a 02 	lds	r12, 0x027A	; 0x80027a <raw_block_address+0x2>
     ba8:	d0 90 7b 02 	lds	r13, 0x027B	; 0x80027b <raw_block_address+0x3>
     bac:	e0 90 7c 02 	lds	r14, 0x027C	; 0x80027c <raw_block_address+0x4>
     bb0:	f0 90 7d 02 	lds	r15, 0x027D	; 0x80027d <raw_block_address+0x5>
     bb4:	00 91 7e 02 	lds	r16, 0x027E	; 0x80027e <raw_block_address+0x6>
     bb8:	10 91 7f 02 	lds	r17, 0x027F	; 0x80027f <raw_block_address+0x7>
     bbc:	93 01       	movw	r18, r6
     bbe:	a4 01       	movw	r20, r8
     bc0:	b1 01       	movw	r22, r2
     bc2:	c2 01       	movw	r24, r4
     bc4:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__cmpdi2>
     bc8:	09 f4       	brne	.+2      	; 0xbcc <__stack+0xcd>
     bca:	83 c0       	rjmp	.+262    	; 0xcd2 <__stack+0x1d3>
            select_card();
     bcc:	28 98       	cbi	0x05, 0	; 5
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
     bce:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <sd_raw_card_type>
     bd2:	82 ff       	sbrs	r24, 2
     bd4:	26 c0       	rjmp	.+76     	; 0xc22 <__stack+0x123>
     bd6:	84 2d       	mov	r24, r4
     bd8:	09 e0       	ldi	r16, 0x09	; 9
     bda:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__lshrdi3>
     bde:	ba 01       	movw	r22, r20
     be0:	42 2f       	mov	r20, r18
     be2:	53 2f       	mov	r21, r19
     be4:	81 e1       	ldi	r24, 0x11	; 17
     be6:	58 df       	rcall	.-336    	; 0xa98 <sd_raw_send_command>
     be8:	88 23       	and	r24, r24
     bea:	f1 f0       	breq	.+60     	; 0xc28 <__stack+0x129>
                unselect_card();
     bec:	28 9a       	sbi	0x05, 0	; 5
                return 0;
     bee:	80 e0       	ldi	r24, 0x00	; 0
}
     bf0:	60 96       	adiw	r28, 0x10	; 16
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	df 91       	pop	r29
     bfe:	cf 91       	pop	r28
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	cf 90       	pop	r12
     c0c:	bf 90       	pop	r11
     c0e:	af 90       	pop	r10
     c10:	9f 90       	pop	r9
     c12:	8f 90       	pop	r8
     c14:	7f 90       	pop	r7
     c16:	6f 90       	pop	r6
     c18:	5f 90       	pop	r5
     c1a:	4f 90       	pop	r4
     c1c:	3f 90       	pop	r3
     c1e:	2f 90       	pop	r2
     c20:	08 95       	ret
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
     c22:	a3 01       	movw	r20, r6
     c24:	b4 01       	movw	r22, r8
     c26:	de cf       	rjmp	.-68     	; 0xbe4 <__stack+0xe5>
            while(sd_raw_rec_byte() != 0xfe);
     c28:	2d df       	rcall	.-422    	; 0xa84 <sd_raw_rec_byte>
     c2a:	8e 3f       	cpi	r24, 0xFE	; 254
     c2c:	e9 f7       	brne	.-6      	; 0xc28 <__stack+0x129>
     c2e:	00 e8       	ldi	r16, 0x80	; 128
     c30:	12 e0       	ldi	r17, 0x02	; 2
                *cache++ = sd_raw_rec_byte();
     c32:	28 df       	rcall	.-432    	; 0xa84 <sd_raw_rec_byte>
     c34:	f8 01       	movw	r30, r16
     c36:	81 93       	st	Z+, r24
     c38:	8f 01       	movw	r16, r30
            for(uint16_t i = 0; i < 512; ++i)
     c3a:	f4 e0       	ldi	r31, 0x04	; 4
     c3c:	00 38       	cpi	r16, 0x80	; 128
     c3e:	1f 07       	cpc	r17, r31
     c40:	c1 f7       	brne	.-16     	; 0xc32 <__stack+0x133>
            raw_block_address = block_address;
     c42:	60 92 78 02 	sts	0x0278, r6	; 0x800278 <raw_block_address>
     c46:	70 92 79 02 	sts	0x0279, r7	; 0x800279 <raw_block_address+0x1>
     c4a:	80 92 7a 02 	sts	0x027A, r8	; 0x80027a <raw_block_address+0x2>
     c4e:	90 92 7b 02 	sts	0x027B, r9	; 0x80027b <raw_block_address+0x3>
     c52:	20 92 7c 02 	sts	0x027C, r2	; 0x80027c <raw_block_address+0x4>
     c56:	30 92 7d 02 	sts	0x027D, r3	; 0x80027d <raw_block_address+0x5>
     c5a:	40 92 7e 02 	sts	0x027E, r4	; 0x80027e <raw_block_address+0x6>
     c5e:	50 92 7f 02 	sts	0x027F, r5	; 0x80027f <raw_block_address+0x7>
            memcpy(buffer, raw_block + block_offset, read_length);
     c62:	6d 85       	ldd	r22, Y+13	; 0x0d
     c64:	7e 85       	ldd	r23, Y+14	; 0x0e
     c66:	60 58       	subi	r22, 0x80	; 128
     c68:	7d 4f       	sbci	r23, 0xFD	; 253
     c6a:	4f 85       	ldd	r20, Y+15	; 0x0f
     c6c:	58 89       	ldd	r21, Y+16	; 0x10
     c6e:	89 85       	ldd	r24, Y+9	; 0x09
     c70:	9a 85       	ldd	r25, Y+10	; 0x0a
     c72:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <memcpy>
            buffer += read_length;
     c76:	29 85       	ldd	r18, Y+9	; 0x09
     c78:	3a 85       	ldd	r19, Y+10	; 0x0a
     c7a:	8f 85       	ldd	r24, Y+15	; 0x0f
     c7c:	98 89       	ldd	r25, Y+16	; 0x10
     c7e:	28 0f       	add	r18, r24
     c80:	39 1f       	adc	r19, r25
     c82:	3a 87       	std	Y+10, r19	; 0x0a
     c84:	29 87       	std	Y+9, r18	; 0x09
            sd_raw_rec_byte();
     c86:	fe de       	rcall	.-516    	; 0xa84 <sd_raw_rec_byte>
            sd_raw_rec_byte();
     c88:	fd de       	rcall	.-518    	; 0xa84 <sd_raw_rec_byte>
            unselect_card();
     c8a:	28 9a       	sbi	0x05, 0	; 5
            sd_raw_rec_byte();
     c8c:	fb de       	rcall	.-522    	; 0xa84 <sd_raw_rec_byte>
        length -= read_length;
     c8e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c90:	9c 85       	ldd	r25, Y+12	; 0x0c
     c92:	ef 85       	ldd	r30, Y+15	; 0x0f
     c94:	f8 89       	ldd	r31, Y+16	; 0x10
     c96:	8e 1b       	sub	r24, r30
     c98:	9f 0b       	sbc	r25, r31
     c9a:	9c 87       	std	Y+12, r25	; 0x0c
     c9c:	8b 87       	std	Y+11, r24	; 0x0b
        offset += read_length;
     c9e:	9f 01       	movw	r18, r30
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	a9 80       	ldd	r10, Y+1	; 0x01
     cae:	ba 80       	ldd	r11, Y+2	; 0x02
     cb0:	cb 80       	ldd	r12, Y+3	; 0x03
     cb2:	dc 80       	ldd	r13, Y+4	; 0x04
     cb4:	ed 80       	ldd	r14, Y+5	; 0x05
     cb6:	fe 80       	ldd	r15, Y+6	; 0x06
     cb8:	0f 81       	ldd	r16, Y+7	; 0x07
     cba:	18 85       	ldd	r17, Y+8	; 0x08
     cbc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <__adddi3>
     cc0:	29 83       	std	Y+1, r18	; 0x01
     cc2:	3a 83       	std	Y+2, r19	; 0x02
     cc4:	4b 83       	std	Y+3, r20	; 0x03
     cc6:	5c 83       	std	Y+4, r21	; 0x04
     cc8:	6d 83       	std	Y+5, r22	; 0x05
     cca:	7e 83       	std	Y+6, r23	; 0x06
     ccc:	8f 83       	std	Y+7, r24	; 0x07
     cce:	98 87       	std	Y+8, r25	; 0x08
     cd0:	35 cf       	rjmp	.-406    	; 0xb3c <__stack+0x3d>
            memcpy(buffer, raw_block + block_offset, read_length);
     cd2:	6d 85       	ldd	r22, Y+13	; 0x0d
     cd4:	7e 85       	ldd	r23, Y+14	; 0x0e
     cd6:	60 58       	subi	r22, 0x80	; 128
     cd8:	7d 4f       	sbci	r23, 0xFD	; 253
     cda:	4f 85       	ldd	r20, Y+15	; 0x0f
     cdc:	58 89       	ldd	r21, Y+16	; 0x10
     cde:	89 85       	ldd	r24, Y+9	; 0x09
     ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce2:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <memcpy>
            buffer += read_length;
     ce6:	e9 85       	ldd	r30, Y+9	; 0x09
     ce8:	fa 85       	ldd	r31, Y+10	; 0x0a
     cea:	2f 85       	ldd	r18, Y+15	; 0x0f
     cec:	38 89       	ldd	r19, Y+16	; 0x10
     cee:	e2 0f       	add	r30, r18
     cf0:	f3 1f       	adc	r31, r19
     cf2:	fa 87       	std	Y+10, r31	; 0x0a
     cf4:	e9 87       	std	Y+9, r30	; 0x09
     cf6:	cb cf       	rjmp	.-106    	; 0xc8e <__stack+0x18f>

00000cf8 <sd_raw_init>:
{
     cf8:	cf 92       	push	r12
     cfa:	df 92       	push	r13
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
    configure_pin_mosi();
     d08:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_sck();
     d0a:	21 9a       	sbi	0x04, 1	; 4
    configure_pin_ss();
     d0c:	24 9a       	sbi	0x04, 4	; 4
    configure_pin_miso();
     d0e:	23 98       	cbi	0x04, 3	; 4
    unselect_card();
     d10:	28 9a       	sbi	0x05, 0	; 5
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
     d12:	83 e5       	ldi	r24, 0x53	; 83
     d14:	8c bd       	out	0x2c, r24	; 44
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
     d16:	8d b5       	in	r24, 0x2d	; 45
     d18:	8e 7f       	andi	r24, 0xFE	; 254
     d1a:	8d bd       	out	0x2d, r24	; 45
    sd_raw_card_type = 0;
     d1c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <sd_raw_card_type>
     d20:	ca e0       	ldi	r28, 0x0A	; 10
        sd_raw_rec_byte();
     d22:	b0 de       	rcall	.-672    	; 0xa84 <sd_raw_rec_byte>
     d24:	c1 50       	subi	r28, 0x01	; 1
    for(uint8_t i = 0; i < 10; ++i)
     d26:	e9 f7       	brne	.-6      	; 0xd22 <sd_raw_init+0x2a>
    select_card();
     d28:	28 98       	cbi	0x05, 0	; 5
     d2a:	c0 e0       	ldi	r28, 0x00	; 0
     d2c:	d2 e0       	ldi	r29, 0x02	; 2
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	ba 01       	movw	r22, r20
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	b0 de       	rcall	.-672    	; 0xa98 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
     d38:	81 30       	cpi	r24, 0x01	; 1
     d3a:	21 f0       	breq	.+8      	; 0xd44 <sd_raw_init+0x4c>
     d3c:	21 97       	sbiw	r28, 0x01	; 1
        if(i == 0x1ff)
     d3e:	b9 f7       	brne	.-18     	; 0xd2e <sd_raw_init+0x36>
            unselect_card();
     d40:	28 9a       	sbi	0x05, 0	; 5
     d42:	0d c0       	rjmp	.+26     	; 0xd5e <sd_raw_init+0x66>
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
     d44:	4a ea       	ldi	r20, 0xAA	; 170
     d46:	51 e0       	ldi	r21, 0x01	; 1
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	88 e0       	ldi	r24, 0x08	; 8
     d4e:	a4 de       	rcall	.-696    	; 0xa98 <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
     d50:	82 fd       	sbrc	r24, 2
     d52:	2b c0       	rjmp	.+86     	; 0xdaa <sd_raw_init+0xb2>
        sd_raw_rec_byte();
     d54:	97 de       	rcall	.-722    	; 0xa84 <sd_raw_rec_byte>
        sd_raw_rec_byte();
     d56:	96 de       	rcall	.-724    	; 0xa84 <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
     d58:	95 de       	rcall	.-726    	; 0xa84 <sd_raw_rec_byte>
     d5a:	80 fd       	sbrc	r24, 0
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <sd_raw_init+0x6a>
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	83 c0       	rjmp	.+262    	; 0xe68 <sd_raw_init+0x170>
        if(sd_raw_rec_byte() != 0xaa)
     d62:	90 de       	rcall	.-736    	; 0xa84 <sd_raw_rec_byte>
     d64:	8a 3a       	cpi	r24, 0xAA	; 170
     d66:	d9 f7       	brne	.-10     	; 0xd5e <sd_raw_init+0x66>
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
     d68:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <sd_raw_card_type>
     d6c:	82 60       	ori	r24, 0x02	; 2
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
     d6e:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <sd_raw_card_type>
    select_card();
     d72:	c0 e0       	ldi	r28, 0x00	; 0
     d74:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
     d76:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <sd_raw_card_type>
     d7a:	98 2f       	mov	r25, r24
     d7c:	93 70       	andi	r25, 0x03	; 3
     d7e:	49 f1       	breq	.+82     	; 0xdd2 <sd_raw_init+0xda>
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
     d80:	81 ff       	sbrs	r24, 1
     d82:	23 c0       	rjmp	.+70     	; 0xdca <sd_raw_init+0xd2>
                arg = 0x40000000;
     d84:	c1 2c       	mov	r12, r1
     d86:	d1 2c       	mov	r13, r1
     d88:	e1 2c       	mov	r14, r1
     d8a:	90 e4       	ldi	r25, 0x40	; 64
     d8c:	f9 2e       	mov	r15, r25
            sd_raw_send_command(CMD_APP, 0);
     d8e:	40 e0       	ldi	r20, 0x00	; 0
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	ba 01       	movw	r22, r20
     d94:	87 e3       	ldi	r24, 0x37	; 55
     d96:	80 de       	rcall	.-768    	; 0xa98 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
     d98:	b7 01       	movw	r22, r14
     d9a:	a6 01       	movw	r20, r12
     d9c:	89 e2       	ldi	r24, 0x29	; 41
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
     d9e:	7c de       	rcall	.-776    	; 0xa98 <sd_raw_send_command>
        if((response & (1 << R1_IDLE_STATE)) == 0)
     da0:	80 ff       	sbrs	r24, 0
     da2:	1c c0       	rjmp	.+56     	; 0xddc <sd_raw_init+0xe4>
     da4:	21 97       	sbiw	r28, 0x01	; 1
        if(i == 0x7fff)
     da6:	39 f7       	brne	.-50     	; 0xd76 <sd_raw_init+0x7e>
     da8:	cb cf       	rjmp	.-106    	; 0xd40 <sd_raw_init+0x48>
        sd_raw_send_command(CMD_APP, 0);
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	ba 01       	movw	r22, r20
     db0:	87 e3       	ldi	r24, 0x37	; 55
     db2:	72 de       	rcall	.-796    	; 0xa98 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	ba 01       	movw	r22, r20
     dba:	89 e2       	ldi	r24, 0x29	; 41
     dbc:	6d de       	rcall	.-806    	; 0xa98 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
     dbe:	82 fd       	sbrc	r24, 2
     dc0:	d8 cf       	rjmp	.-80     	; 0xd72 <sd_raw_init+0x7a>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
     dc2:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <sd_raw_card_type>
     dc6:	81 60       	ori	r24, 0x01	; 1
     dc8:	d2 cf       	rjmp	.-92     	; 0xd6e <sd_raw_init+0x76>
            uint32_t arg = 0;
     dca:	c1 2c       	mov	r12, r1
     dcc:	d1 2c       	mov	r13, r1
     dce:	76 01       	movw	r14, r12
     dd0:	de cf       	rjmp	.-68     	; 0xd8e <sd_raw_init+0x96>
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	50 e0       	ldi	r21, 0x00	; 0
     dd6:	ba 01       	movw	r22, r20
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	e1 cf       	rjmp	.-62     	; 0xd9e <sd_raw_init+0xa6>
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
     ddc:	c0 91 77 02 	lds	r28, 0x0277	; 0x800277 <sd_raw_card_type>
     de0:	c1 ff       	sbrs	r28, 1
     de2:	10 c0       	rjmp	.+32     	; 0xe04 <sd_raw_init+0x10c>
        if(sd_raw_send_command(CMD_READ_OCR, 0))
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	ba 01       	movw	r22, r20
     dea:	8a e3       	ldi	r24, 0x3A	; 58
     dec:	55 de       	rcall	.-854    	; 0xa98 <sd_raw_send_command>
     dee:	81 11       	cpse	r24, r1
     df0:	a7 cf       	rjmp	.-178    	; 0xd40 <sd_raw_init+0x48>
        if(sd_raw_rec_byte() & 0x40)
     df2:	48 de       	rcall	.-880    	; 0xa84 <sd_raw_rec_byte>
     df4:	86 ff       	sbrs	r24, 6
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <sd_raw_init+0x106>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
     df8:	c4 60       	ori	r28, 0x04	; 4
     dfa:	c0 93 77 02 	sts	0x0277, r28	; 0x800277 <sd_raw_card_type>
        sd_raw_rec_byte();
     dfe:	42 de       	rcall	.-892    	; 0xa84 <sd_raw_rec_byte>
        sd_raw_rec_byte();
     e00:	41 de       	rcall	.-894    	; 0xa84 <sd_raw_rec_byte>
        sd_raw_rec_byte();
     e02:	40 de       	rcall	.-896    	; 0xa84 <sd_raw_rec_byte>
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	52 e0       	ldi	r21, 0x02	; 2
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	80 e1       	ldi	r24, 0x10	; 16
     e0e:	44 de       	rcall	.-888    	; 0xa98 <sd_raw_send_command>
        unselect_card();
     e10:	28 9a       	sbi	0x05, 0	; 5
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
     e12:	81 11       	cpse	r24, r1
     e14:	a4 cf       	rjmp	.-184    	; 0xd5e <sd_raw_init+0x66>
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
     e16:	8c b5       	in	r24, 0x2c	; 44
     e18:	8c 7f       	andi	r24, 0xFC	; 252
     e1a:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
     e1c:	8d b5       	in	r24, 0x2d	; 45
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	8d bd       	out	0x2d, r24	; 45
    raw_block_address = (offset_t) -1;
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <raw_block_address>
     e28:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <raw_block_address+0x1>
     e2c:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <raw_block_address+0x2>
     e30:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <raw_block_address+0x3>
     e34:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <raw_block_address+0x4>
     e38:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <raw_block_address+0x5>
     e3c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <raw_block_address+0x6>
     e40:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <raw_block_address+0x7>
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
     e44:	e1 2c       	mov	r14, r1
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	f8 2e       	mov	r15, r24
     e4a:	00 e8       	ldi	r16, 0x80	; 128
     e4c:	12 e0       	ldi	r17, 0x02	; 2
     e4e:	20 e0       	ldi	r18, 0x00	; 0
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	48 de       	rcall	.-880    	; 0xaf0 <sd_raw_read>
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	88 23       	and	r24, r24
     e64:	09 f4       	brne	.+2      	; 0xe68 <sd_raw_init+0x170>
     e66:	7b cf       	rjmp	.-266    	; 0xd5e <sd_raw_init+0x66>
}
     e68:	89 2f       	mov	r24, r25
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	1f 91       	pop	r17
     e70:	0f 91       	pop	r16
     e72:	ff 90       	pop	r15
     e74:	ef 90       	pop	r14
     e76:	df 90       	pop	r13
     e78:	cf 90       	pop	r12
     e7a:	08 95       	ret

00000e7c <Endpoint_Null_Stream>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     e7c:	cf 92       	push	r12
     e7e:	df 92       	push	r13
     e80:	ff 92       	push	r15
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	ec 01       	movw	r28, r24
     e8c:	8b 01       	movw	r16, r22
     e8e:	e2 d1       	rcall	.+964    	; 0x1254 <Endpoint_WaitUntilReady>
     e90:	f8 2e       	mov	r15, r24
     e92:	81 11       	cpse	r24, r1
     e94:	21 c0       	rjmp	.+66     	; 0xed8 <Endpoint_Null_Stream+0x5c>
     e96:	01 15       	cp	r16, r1
     e98:	11 05       	cpc	r17, r1
     e9a:	29 f0       	breq	.+10     	; 0xea6 <Endpoint_Null_Stream+0x2a>
     e9c:	f8 01       	movw	r30, r16
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	c8 1b       	sub	r28, r24
     ea4:	d9 0b       	sbc	r29, r25
     ea6:	c1 2c       	mov	r12, r1
     ea8:	d1 2c       	mov	r13, r1
     eaa:	20 97       	sbiw	r28, 0x00	; 0
     eac:	a9 f0       	breq	.+42     	; 0xed8 <Endpoint_Null_Stream+0x5c>
     eae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eb2:	85 fd       	sbrc	r24, 5
     eb4:	1f c0       	rjmp	.+62     	; 0xef4 <Endpoint_Null_Stream+0x78>
     eb6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eba:	8e 77       	andi	r24, 0x7E	; 126
     ebc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ec0:	01 15       	cp	r16, r1
     ec2:	11 05       	cpc	r17, r1
     ec4:	91 f0       	breq	.+36     	; 0xeea <Endpoint_Null_Stream+0x6e>
     ec6:	f8 01       	movw	r30, r16
     ec8:	80 81       	ld	r24, Z
     eca:	91 81       	ldd	r25, Z+1	; 0x01
     ecc:	c8 0e       	add	r12, r24
     ece:	d9 1e       	adc	r13, r25
     ed0:	d1 82       	std	Z+1, r13	; 0x01
     ed2:	c0 82       	st	Z, r12
     ed4:	85 e0       	ldi	r24, 0x05	; 5
     ed6:	f8 2e       	mov	r15, r24
     ed8:	8f 2d       	mov	r24, r15
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	1f 91       	pop	r17
     ee0:	0f 91       	pop	r16
     ee2:	ff 90       	pop	r15
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	08 95       	ret
     eea:	b4 d1       	rcall	.+872    	; 0x1254 <Endpoint_WaitUntilReady>
     eec:	88 23       	and	r24, r24
     eee:	e9 f2       	breq	.-70     	; 0xeaa <Endpoint_Null_Stream+0x2e>
     ef0:	f8 2e       	mov	r15, r24
     ef2:	f2 cf       	rjmp	.-28     	; 0xed8 <Endpoint_Null_Stream+0x5c>
     ef4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     ef8:	21 97       	sbiw	r28, 0x01	; 1
     efa:	ff ef       	ldi	r31, 0xFF	; 255
     efc:	cf 1a       	sub	r12, r31
     efe:	df 0a       	sbc	r13, r31
     f00:	d4 cf       	rjmp	.-88     	; 0xeaa <Endpoint_Null_Stream+0x2e>

00000f02 <Endpoint_Write_Stream_LE>:
     f02:	af 92       	push	r10
     f04:	bf 92       	push	r11
     f06:	df 92       	push	r13
     f08:	ef 92       	push	r14
     f0a:	ff 92       	push	r15
     f0c:	0f 93       	push	r16
     f0e:	1f 93       	push	r17
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	ec 01       	movw	r28, r24
     f16:	8b 01       	movw	r16, r22
     f18:	7a 01       	movw	r14, r20
     f1a:	9c d1       	rcall	.+824    	; 0x1254 <Endpoint_WaitUntilReady>
     f1c:	d8 2e       	mov	r13, r24
     f1e:	81 11       	cpse	r24, r1
     f20:	24 c0       	rjmp	.+72     	; 0xf6a <Endpoint_Write_Stream_LE+0x68>
     f22:	e1 14       	cp	r14, r1
     f24:	f1 04       	cpc	r15, r1
     f26:	39 f0       	breq	.+14     	; 0xf36 <Endpoint_Write_Stream_LE+0x34>
     f28:	f7 01       	movw	r30, r14
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	08 1b       	sub	r16, r24
     f30:	19 0b       	sbc	r17, r25
     f32:	c8 0f       	add	r28, r24
     f34:	d9 1f       	adc	r29, r25
     f36:	a1 2c       	mov	r10, r1
     f38:	b1 2c       	mov	r11, r1
     f3a:	01 15       	cp	r16, r1
     f3c:	11 05       	cpc	r17, r1
     f3e:	a9 f0       	breq	.+42     	; 0xf6a <Endpoint_Write_Stream_LE+0x68>
     f40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f44:	85 fd       	sbrc	r24, 5
     f46:	21 c0       	rjmp	.+66     	; 0xf8a <Endpoint_Write_Stream_LE+0x88>
     f48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f4c:	8e 77       	andi	r24, 0x7E	; 126
     f4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f52:	e1 14       	cp	r14, r1
     f54:	f1 04       	cpc	r15, r1
     f56:	a1 f0       	breq	.+40     	; 0xf80 <Endpoint_Write_Stream_LE+0x7e>
     f58:	f7 01       	movw	r30, r14
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	a8 0e       	add	r10, r24
     f60:	b9 1e       	adc	r11, r25
     f62:	b1 82       	std	Z+1, r11	; 0x01
     f64:	a0 82       	st	Z, r10
     f66:	85 e0       	ldi	r24, 0x05	; 5
     f68:	d8 2e       	mov	r13, r24
     f6a:	8d 2d       	mov	r24, r13
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	08 95       	ret
     f80:	69 d1       	rcall	.+722    	; 0x1254 <Endpoint_WaitUntilReady>
     f82:	88 23       	and	r24, r24
     f84:	d1 f2       	breq	.-76     	; 0xf3a <Endpoint_Write_Stream_LE+0x38>
     f86:	d8 2e       	mov	r13, r24
     f88:	f0 cf       	rjmp	.-32     	; 0xf6a <Endpoint_Write_Stream_LE+0x68>
     f8a:	89 91       	ld	r24, Y+
     f8c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     f90:	01 50       	subi	r16, 0x01	; 1
     f92:	11 09       	sbc	r17, r1
     f94:	ff ef       	ldi	r31, 0xFF	; 255
     f96:	af 1a       	sub	r10, r31
     f98:	bf 0a       	sbc	r11, r31
     f9a:	cf cf       	rjmp	.-98     	; 0xf3a <Endpoint_Write_Stream_LE+0x38>

00000f9c <Endpoint_Read_Stream_LE>:
     f9c:	af 92       	push	r10
     f9e:	bf 92       	push	r11
     fa0:	df 92       	push	r13
     fa2:	ef 92       	push	r14
     fa4:	ff 92       	push	r15
     fa6:	0f 93       	push	r16
     fa8:	1f 93       	push	r17
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	ec 01       	movw	r28, r24
     fb0:	8b 01       	movw	r16, r22
     fb2:	7a 01       	movw	r14, r20
     fb4:	4f d1       	rcall	.+670    	; 0x1254 <Endpoint_WaitUntilReady>
     fb6:	d8 2e       	mov	r13, r24
     fb8:	81 11       	cpse	r24, r1
     fba:	24 c0       	rjmp	.+72     	; 0x1004 <Endpoint_Read_Stream_LE+0x68>
     fbc:	e1 14       	cp	r14, r1
     fbe:	f1 04       	cpc	r15, r1
     fc0:	39 f0       	breq	.+14     	; 0xfd0 <Endpoint_Read_Stream_LE+0x34>
     fc2:	f7 01       	movw	r30, r14
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	08 1b       	sub	r16, r24
     fca:	19 0b       	sbc	r17, r25
     fcc:	c8 0f       	add	r28, r24
     fce:	d9 1f       	adc	r29, r25
     fd0:	a1 2c       	mov	r10, r1
     fd2:	b1 2c       	mov	r11, r1
     fd4:	01 15       	cp	r16, r1
     fd6:	11 05       	cpc	r17, r1
     fd8:	a9 f0       	breq	.+42     	; 0x1004 <Endpoint_Read_Stream_LE+0x68>
     fda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fde:	85 fd       	sbrc	r24, 5
     fe0:	21 c0       	rjmp	.+66     	; 0x1024 <Endpoint_Read_Stream_LE+0x88>
     fe2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fe6:	8b 77       	andi	r24, 0x7B	; 123
     fe8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fec:	e1 14       	cp	r14, r1
     fee:	f1 04       	cpc	r15, r1
     ff0:	a1 f0       	breq	.+40     	; 0x101a <Endpoint_Read_Stream_LE+0x7e>
     ff2:	f7 01       	movw	r30, r14
     ff4:	80 81       	ld	r24, Z
     ff6:	91 81       	ldd	r25, Z+1	; 0x01
     ff8:	a8 0e       	add	r10, r24
     ffa:	b9 1e       	adc	r11, r25
     ffc:	b1 82       	std	Z+1, r11	; 0x01
     ffe:	a0 82       	st	Z, r10
    1000:	85 e0       	ldi	r24, 0x05	; 5
    1002:	d8 2e       	mov	r13, r24
    1004:	8d 2d       	mov	r24, r13
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	df 90       	pop	r13
    1014:	bf 90       	pop	r11
    1016:	af 90       	pop	r10
    1018:	08 95       	ret
    101a:	1c d1       	rcall	.+568    	; 0x1254 <Endpoint_WaitUntilReady>
    101c:	88 23       	and	r24, r24
    101e:	d1 f2       	breq	.-76     	; 0xfd4 <Endpoint_Read_Stream_LE+0x38>
    1020:	d8 2e       	mov	r13, r24
    1022:	f0 cf       	rjmp	.-32     	; 0x1004 <Endpoint_Read_Stream_LE+0x68>
    1024:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1028:	89 93       	st	Y+, r24
    102a:	01 50       	subi	r16, 0x01	; 1
    102c:	11 09       	sbc	r17, r1
    102e:	ff ef       	ldi	r31, 0xFF	; 255
    1030:	af 1a       	sub	r10, r31
    1032:	bf 0a       	sbc	r11, r31
    1034:	cf cf       	rjmp	.-98     	; 0xfd4 <Endpoint_Read_Stream_LE+0x38>

00001036 <Endpoint_Write_Control_Stream_LE>:
    1036:	20 91 aa 04 	lds	r18, 0x04AA	; 0x8004aa <USB_ControlRequest+0x6>
    103a:	30 91 ab 04 	lds	r19, 0x04AB	; 0x8004ab <USB_ControlRequest+0x7>
    103e:	26 17       	cp	r18, r22
    1040:	37 07       	cpc	r19, r23
    1042:	a8 f0       	brcs	.+42     	; 0x106e <Endpoint_Write_Control_Stream_LE+0x38>
    1044:	61 15       	cp	r22, r1
    1046:	71 05       	cpc	r23, r1
    1048:	29 f4       	brne	.+10     	; 0x1054 <Endpoint_Write_Control_Stream_LE+0x1e>
    104a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    104e:	2e 77       	andi	r18, 0x7E	; 126
    1050:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1054:	fc 01       	movw	r30, r24
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	61 15       	cp	r22, r1
    105a:	71 05       	cpc	r23, r1
    105c:	51 f4       	brne	.+20     	; 0x1072 <Endpoint_Write_Control_Stream_LE+0x3c>
    105e:	21 11       	cpse	r18, r1
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <Endpoint_Write_Control_Stream_LE+0x3c>
    1062:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1066:	82 ff       	sbrs	r24, 2
    1068:	33 c0       	rjmp	.+102    	; 0x10d0 <Endpoint_Write_Control_Stream_LE+0x9a>
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	08 95       	ret
    106e:	b9 01       	movw	r22, r18
    1070:	f1 cf       	rjmp	.-30     	; 0x1054 <Endpoint_Write_Control_Stream_LE+0x1e>
    1072:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <USB_DeviceState>
    1076:	88 23       	and	r24, r24
    1078:	b9 f1       	breq	.+110    	; 0x10e8 <Endpoint_Write_Control_Stream_LE+0xb2>
    107a:	85 30       	cpi	r24, 0x05	; 5
    107c:	b9 f1       	breq	.+110    	; 0x10ec <Endpoint_Write_Control_Stream_LE+0xb6>
    107e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1082:	83 fd       	sbrc	r24, 3
    1084:	2f c0       	rjmp	.+94     	; 0x10e4 <Endpoint_Write_Control_Stream_LE+0xae>
    1086:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    108a:	82 fd       	sbrc	r24, 2
    108c:	ea cf       	rjmp	.-44     	; 0x1062 <Endpoint_Write_Control_Stream_LE+0x2c>
    108e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1092:	80 ff       	sbrs	r24, 0
    1094:	e1 cf       	rjmp	.-62     	; 0x1058 <Endpoint_Write_Control_Stream_LE+0x22>
    1096:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    109a:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	92 2b       	or	r25, r18
    10a2:	61 15       	cp	r22, r1
    10a4:	71 05       	cpc	r23, r1
    10a6:	19 f0       	breq	.+6      	; 0x10ae <Endpoint_Write_Control_Stream_LE+0x78>
    10a8:	88 30       	cpi	r24, 0x08	; 8
    10aa:	91 05       	cpc	r25, r1
    10ac:	50 f0       	brcs	.+20     	; 0x10c2 <Endpoint_Write_Control_Stream_LE+0x8c>
    10ae:	21 e0       	ldi	r18, 0x01	; 1
    10b0:	08 97       	sbiw	r24, 0x08	; 8
    10b2:	09 f0       	breq	.+2      	; 0x10b6 <Endpoint_Write_Control_Stream_LE+0x80>
    10b4:	20 e0       	ldi	r18, 0x00	; 0
    10b6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ba:	8e 77       	andi	r24, 0x7E	; 126
    10bc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10c0:	cb cf       	rjmp	.-106    	; 0x1058 <Endpoint_Write_Control_Stream_LE+0x22>
    10c2:	21 91       	ld	r18, Z+
    10c4:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    10c8:	61 50       	subi	r22, 0x01	; 1
    10ca:	71 09       	sbc	r23, r1
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	e9 cf       	rjmp	.-46     	; 0x10a2 <Endpoint_Write_Control_Stream_LE+0x6c>
    10d0:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <USB_DeviceState>
    10d4:	88 23       	and	r24, r24
    10d6:	41 f0       	breq	.+16     	; 0x10e8 <Endpoint_Write_Control_Stream_LE+0xb2>
    10d8:	85 30       	cpi	r24, 0x05	; 5
    10da:	41 f0       	breq	.+16     	; 0x10ec <Endpoint_Write_Control_Stream_LE+0xb6>
    10dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10e0:	83 ff       	sbrs	r24, 3
    10e2:	bf cf       	rjmp	.-130    	; 0x1062 <Endpoint_Write_Control_Stream_LE+0x2c>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	08 95       	ret
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	08 95       	ret
    10ec:	83 e0       	ldi	r24, 0x03	; 3
    10ee:	08 95       	ret

000010f0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    10f0:	20 91 aa 04 	lds	r18, 0x04AA	; 0x8004aa <USB_ControlRequest+0x6>
    10f4:	30 91 ab 04 	lds	r19, 0x04AB	; 0x8004ab <USB_ControlRequest+0x7>
    10f8:	26 17       	cp	r18, r22
    10fa:	37 07       	cpc	r19, r23
    10fc:	a8 f0       	brcs	.+42     	; 0x1128 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    10fe:	61 15       	cp	r22, r1
    1100:	71 05       	cpc	r23, r1
    1102:	29 f4       	brne	.+10     	; 0x110e <Endpoint_Write_Control_PStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1104:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1108:	2e 77       	andi	r18, 0x7E	; 126
    110a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    110e:	fc 01       	movw	r30, r24
    1110:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1112:	61 15       	cp	r22, r1
    1114:	71 05       	cpc	r23, r1
    1116:	51 f4       	brne	.+20     	; 0x112c <Endpoint_Write_Control_PStream_LE+0x3c>
    1118:	21 11       	cpse	r18, r1
    111a:	08 c0       	rjmp	.+16     	; 0x112c <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    111c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1120:	82 ff       	sbrs	r24, 2
    1122:	34 c0       	rjmp	.+104    	; 0x118c <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	08 95       	ret
    1128:	b9 01       	movw	r22, r18
    112a:	f1 cf       	rjmp	.-30     	; 0x110e <Endpoint_Write_Control_PStream_LE+0x1e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    112c:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1130:	88 23       	and	r24, r24
    1132:	c1 f1       	breq	.+112    	; 0x11a4 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1134:	85 30       	cpi	r24, 0x05	; 5
    1136:	c1 f1       	breq	.+112    	; 0x11a8 <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1138:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    113c:	83 fd       	sbrc	r24, 3
    113e:	30 c0       	rjmp	.+96     	; 0x11a0 <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1140:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    1144:	82 fd       	sbrc	r24, 2
    1146:	ea cf       	rjmp	.-44     	; 0x111c <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1148:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    114c:	80 ff       	sbrs	r24, 0
    114e:	e1 cf       	rjmp	.-62     	; 0x1112 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1150:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1154:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	92 2b       	or	r25, r18
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    115c:	61 15       	cp	r22, r1
    115e:	71 05       	cpc	r23, r1
    1160:	19 f0       	breq	.+6      	; 0x1168 <Endpoint_Write_Control_PStream_LE+0x78>
    1162:	88 30       	cpi	r24, 0x08	; 8
    1164:	91 05       	cpc	r25, r1
    1166:	50 f0       	brcs	.+20     	; 0x117c <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1168:	21 e0       	ldi	r18, 0x01	; 1
    116a:	08 97       	sbiw	r24, 0x08	; 8
    116c:	09 f0       	breq	.+2      	; 0x1170 <Endpoint_Write_Control_PStream_LE+0x80>
    116e:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1170:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1174:	8e 77       	andi	r24, 0x7E	; 126
    1176:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    117a:	cb cf       	rjmp	.-106    	; 0x1112 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    117c:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    117e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1182:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1184:	61 50       	subi	r22, 0x01	; 1
    1186:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	e8 cf       	rjmp	.-48     	; 0x115c <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    118c:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1190:	88 23       	and	r24, r24
    1192:	41 f0       	breq	.+16     	; 0x11a4 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1194:	85 30       	cpi	r24, 0x05	; 5
    1196:	41 f0       	breq	.+16     	; 0x11a8 <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1198:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    119c:	83 ff       	sbrs	r24, 3
    119e:	be cf       	rjmp	.-132    	; 0x111c <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
}
    11a2:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    11a4:	82 e0       	ldi	r24, 0x02	; 2
    11a6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	08 95       	ret

000011ac <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    11ac:	98 2f       	mov	r25, r24
    11ae:	97 30       	cpi	r25, 0x07	; 7
    11b0:	28 f0       	brcs	.+10     	; 0x11bc <Endpoint_ConfigureEndpoint_Prv+0x10>
    11b2:	8f 70       	andi	r24, 0x0F	; 15
    11b4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	08 95       	ret
    11bc:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11c0:	98 17       	cp	r25, r24
    11c2:	51 f0       	breq	.+20     	; 0x11d8 <Endpoint_ConfigureEndpoint_Prv+0x2c>
    11c4:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    11c8:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    11cc:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    11d0:	21 fd       	sbrc	r18, 1
    11d2:	06 c0       	rjmp	.+12     	; 0x11e0 <Endpoint_ConfigureEndpoint_Prv+0x34>
    11d4:	9f 5f       	subi	r25, 0xFF	; 255
    11d6:	eb cf       	rjmp	.-42     	; 0x11ae <Endpoint_ConfigureEndpoint_Prv+0x2>
    11d8:	24 2f       	mov	r18, r20
    11da:	76 2f       	mov	r23, r22
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	f8 cf       	rjmp	.-16     	; 0x11d0 <Endpoint_ConfigureEndpoint_Prv+0x24>
    11e0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11e4:	3e 7f       	andi	r19, 0xFE	; 254
    11e6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11ea:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    11ee:	3d 7f       	andi	r19, 0xFD	; 253
    11f0:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    11f4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11f8:	31 60       	ori	r19, 0x01	; 1
    11fa:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11fe:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1202:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1206:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    120a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    120e:	27 fd       	sbrc	r18, 7
    1210:	e1 cf       	rjmp	.-62     	; 0x11d4 <Endpoint_ConfigureEndpoint_Prv+0x28>
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	08 95       	ret

00001216 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1216:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <USB_ControlRequest>
    121a:	87 ff       	sbrs	r24, 7
    121c:	13 c0       	rjmp	.+38     	; 0x1244 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    121e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1222:	82 ff       	sbrs	r24, 2
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1226:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    122a:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    122c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1230:	04 c0       	rjmp	.+8      	; 0x123a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1232:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <USB_DeviceState>
    1236:	81 11       	cpse	r24, r1
    1238:	f2 cf       	rjmp	.-28     	; 0x121e <Endpoint_ClearStatusStage+0x8>
    123a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    123c:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <USB_DeviceState>
    1240:	88 23       	and	r24, r24
    1242:	d9 f3       	breq	.-10     	; 0x123a <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1244:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    1248:	80 ff       	sbrs	r24, 0
    124a:	f8 cf       	rjmp	.-16     	; 0x123c <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    124c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1250:	8e 77       	andi	r24, 0x7E	; 126
    1252:	ec cf       	rjmp	.-40     	; 0x122c <Endpoint_ClearStatusStage+0x16>

00001254 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1254:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1258:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    125c:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    125e:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1262:	90 fd       	sbrc	r25, 0
    1264:	20 c0       	rjmp	.+64     	; 0x12a6 <Endpoint_WaitUntilReady+0x52>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1266:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    126a:	92 fd       	sbrc	r25, 2
    126c:	20 c0       	rjmp	.+64     	; 0x12ae <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    126e:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1272:	99 23       	and	r25, r25
    1274:	91 f0       	breq	.+36     	; 0x129a <Endpoint_WaitUntilReady+0x46>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1276:	95 30       	cpi	r25, 0x05	; 5
    1278:	91 f0       	breq	.+36     	; 0x129e <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    127a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    127e:	95 fd       	sbrc	r25, 5
    1280:	10 c0       	rjmp	.+32     	; 0x12a2 <Endpoint_WaitUntilReady+0x4e>
    1282:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1286:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    128a:	42 17       	cp	r20, r18
    128c:	53 07       	cpc	r21, r19
    128e:	39 f3       	breq	.-50     	; 0x125e <Endpoint_WaitUntilReady+0xa>
    1290:	81 50       	subi	r24, 0x01	; 1
    1292:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1294:	21 f7       	brne	.-56     	; 0x125e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    129e:	83 e0       	ldi	r24, 0x03	; 3
    12a0:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	08 95       	ret
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12a6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
    12aa:	90 ff       	sbrs	r25, 0
    12ac:	e0 cf       	rjmp	.-64     	; 0x126e <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	08 95       	ret

000012b2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    12ba:	4b d0       	rcall	.+150    	; 0x1352 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    12bc:	52 d0       	rcall	.+164    	; 0x1362 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    12be:	c8 ed       	ldi	r28, 0xD8	; 216
    12c0:	d0 e0       	ldi	r29, 0x00	; 0
    12c2:	88 81       	ld	r24, Y
    12c4:	8f 77       	andi	r24, 0x7F	; 127
    12c6:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    12c8:	88 81       	ld	r24, Y
    12ca:	80 68       	ori	r24, 0x80	; 128
    12cc:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    12ce:	88 81       	ld	r24, Y
    12d0:	8f 7d       	andi	r24, 0xDF	; 223
    12d2:	88 83       	st	Y, r24
				PLLCSR = 0;
    12d4:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    12d6:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    12da:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    12de:	10 92 a1 04 	sts	0x04A1, r1	; 0x8004a1 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    12e2:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    12e6:	00 ee       	ldi	r16, 0xE0	; 224
    12e8:	10 e0       	ldi	r17, 0x00	; 0
    12ea:	f8 01       	movw	r30, r16
    12ec:	80 81       	ld	r24, Z
    12ee:	8b 7f       	andi	r24, 0xFB	; 251
    12f0:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    12f2:	88 81       	ld	r24, Y
    12f4:	81 60       	ori	r24, 0x01	; 1
    12f6:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    12f8:	42 e0       	ldi	r20, 0x02	; 2
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	56 df       	rcall	.-340    	; 0x11ac <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1300:	e1 ee       	ldi	r30, 0xE1	; 225
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	8e 7f       	andi	r24, 0xFE	; 254
    1308:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    130a:	e2 ee       	ldi	r30, 0xE2	; 226
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	81 60       	ori	r24, 0x01	; 1
    1312:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    1314:	80 81       	ld	r24, Z
    1316:	88 60       	ori	r24, 0x08	; 8
    1318:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    131a:	f8 01       	movw	r30, r16
    131c:	80 81       	ld	r24, Z
    131e:	8e 7f       	andi	r24, 0xFE	; 254
    1320:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    1322:	88 81       	ld	r24, Y
    1324:	80 61       	ori	r24, 0x10	; 16
    1326:	88 83       	st	Y, r24
}
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1332:	e8 ed       	ldi	r30, 0xD8	; 216
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	8f 7e       	andi	r24, 0xEF	; 239
    133a:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    133c:	e7 ed       	ldi	r30, 0xD7	; 215
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	81 60       	ori	r24, 0x01	; 1
    1344:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1346:	84 e0       	ldi	r24, 0x04	; 4
    1348:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <USB_IsInitialized>
	USB_ResetInterface();
    1350:	b0 cf       	rjmp	.-160    	; 0x12b2 <USB_ResetInterface>

00001352 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1352:	e8 ed       	ldi	r30, 0xD8	; 216
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	8e 7f       	andi	r24, 0xFE	; 254
    135a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    135c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1360:	08 95       	ret

00001362 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1362:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1366:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    136a:	08 95       	ret

0000136c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    136c:	1f 92       	push	r1
    136e:	0f 92       	push	r0
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	0f 92       	push	r0
    1374:	11 24       	eor	r1, r1
    1376:	2f 93       	push	r18
    1378:	3f 93       	push	r19
    137a:	4f 93       	push	r20
    137c:	5f 93       	push	r21
    137e:	6f 93       	push	r22
    1380:	7f 93       	push	r23
    1382:	8f 93       	push	r24
    1384:	9f 93       	push	r25
    1386:	af 93       	push	r26
    1388:	bf 93       	push	r27
    138a:	ef 93       	push	r30
    138c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    138e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1392:	82 ff       	sbrs	r24, 2
    1394:	0a c0       	rjmp	.+20     	; 0x13aa <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
    1396:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    139a:	82 ff       	sbrs	r24, 2
    139c:	06 c0       	rjmp	.+12     	; 0x13aa <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
    139e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    13a2:	8b 7f       	andi	r24, 0xFB	; 251
    13a4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    13a8:	41 d2       	rcall	.+1154   	; 0x182c <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    13aa:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    13ae:	80 ff       	sbrs	r24, 0
    13b0:	19 c0       	rjmp	.+50     	; 0x13e4 <__vector_10+0x78>
						return (USBCON & (1 << VBUSTE));
    13b2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    13b6:	80 ff       	sbrs	r24, 0
    13b8:	15 c0       	rjmp	.+42     	; 0x13e4 <__vector_10+0x78>
						USBINT &= ~(1 << VBUSTI);
    13ba:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    13be:	8e 7f       	andi	r24, 0xFE	; 254
    13c0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    13c4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    13c8:	80 ff       	sbrs	r24, 0
    13ca:	90 c0       	rjmp	.+288    	; 0x14ec <__vector_10+0x180>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13cc:	80 e1       	ldi	r24, 0x10	; 16
    13ce:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13d0:	82 e1       	ldi	r24, 0x12	; 18
    13d2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    13d4:	09 b4       	in	r0, 0x29	; 41
    13d6:	00 fe       	sbrs	r0, 0
    13d8:	fd cf       	rjmp	.-6      	; 0x13d4 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    13e0:	0e 94 1f 01 	call	0x23e	; 0x23e <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    13e4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    13e8:	80 ff       	sbrs	r24, 0
    13ea:	18 c0       	rjmp	.+48     	; 0x141c <__vector_10+0xb0>
						return (UDIEN  & (1 << SUSPE));
    13ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    13f0:	80 ff       	sbrs	r24, 0
    13f2:	14 c0       	rjmp	.+40     	; 0x141c <__vector_10+0xb0>
						UDIEN  &= ~(1 << SUSPE);
    13f4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    13f8:	8e 7f       	andi	r24, 0xFE	; 254
    13fa:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    13fe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1402:	80 61       	ori	r24, 0x10	; 16
    1404:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1408:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    140c:	80 62       	ori	r24, 0x20	; 32
    140e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    1412:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1414:	85 e0       	ldi	r24, 0x05	; 5
    1416:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    141a:	08 d2       	rcall	.+1040   	; 0x182c <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
    141c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1420:	84 ff       	sbrs	r24, 4
    1422:	28 c0       	rjmp	.+80     	; 0x1474 <__vector_10+0x108>
						return (UDIEN  & (1 << WAKEUPE));
    1424:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1428:	84 ff       	sbrs	r24, 4
    142a:	24 c0       	rjmp	.+72     	; 0x1474 <__vector_10+0x108>
				PLLCSR = USB_PLL_PSC;
    142c:	80 e1       	ldi	r24, 0x10	; 16
    142e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1430:	82 e1       	ldi	r24, 0x12	; 18
    1432:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1434:	09 b4       	in	r0, 0x29	; 41
    1436:	00 fe       	sbrs	r0, 0
    1438:	fd cf       	rjmp	.-6      	; 0x1434 <__vector_10+0xc8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    143a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    143e:	8f 7d       	andi	r24, 0xDF	; 223
    1440:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1444:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1448:	8f 7e       	andi	r24, 0xEF	; 239
    144a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    144e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1452:	8f 7e       	andi	r24, 0xEF	; 239
    1454:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1458:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1462:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <USB_Device_ConfigurationNumber>
    1466:	88 23       	and	r24, r24
    1468:	09 f4       	brne	.+2      	; 0x146c <__vector_10+0x100>
    146a:	46 c0       	rjmp	.+140    	; 0x14f8 <__vector_10+0x18c>
		  USB_DeviceState = DEVICE_STATE_Configured;
    146c:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    146e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1472:	dc d1       	rcall	.+952    	; 0x182c <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
    1474:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1478:	83 ff       	sbrs	r24, 3
    147a:	27 c0       	rjmp	.+78     	; 0x14ca <__vector_10+0x15e>
						return (UDIEN  & (1 << EORSTE));
    147c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1480:	83 ff       	sbrs	r24, 3
    1482:	23 c0       	rjmp	.+70     	; 0x14ca <__vector_10+0x15e>
						UDINT  &= ~(1 << EORSTI);
    1484:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1488:	87 7f       	andi	r24, 0xF7	; 247
    148a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1494:	10 92 9f 04 	sts	0x049F, r1	; 0x80049f <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1498:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    149c:	8e 7f       	andi	r24, 0xFE	; 254
    149e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    14a2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14a6:	8e 7f       	andi	r24, 0xFE	; 254
    14a8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    14ac:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14b0:	80 61       	ori	r24, 0x10	; 16
    14b2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    14b6:	42 e0       	ldi	r20, 0x02	; 2
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	77 de       	rcall	.-786    	; 0x11ac <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    14be:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    14c2:	88 60       	ori	r24, 0x08	; 8
    14c4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    14c8:	b1 d1       	rcall	.+866    	; 0x182c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    14ca:	ff 91       	pop	r31
    14cc:	ef 91       	pop	r30
    14ce:	bf 91       	pop	r27
    14d0:	af 91       	pop	r26
    14d2:	9f 91       	pop	r25
    14d4:	8f 91       	pop	r24
    14d6:	7f 91       	pop	r23
    14d8:	6f 91       	pop	r22
    14da:	5f 91       	pop	r21
    14dc:	4f 91       	pop	r20
    14de:	3f 91       	pop	r19
    14e0:	2f 91       	pop	r18
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	0f 90       	pop	r0
    14e8:	1f 90       	pop	r1
    14ea:	18 95       	reti
				PLLCSR = 0;
    14ec:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    14ee:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    14f2:	0e 94 24 01 	call	0x248	; 0x248 <EVENT_USB_Device_Disconnect>
    14f6:	76 cf       	rjmp	.-276    	; 0x13e4 <__vector_10+0x78>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    14f8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    14fc:	87 fd       	sbrc	r24, 7
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <__vector_10+0x198>
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	b5 cf       	rjmp	.-150    	; 0x146e <__vector_10+0x102>
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	b3 cf       	rjmp	.-154    	; 0x146e <__vector_10+0x102>

00001508 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1508:	1f 92       	push	r1
    150a:	0f 92       	push	r0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
    1512:	2f 93       	push	r18
    1514:	3f 93       	push	r19
    1516:	4f 93       	push	r20
    1518:	5f 93       	push	r21
    151a:	6f 93       	push	r22
    151c:	7f 93       	push	r23
    151e:	8f 93       	push	r24
    1520:	9f 93       	push	r25
    1522:	af 93       	push	r26
    1524:	bf 93       	push	r27
    1526:	cf 93       	push	r28
    1528:	ef 93       	push	r30
    152a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    152c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1530:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1532:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1536:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    153a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1544:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1546:	1b d0       	rcall	.+54     	; 0x157e <USB_Device_ProcessControlRequest>
    1548:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    154c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1550:	88 60       	ori	r24, 0x08	; 8
    1552:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1556:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	cf 91       	pop	r28
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	aa 97       	sbiw	r28, 0x2a	; 42
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61
    1594:	e4 ea       	ldi	r30, 0xA4	; 164
    1596:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1598:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    159c:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    159e:	24 e0       	ldi	r18, 0x04	; 4
    15a0:	ec 3a       	cpi	r30, 0xAC	; 172
    15a2:	f2 07       	cpc	r31, r18
    15a4:	c9 f7       	brne	.-14     	; 0x1598 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    15a6:	0e 94 39 01 	call	0x272	; 0x272 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    15aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    15ae:	83 ff       	sbrs	r24, 3
    15b0:	10 c0       	rjmp	.+32     	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    15b2:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    15b6:	90 91 a5 04 	lds	r25, 0x04A5	; 0x8004a5 <USB_ControlRequest+0x1>
    15ba:	95 30       	cpi	r25, 0x05	; 5
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <USB_Device_ProcessControlRequest+0x42>
    15be:	d2 c0       	rjmp	.+420    	; 0x1764 <USB_Device_ProcessControlRequest+0x1e6>
    15c0:	00 f5       	brcc	.+64     	; 0x1602 <USB_Device_ProcessControlRequest+0x84>
    15c2:	91 30       	cpi	r25, 0x01	; 1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <USB_Device_ProcessControlRequest+0x4a>
    15c6:	88 c0       	rjmp	.+272    	; 0x16d8 <USB_Device_ProcessControlRequest+0x15a>
    15c8:	08 f4       	brcc	.+2      	; 0x15cc <USB_Device_ProcessControlRequest+0x4e>
    15ca:	61 c0       	rjmp	.+194    	; 0x168e <USB_Device_ProcessControlRequest+0x110>
    15cc:	93 30       	cpi	r25, 0x03	; 3
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
    15d0:	83 c0       	rjmp	.+262    	; 0x16d8 <USB_Device_ProcessControlRequest+0x15a>
    15d2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    15d6:	83 ff       	sbrs	r24, 3
    15d8:	0a c0       	rjmp	.+20     	; 0x15ee <USB_Device_ProcessControlRequest+0x70>
				UEINTX &= ~(1 << RXSTPI);
    15da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15de:	87 7f       	andi	r24, 0xF7	; 247
    15e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    15e4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    15e8:	80 62       	ori	r24, 0x20	; 32
    15ea:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    15ee:	aa 96       	adiw	r28, 0x2a	; 42
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	df 91       	pop	r29
    15fc:	cf 91       	pop	r28
    15fe:	1f 91       	pop	r17
    1600:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
    1602:	98 30       	cpi	r25, 0x08	; 8
    1604:	09 f4       	brne	.+2      	; 0x1608 <USB_Device_ProcessControlRequest+0x8a>
    1606:	e6 c0       	rjmp	.+460    	; 0x17d4 <USB_Device_ProcessControlRequest+0x256>
    1608:	99 30       	cpi	r25, 0x09	; 9
    160a:	09 f4       	brne	.+2      	; 0x160e <USB_Device_ProcessControlRequest+0x90>
    160c:	f0 c0       	rjmp	.+480    	; 0x17ee <USB_Device_ProcessControlRequest+0x270>
    160e:	96 30       	cpi	r25, 0x06	; 6
    1610:	01 f7       	brne	.-64     	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1612:	80 58       	subi	r24, 0x80	; 128
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	e8 f6       	brcc	.-70     	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1618:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <USB_ControlRequest+0x2>
    161c:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <USB_ControlRequest+0x3>
    1620:	8c 3d       	cpi	r24, 0xDC	; 220
    1622:	23 e0       	ldi	r18, 0x03	; 3
    1624:	92 07       	cpc	r25, r18
    1626:	09 f0       	breq	.+2      	; 0x162a <USB_Device_ProcessControlRequest+0xac>
    1628:	c1 c0       	rjmp	.+386    	; 0x17ac <USB_Device_ProcessControlRequest+0x22e>
	SignatureDescriptor.Header.Type = DTYPE_String;
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    162e:	8a e2       	ldi	r24, 0x2A	; 42
    1630:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1632:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1634:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1636:	de 01       	movw	r26, r28
    1638:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    163a:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    163c:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    163e:	51 e2       	ldi	r21, 0x21	; 33
    1640:	e3 2f       	mov	r30, r19
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1648:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    164a:	20 ff       	sbrs	r18, 0
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <USB_Device_ProcessControlRequest+0xd6>
					{
						SerialByte >>= 4;
    164e:	e2 95       	swap	r30
    1650:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1652:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1654:	ef 70       	andi	r30, 0x0F	; 15
    1656:	8e 2f       	mov	r24, r30
    1658:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    165a:	ea 30       	cpi	r30, 0x0A	; 10
    165c:	08 f4       	brcc	.+2      	; 0x1660 <USB_Device_ProcessControlRequest+0xe2>
    165e:	a4 c0       	rjmp	.+328    	; 0x17a8 <USB_Device_ProcessControlRequest+0x22a>
    1660:	c7 96       	adiw	r24, 0x37	; 55
    1662:	8d 93       	st	X+, r24
    1664:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1666:	2f 5f       	subi	r18, 0xFF	; 255
    1668:	24 31       	cpi	r18, 0x14	; 20
    166a:	51 f7       	brne	.-44     	; 0x1640 <USB_Device_ProcessControlRequest+0xc2>
				SREG = GlobalIntState;
    166c:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    166e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1672:	87 7f       	andi	r24, 0xF7	; 247
    1674:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1678:	6a e2       	ldi	r22, 0x2A	; 42
    167a:	70 e0       	ldi	r23, 0x00	; 0
    167c:	ce 01       	movw	r24, r28
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	da dc       	rcall	.-1612   	; 0x1036 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1682:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1686:	8b 77       	andi	r24, 0x7B	; 123
    1688:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    168c:	a2 cf       	rjmp	.-188    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    168e:	80 38       	cpi	r24, 0x80	; 128
    1690:	81 f0       	breq	.+32     	; 0x16b2 <USB_Device_ProcessControlRequest+0x134>
    1692:	82 38       	cpi	r24, 0x82	; 130
    1694:	09 f0       	breq	.+2      	; 0x1698 <USB_Device_ProcessControlRequest+0x11a>
    1696:	9d cf       	rjmp	.-198    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1698:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <USB_ControlRequest+0x4>
    169c:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    169e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    16a2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    16a6:	85 fb       	bst	r24, 5
    16a8:	88 27       	eor	r24, r24
    16aa:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16ac:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    16b0:	06 c0       	rjmp	.+12     	; 0x16be <USB_Device_ProcessControlRequest+0x140>
	uint8_t CurrentStatus = 0;
    16b2:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    16b6:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <USB_Device_RemoteWakeupEnabled>
    16ba:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    16bc:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    16be:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16c2:	97 7f       	andi	r25, 0xF7	; 247
    16c4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    16c8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    16cc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16d4:	8e 77       	andi	r24, 0x7E	; 126
    16d6:	2f c0       	rjmp	.+94     	; 0x1736 <USB_Device_ProcessControlRequest+0x1b8>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16d8:	28 2f       	mov	r18, r24
    16da:	2d 7f       	andi	r18, 0xFD	; 253
    16dc:	09 f0       	breq	.+2      	; 0x16e0 <USB_Device_ProcessControlRequest+0x162>
    16de:	79 cf       	rjmp	.-270    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    16e0:	88 23       	and	r24, r24
    16e2:	d1 f0       	breq	.+52     	; 0x1718 <USB_Device_ProcessControlRequest+0x19a>
    16e4:	82 30       	cpi	r24, 0x02	; 2
    16e6:	09 f0       	breq	.+2      	; 0x16ea <USB_Device_ProcessControlRequest+0x16c>
    16e8:	74 cf       	rjmp	.-280    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    16ea:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <USB_ControlRequest+0x2>
    16ee:	81 11       	cpse	r24, r1
    16f0:	1d c0       	rjmp	.+58     	; 0x172c <USB_Device_ProcessControlRequest+0x1ae>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    16f2:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <USB_ControlRequest+0x4>
    16f6:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    16f8:	09 f4       	brne	.+2      	; 0x16fc <USB_Device_ProcessControlRequest+0x17e>
    16fa:	6b cf       	rjmp	.-298    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16fc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1700:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1704:	20 ff       	sbrs	r18, 0
    1706:	12 c0       	rjmp	.+36     	; 0x172c <USB_Device_ProcessControlRequest+0x1ae>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1708:	93 30       	cpi	r25, 0x03	; 3
    170a:	c9 f4       	brne	.+50     	; 0x173e <USB_Device_ProcessControlRequest+0x1c0>
				UECONX |= (1 << STALLRQ);
    170c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1710:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1712:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1716:	0a c0       	rjmp	.+20     	; 0x172c <USB_Device_ProcessControlRequest+0x1ae>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1718:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <USB_ControlRequest+0x2>
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	09 f0       	breq	.+2      	; 0x1722 <USB_Device_ProcessControlRequest+0x1a4>
    1720:	58 cf       	rjmp	.-336    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1722:	93 30       	cpi	r25, 0x03	; 3
    1724:	09 f0       	breq	.+2      	; 0x1728 <USB_Device_ProcessControlRequest+0x1aa>
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    172c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1730:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1734:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1736:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    173a:	6d dd       	rcall	.-1318   	; 0x1216 <Endpoint_ClearStatusStage>
    173c:	4a cf       	rjmp	.-364    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
				UECONX |= (1 << STALLRQC);
    173e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1742:	90 61       	ori	r25, 0x10	; 16
    1744:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1748:	21 e0       	ldi	r18, 0x01	; 1
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <USB_Device_ProcessControlRequest+0x1d2>
    174e:	22 0f       	add	r18, r18
    1750:	8a 95       	dec	r24
    1752:	ea f7       	brpl	.-6      	; 0x174e <USB_Device_ProcessControlRequest+0x1d0>
    1754:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1758:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    175c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1760:	88 60       	ori	r24, 0x08	; 8
    1762:	d7 cf       	rjmp	.-82     	; 0x1712 <USB_Device_ProcessControlRequest+0x194>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1764:	81 11       	cpse	r24, r1
    1766:	35 cf       	rjmp	.-406    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1768:	10 91 a6 04 	lds	r17, 0x04A6	; 0x8004a6 <USB_ControlRequest+0x2>
    176c:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    176e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1772:	80 78       	andi	r24, 0x80	; 128
    1774:	81 2b       	or	r24, r17
    1776:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    177a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    177e:	87 7f       	andi	r24, 0xF7	; 247
    1780:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1784:	48 dd       	rcall	.-1392   	; 0x1216 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1786:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    178a:	80 ff       	sbrs	r24, 0
    178c:	fc cf       	rjmp	.-8      	; 0x1786 <USB_Device_ProcessControlRequest+0x208>
				UDADDR |= (1 << ADDEN);
    178e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1792:	80 68       	ori	r24, 0x80	; 128
    1794:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1798:	11 11       	cpse	r17, r1
    179a:	04 c0       	rjmp	.+8      	; 0x17a4 <USB_Device_ProcessControlRequest+0x226>
    179c:	82 e0       	ldi	r24, 0x02	; 2
    179e:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <USB_DeviceState>
    17a2:	17 cf       	rjmp	.-466    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
    17a4:	83 e0       	ldi	r24, 0x03	; 3
    17a6:	fb cf       	rjmp	.-10     	; 0x179e <USB_Device_ProcessControlRequest+0x220>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    17a8:	c0 96       	adiw	r24, 0x30	; 48
    17aa:	5b cf       	rjmp	.-330    	; 0x1662 <USB_Device_ProcessControlRequest+0xe4>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    17ac:	ae 01       	movw	r20, r28
    17ae:	4f 5f       	subi	r20, 0xFF	; 255
    17b0:	5f 4f       	sbci	r21, 0xFF	; 255
    17b2:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <USB_ControlRequest+0x4>
    17b6:	0e 94 6e 02 	call	0x4dc	; 0x4dc <CALLBACK_USB_GetDescriptor>
    17ba:	bc 01       	movw	r22, r24
    17bc:	89 2b       	or	r24, r25
    17be:	09 f4       	brne	.+2      	; 0x17c2 <USB_Device_ProcessControlRequest+0x244>
    17c0:	08 cf       	rjmp	.-496    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    17c2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17c6:	97 7f       	andi	r25, 0xF7	; 247
    17c8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	9a 81       	ldd	r25, Y+2	; 0x02
    17d0:	8f dc       	rcall	.-1762   	; 0x10f0 <Endpoint_Write_Control_PStream_LE>
    17d2:	57 cf       	rjmp	.-338    	; 0x1682 <USB_Device_ProcessControlRequest+0x104>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    17d4:	80 38       	cpi	r24, 0x80	; 128
    17d6:	09 f0       	breq	.+2      	; 0x17da <USB_Device_ProcessControlRequest+0x25c>
    17d8:	fc ce       	rjmp	.-520    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
    17da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17de:	87 7f       	andi	r24, 0xF7	; 247
    17e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    17e4:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    17e8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17ec:	71 cf       	rjmp	.-286    	; 0x16d0 <USB_Device_ProcessControlRequest+0x152>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    17ee:	81 11       	cpse	r24, r1
    17f0:	f0 ce       	rjmp	.-544    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    17f2:	90 91 a6 04 	lds	r25, 0x04A6	; 0x8004a6 <USB_ControlRequest+0x2>
    17f6:	92 30       	cpi	r25, 0x02	; 2
    17f8:	08 f0       	brcs	.+2      	; 0x17fc <USB_Device_ProcessControlRequest+0x27e>
    17fa:	eb ce       	rjmp	.-554    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    17fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1800:	87 7f       	andi	r24, 0xF7	; 247
    1802:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1806:	90 93 9f 04 	sts	0x049F, r25	; 0x80049f <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    180a:	05 dd       	rcall	.-1526   	; 0x1216 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    180c:	80 91 9f 04 	lds	r24, 0x049F	; 0x80049f <USB_Device_ConfigurationNumber>
    1810:	88 23       	and	r24, r24
    1812:	11 f0       	breq	.+4      	; 0x1818 <USB_Device_ProcessControlRequest+0x29a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1814:	84 e0       	ldi	r24, 0x04	; 4
    1816:	05 c0       	rjmp	.+10     	; 0x1822 <USB_Device_ProcessControlRequest+0x2a4>
				return (UDADDR & (1 << ADDEN));
    1818:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    181c:	87 fd       	sbrc	r24, 7
    181e:	fa cf       	rjmp	.-12     	; 0x1814 <USB_Device_ProcessControlRequest+0x296>
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1826:	0e 94 26 01 	call	0x24c	; 0x24c <EVENT_USB_Device_ConfigurationChanged>
    182a:	d3 ce       	rjmp	.-602    	; 0x15d2 <USB_Device_ProcessControlRequest+0x54>

0000182c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    182c:	08 95       	ret

0000182e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    182e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1830:	80 91 a3 04 	lds	r24, 0x04A3	; 0x8004a3 <USB_DeviceState>
    1834:	88 23       	and	r24, r24
    1836:	91 f0       	breq	.+36     	; 0x185c <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1838:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    183c:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    183e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1842:	80 fd       	sbrc	r24, 0
    1844:	0d c0       	rjmp	.+26     	; 0x1860 <USB_USBTask+0x32>
    1846:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1848:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    184a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    184e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1852:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1854:	94 de       	rcall	.-728    	; 0x157e <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1856:	cf 70       	andi	r28, 0x0F	; 15
    1858:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    185c:	cf 91       	pop	r28
    185e:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1860:	80 e8       	ldi	r24, 0x80	; 128
    1862:	f2 cf       	rjmp	.-28     	; 0x1848 <USB_USBTask+0x1a>

00001864 <__fixunssfsi>:
    1864:	70 d0       	rcall	.+224    	; 0x1946 <__fp_splitA>
    1866:	88 f0       	brcs	.+34     	; 0x188a <__fixunssfsi+0x26>
    1868:	9f 57       	subi	r25, 0x7F	; 127
    186a:	90 f0       	brcs	.+36     	; 0x1890 <__fixunssfsi+0x2c>
    186c:	b9 2f       	mov	r27, r25
    186e:	99 27       	eor	r25, r25
    1870:	b7 51       	subi	r27, 0x17	; 23
    1872:	a0 f0       	brcs	.+40     	; 0x189c <__fixunssfsi+0x38>
    1874:	d1 f0       	breq	.+52     	; 0x18aa <__fixunssfsi+0x46>
    1876:	66 0f       	add	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	88 1f       	adc	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	1a f0       	brmi	.+6      	; 0x1886 <__fixunssfsi+0x22>
    1880:	ba 95       	dec	r27
    1882:	c9 f7       	brne	.-14     	; 0x1876 <__fixunssfsi+0x12>
    1884:	12 c0       	rjmp	.+36     	; 0x18aa <__fixunssfsi+0x46>
    1886:	b1 30       	cpi	r27, 0x01	; 1
    1888:	81 f0       	breq	.+32     	; 0x18aa <__fixunssfsi+0x46>
    188a:	77 d0       	rcall	.+238    	; 0x197a <__fp_zero>
    188c:	b1 e0       	ldi	r27, 0x01	; 1
    188e:	08 95       	ret
    1890:	74 c0       	rjmp	.+232    	; 0x197a <__fp_zero>
    1892:	67 2f       	mov	r22, r23
    1894:	78 2f       	mov	r23, r24
    1896:	88 27       	eor	r24, r24
    1898:	b8 5f       	subi	r27, 0xF8	; 248
    189a:	39 f0       	breq	.+14     	; 0x18aa <__fixunssfsi+0x46>
    189c:	b9 3f       	cpi	r27, 0xF9	; 249
    189e:	cc f3       	brlt	.-14     	; 0x1892 <__fixunssfsi+0x2e>
    18a0:	86 95       	lsr	r24
    18a2:	77 95       	ror	r23
    18a4:	67 95       	ror	r22
    18a6:	b3 95       	inc	r27
    18a8:	d9 f7       	brne	.-10     	; 0x18a0 <__fixunssfsi+0x3c>
    18aa:	3e f4       	brtc	.+14     	; 0x18ba <__fixunssfsi+0x56>
    18ac:	90 95       	com	r25
    18ae:	80 95       	com	r24
    18b0:	70 95       	com	r23
    18b2:	61 95       	neg	r22
    18b4:	7f 4f       	sbci	r23, 0xFF	; 255
    18b6:	8f 4f       	sbci	r24, 0xFF	; 255
    18b8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ba:	08 95       	ret

000018bc <__floatunsisf>:
    18bc:	e8 94       	clt
    18be:	09 c0       	rjmp	.+18     	; 0x18d2 <__floatsisf+0x12>

000018c0 <__floatsisf>:
    18c0:	97 fb       	bst	r25, 7
    18c2:	3e f4       	brtc	.+14     	; 0x18d2 <__floatsisf+0x12>
    18c4:	90 95       	com	r25
    18c6:	80 95       	com	r24
    18c8:	70 95       	com	r23
    18ca:	61 95       	neg	r22
    18cc:	7f 4f       	sbci	r23, 0xFF	; 255
    18ce:	8f 4f       	sbci	r24, 0xFF	; 255
    18d0:	9f 4f       	sbci	r25, 0xFF	; 255
    18d2:	99 23       	and	r25, r25
    18d4:	a9 f0       	breq	.+42     	; 0x1900 <__floatsisf+0x40>
    18d6:	f9 2f       	mov	r31, r25
    18d8:	96 e9       	ldi	r25, 0x96	; 150
    18da:	bb 27       	eor	r27, r27
    18dc:	93 95       	inc	r25
    18de:	f6 95       	lsr	r31
    18e0:	87 95       	ror	r24
    18e2:	77 95       	ror	r23
    18e4:	67 95       	ror	r22
    18e6:	b7 95       	ror	r27
    18e8:	f1 11       	cpse	r31, r1
    18ea:	f8 cf       	rjmp	.-16     	; 0x18dc <__floatsisf+0x1c>
    18ec:	fa f4       	brpl	.+62     	; 0x192c <__floatsisf+0x6c>
    18ee:	bb 0f       	add	r27, r27
    18f0:	11 f4       	brne	.+4      	; 0x18f6 <__floatsisf+0x36>
    18f2:	60 ff       	sbrs	r22, 0
    18f4:	1b c0       	rjmp	.+54     	; 0x192c <__floatsisf+0x6c>
    18f6:	6f 5f       	subi	r22, 0xFF	; 255
    18f8:	7f 4f       	sbci	r23, 0xFF	; 255
    18fa:	8f 4f       	sbci	r24, 0xFF	; 255
    18fc:	9f 4f       	sbci	r25, 0xFF	; 255
    18fe:	16 c0       	rjmp	.+44     	; 0x192c <__floatsisf+0x6c>
    1900:	88 23       	and	r24, r24
    1902:	11 f0       	breq	.+4      	; 0x1908 <__floatsisf+0x48>
    1904:	96 e9       	ldi	r25, 0x96	; 150
    1906:	11 c0       	rjmp	.+34     	; 0x192a <__floatsisf+0x6a>
    1908:	77 23       	and	r23, r23
    190a:	21 f0       	breq	.+8      	; 0x1914 <__floatsisf+0x54>
    190c:	9e e8       	ldi	r25, 0x8E	; 142
    190e:	87 2f       	mov	r24, r23
    1910:	76 2f       	mov	r23, r22
    1912:	05 c0       	rjmp	.+10     	; 0x191e <__floatsisf+0x5e>
    1914:	66 23       	and	r22, r22
    1916:	71 f0       	breq	.+28     	; 0x1934 <__floatsisf+0x74>
    1918:	96 e8       	ldi	r25, 0x86	; 134
    191a:	86 2f       	mov	r24, r22
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	2a f0       	brmi	.+10     	; 0x192c <__floatsisf+0x6c>
    1922:	9a 95       	dec	r25
    1924:	66 0f       	add	r22, r22
    1926:	77 1f       	adc	r23, r23
    1928:	88 1f       	adc	r24, r24
    192a:	da f7       	brpl	.-10     	; 0x1922 <__floatsisf+0x62>
    192c:	88 0f       	add	r24, r24
    192e:	96 95       	lsr	r25
    1930:	87 95       	ror	r24
    1932:	97 f9       	bld	r25, 7
    1934:	08 95       	ret

00001936 <__fp_split3>:
    1936:	57 fd       	sbrc	r21, 7
    1938:	90 58       	subi	r25, 0x80	; 128
    193a:	44 0f       	add	r20, r20
    193c:	55 1f       	adc	r21, r21
    193e:	59 f0       	breq	.+22     	; 0x1956 <__fp_splitA+0x10>
    1940:	5f 3f       	cpi	r21, 0xFF	; 255
    1942:	71 f0       	breq	.+28     	; 0x1960 <__fp_splitA+0x1a>
    1944:	47 95       	ror	r20

00001946 <__fp_splitA>:
    1946:	88 0f       	add	r24, r24
    1948:	97 fb       	bst	r25, 7
    194a:	99 1f       	adc	r25, r25
    194c:	61 f0       	breq	.+24     	; 0x1966 <__fp_splitA+0x20>
    194e:	9f 3f       	cpi	r25, 0xFF	; 255
    1950:	79 f0       	breq	.+30     	; 0x1970 <__fp_splitA+0x2a>
    1952:	87 95       	ror	r24
    1954:	08 95       	ret
    1956:	12 16       	cp	r1, r18
    1958:	13 06       	cpc	r1, r19
    195a:	14 06       	cpc	r1, r20
    195c:	55 1f       	adc	r21, r21
    195e:	f2 cf       	rjmp	.-28     	; 0x1944 <__fp_split3+0xe>
    1960:	46 95       	lsr	r20
    1962:	f1 df       	rcall	.-30     	; 0x1946 <__fp_splitA>
    1964:	08 c0       	rjmp	.+16     	; 0x1976 <__fp_splitA+0x30>
    1966:	16 16       	cp	r1, r22
    1968:	17 06       	cpc	r1, r23
    196a:	18 06       	cpc	r1, r24
    196c:	99 1f       	adc	r25, r25
    196e:	f1 cf       	rjmp	.-30     	; 0x1952 <__fp_splitA+0xc>
    1970:	86 95       	lsr	r24
    1972:	71 05       	cpc	r23, r1
    1974:	61 05       	cpc	r22, r1
    1976:	08 94       	sec
    1978:	08 95       	ret

0000197a <__fp_zero>:
    197a:	e8 94       	clt

0000197c <__fp_szero>:
    197c:	bb 27       	eor	r27, r27
    197e:	66 27       	eor	r22, r22
    1980:	77 27       	eor	r23, r23
    1982:	cb 01       	movw	r24, r22
    1984:	97 f9       	bld	r25, 7
    1986:	08 95       	ret

00001988 <pow>:
    1988:	fa 01       	movw	r30, r20
    198a:	ee 0f       	add	r30, r30
    198c:	ff 1f       	adc	r31, r31
    198e:	30 96       	adiw	r30, 0x00	; 0
    1990:	21 05       	cpc	r18, r1
    1992:	31 05       	cpc	r19, r1
    1994:	99 f1       	breq	.+102    	; 0x19fc <pow+0x74>
    1996:	61 15       	cp	r22, r1
    1998:	71 05       	cpc	r23, r1
    199a:	61 f4       	brne	.+24     	; 0x19b4 <pow+0x2c>
    199c:	80 38       	cpi	r24, 0x80	; 128
    199e:	bf e3       	ldi	r27, 0x3F	; 63
    19a0:	9b 07       	cpc	r25, r27
    19a2:	49 f1       	breq	.+82     	; 0x19f6 <pow+0x6e>
    19a4:	68 94       	set
    19a6:	90 38       	cpi	r25, 0x80	; 128
    19a8:	81 05       	cpc	r24, r1
    19aa:	61 f0       	breq	.+24     	; 0x19c4 <pow+0x3c>
    19ac:	80 38       	cpi	r24, 0x80	; 128
    19ae:	bf ef       	ldi	r27, 0xFF	; 255
    19b0:	9b 07       	cpc	r25, r27
    19b2:	41 f0       	breq	.+16     	; 0x19c4 <pow+0x3c>
    19b4:	99 23       	and	r25, r25
    19b6:	42 f5       	brpl	.+80     	; 0x1a08 <pow+0x80>
    19b8:	ff 3f       	cpi	r31, 0xFF	; 255
    19ba:	e1 05       	cpc	r30, r1
    19bc:	31 05       	cpc	r19, r1
    19be:	21 05       	cpc	r18, r1
    19c0:	11 f1       	breq	.+68     	; 0x1a06 <pow+0x7e>
    19c2:	e8 94       	clt
    19c4:	08 94       	sec
    19c6:	e7 95       	ror	r30
    19c8:	d9 01       	movw	r26, r18
    19ca:	aa 23       	and	r26, r26
    19cc:	29 f4       	brne	.+10     	; 0x19d8 <pow+0x50>
    19ce:	ab 2f       	mov	r26, r27
    19d0:	be 2f       	mov	r27, r30
    19d2:	f8 5f       	subi	r31, 0xF8	; 248
    19d4:	d0 f3       	brcs	.-12     	; 0x19ca <pow+0x42>
    19d6:	10 c0       	rjmp	.+32     	; 0x19f8 <pow+0x70>
    19d8:	ff 5f       	subi	r31, 0xFF	; 255
    19da:	70 f4       	brcc	.+28     	; 0x19f8 <pow+0x70>
    19dc:	a6 95       	lsr	r26
    19de:	e0 f7       	brcc	.-8      	; 0x19d8 <pow+0x50>
    19e0:	f7 39       	cpi	r31, 0x97	; 151
    19e2:	50 f0       	brcs	.+20     	; 0x19f8 <pow+0x70>
    19e4:	19 f0       	breq	.+6      	; 0x19ec <pow+0x64>
    19e6:	ff 3a       	cpi	r31, 0xAF	; 175
    19e8:	38 f4       	brcc	.+14     	; 0x19f8 <pow+0x70>
    19ea:	9f 77       	andi	r25, 0x7F	; 127
    19ec:	9f 93       	push	r25
    19ee:	0c d0       	rcall	.+24     	; 0x1a08 <pow+0x80>
    19f0:	0f 90       	pop	r0
    19f2:	07 fc       	sbrc	r0, 7
    19f4:	90 58       	subi	r25, 0x80	; 128
    19f6:	08 95       	ret
    19f8:	3e f0       	brts	.+14     	; 0x1a08 <pow+0x80>
    19fa:	49 c0       	rjmp	.+146    	; 0x1a8e <__fp_nan>
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	80 e8       	ldi	r24, 0x80	; 128
    1a02:	9f e3       	ldi	r25, 0x3F	; 63
    1a04:	08 95       	ret
    1a06:	4f e7       	ldi	r20, 0x7F	; 127
    1a08:	9f 77       	andi	r25, 0x7F	; 127
    1a0a:	5f 93       	push	r21
    1a0c:	4f 93       	push	r20
    1a0e:	3f 93       	push	r19
    1a10:	2f 93       	push	r18
    1a12:	a7 d0       	rcall	.+334    	; 0x1b62 <log>
    1a14:	2f 91       	pop	r18
    1a16:	3f 91       	pop	r19
    1a18:	4f 91       	pop	r20
    1a1a:	5f 91       	pop	r21
    1a1c:	15 d1       	rcall	.+554    	; 0x1c48 <__mulsf3>
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <exp>
    1a20:	19 f4       	brne	.+6      	; 0x1a28 <pow+0xa0>
    1a22:	0e f0       	brts	.+2      	; 0x1a26 <pow+0x9e>
    1a24:	2e c0       	rjmp	.+92     	; 0x1a82 <__fp_inf>
    1a26:	a9 cf       	rjmp	.-174    	; 0x197a <__fp_zero>
    1a28:	32 c0       	rjmp	.+100    	; 0x1a8e <__fp_nan>

00001a2a <exp>:
    1a2a:	8d df       	rcall	.-230    	; 0x1946 <__fp_splitA>
    1a2c:	c8 f3       	brcs	.-14     	; 0x1a20 <pow+0x98>
    1a2e:	96 38       	cpi	r25, 0x86	; 134
    1a30:	c0 f7       	brcc	.-16     	; 0x1a22 <pow+0x9a>
    1a32:	07 f8       	bld	r0, 7
    1a34:	0f 92       	push	r0
    1a36:	e8 94       	clt
    1a38:	2b e3       	ldi	r18, 0x3B	; 59
    1a3a:	3a ea       	ldi	r19, 0xAA	; 170
    1a3c:	48 eb       	ldi	r20, 0xB8	; 184
    1a3e:	5f e7       	ldi	r21, 0x7F	; 127
    1a40:	11 d1       	rcall	.+546    	; 0x1c64 <__mulsf3_pse>
    1a42:	0f 92       	push	r0
    1a44:	0f 92       	push	r0
    1a46:	0f 92       	push	r0
    1a48:	4d b7       	in	r20, 0x3d	; 61
    1a4a:	5e b7       	in	r21, 0x3e	; 62
    1a4c:	0f 92       	push	r0
    1a4e:	c9 d0       	rcall	.+402    	; 0x1be2 <modf>
    1a50:	ec ea       	ldi	r30, 0xAC	; 172
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	1f d0       	rcall	.+62     	; 0x1a94 <__fp_powser>
    1a56:	4f 91       	pop	r20
    1a58:	5f 91       	pop	r21
    1a5a:	ef 91       	pop	r30
    1a5c:	ff 91       	pop	r31
    1a5e:	e5 95       	asr	r30
    1a60:	ee 1f       	adc	r30, r30
    1a62:	ff 1f       	adc	r31, r31
    1a64:	49 f0       	breq	.+18     	; 0x1a78 <exp+0x4e>
    1a66:	fe 57       	subi	r31, 0x7E	; 126
    1a68:	e0 68       	ori	r30, 0x80	; 128
    1a6a:	44 27       	eor	r20, r20
    1a6c:	ee 0f       	add	r30, r30
    1a6e:	44 1f       	adc	r20, r20
    1a70:	fa 95       	dec	r31
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <exp+0x42>
    1a74:	41 95       	neg	r20
    1a76:	55 0b       	sbc	r21, r21
    1a78:	3b d0       	rcall	.+118    	; 0x1af0 <ldexp>
    1a7a:	0f 90       	pop	r0
    1a7c:	07 fe       	sbrs	r0, 7
    1a7e:	2f c0       	rjmp	.+94     	; 0x1ade <inverse>
    1a80:	08 95       	ret

00001a82 <__fp_inf>:
    1a82:	97 f9       	bld	r25, 7
    1a84:	9f 67       	ori	r25, 0x7F	; 127
    1a86:	80 e8       	ldi	r24, 0x80	; 128
    1a88:	70 e0       	ldi	r23, 0x00	; 0
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	08 95       	ret

00001a8e <__fp_nan>:
    1a8e:	9f ef       	ldi	r25, 0xFF	; 255
    1a90:	80 ec       	ldi	r24, 0xC0	; 192
    1a92:	08 95       	ret

00001a94 <__fp_powser>:
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	1f 93       	push	r17
    1a9a:	0f 93       	push	r16
    1a9c:	ff 92       	push	r15
    1a9e:	ef 92       	push	r14
    1aa0:	df 92       	push	r13
    1aa2:	7b 01       	movw	r14, r22
    1aa4:	8c 01       	movw	r16, r24
    1aa6:	68 94       	set
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <__fp_powser+0x20>
    1aaa:	da 2e       	mov	r13, r26
    1aac:	ef 01       	movw	r28, r30
    1aae:	d8 d0       	rcall	.+432    	; 0x1c60 <__mulsf3x>
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	e8 94       	clt
    1ab4:	a5 91       	lpm	r26, Z+
    1ab6:	25 91       	lpm	r18, Z+
    1ab8:	35 91       	lpm	r19, Z+
    1aba:	45 91       	lpm	r20, Z+
    1abc:	55 91       	lpm	r21, Z+
    1abe:	ae f3       	brts	.-22     	; 0x1aaa <__fp_powser+0x16>
    1ac0:	ef 01       	movw	r28, r30
    1ac2:	37 d1       	rcall	.+622    	; 0x1d32 <__addsf3x>
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	97 01       	movw	r18, r14
    1ac8:	a8 01       	movw	r20, r16
    1aca:	da 94       	dec	r13
    1acc:	79 f7       	brne	.-34     	; 0x1aac <__fp_powser+0x18>
    1ace:	df 90       	pop	r13
    1ad0:	ef 90       	pop	r14
    1ad2:	ff 90       	pop	r15
    1ad4:	0f 91       	pop	r16
    1ad6:	1f 91       	pop	r17
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <inverse>:
    1ade:	9b 01       	movw	r18, r22
    1ae0:	ac 01       	movw	r20, r24
    1ae2:	60 e0       	ldi	r22, 0x00	; 0
    1ae4:	70 e0       	ldi	r23, 0x00	; 0
    1ae6:	80 e8       	ldi	r24, 0x80	; 128
    1ae8:	9f e3       	ldi	r25, 0x3F	; 63
    1aea:	76 c1       	rjmp	.+748    	; 0x1dd8 <__divsf3>
    1aec:	ca cf       	rjmp	.-108    	; 0x1a82 <__fp_inf>
    1aee:	dc c1       	rjmp	.+952    	; 0x1ea8 <__fp_mpack>

00001af0 <ldexp>:
    1af0:	2a df       	rcall	.-428    	; 0x1946 <__fp_splitA>
    1af2:	e8 f3       	brcs	.-6      	; 0x1aee <inverse+0x10>
    1af4:	99 23       	and	r25, r25
    1af6:	d9 f3       	breq	.-10     	; 0x1aee <inverse+0x10>
    1af8:	94 0f       	add	r25, r20
    1afa:	51 1d       	adc	r21, r1
    1afc:	bb f3       	brvs	.-18     	; 0x1aec <inverse+0xe>
    1afe:	91 50       	subi	r25, 0x01	; 1
    1b00:	50 40       	sbci	r21, 0x00	; 0
    1b02:	94 f0       	brlt	.+36     	; 0x1b28 <ldexp+0x38>
    1b04:	59 f0       	breq	.+22     	; 0x1b1c <ldexp+0x2c>
    1b06:	88 23       	and	r24, r24
    1b08:	32 f0       	brmi	.+12     	; 0x1b16 <ldexp+0x26>
    1b0a:	66 0f       	add	r22, r22
    1b0c:	77 1f       	adc	r23, r23
    1b0e:	88 1f       	adc	r24, r24
    1b10:	91 50       	subi	r25, 0x01	; 1
    1b12:	50 40       	sbci	r21, 0x00	; 0
    1b14:	c1 f7       	brne	.-16     	; 0x1b06 <ldexp+0x16>
    1b16:	9e 3f       	cpi	r25, 0xFE	; 254
    1b18:	51 05       	cpc	r21, r1
    1b1a:	44 f7       	brge	.-48     	; 0x1aec <inverse+0xe>
    1b1c:	88 0f       	add	r24, r24
    1b1e:	91 1d       	adc	r25, r1
    1b20:	96 95       	lsr	r25
    1b22:	87 95       	ror	r24
    1b24:	97 f9       	bld	r25, 7
    1b26:	08 95       	ret
    1b28:	5f 3f       	cpi	r21, 0xFF	; 255
    1b2a:	ac f0       	brlt	.+42     	; 0x1b56 <ldexp+0x66>
    1b2c:	98 3e       	cpi	r25, 0xE8	; 232
    1b2e:	9c f0       	brlt	.+38     	; 0x1b56 <ldexp+0x66>
    1b30:	bb 27       	eor	r27, r27
    1b32:	86 95       	lsr	r24
    1b34:	77 95       	ror	r23
    1b36:	67 95       	ror	r22
    1b38:	b7 95       	ror	r27
    1b3a:	08 f4       	brcc	.+2      	; 0x1b3e <ldexp+0x4e>
    1b3c:	b1 60       	ori	r27, 0x01	; 1
    1b3e:	93 95       	inc	r25
    1b40:	c1 f7       	brne	.-16     	; 0x1b32 <ldexp+0x42>
    1b42:	bb 0f       	add	r27, r27
    1b44:	58 f7       	brcc	.-42     	; 0x1b1c <ldexp+0x2c>
    1b46:	11 f4       	brne	.+4      	; 0x1b4c <ldexp+0x5c>
    1b48:	60 ff       	sbrs	r22, 0
    1b4a:	e8 cf       	rjmp	.-48     	; 0x1b1c <ldexp+0x2c>
    1b4c:	6f 5f       	subi	r22, 0xFF	; 255
    1b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b50:	8f 4f       	sbci	r24, 0xFF	; 255
    1b52:	9f 4f       	sbci	r25, 0xFF	; 255
    1b54:	e3 cf       	rjmp	.-58     	; 0x1b1c <ldexp+0x2c>
    1b56:	12 cf       	rjmp	.-476    	; 0x197c <__fp_szero>
    1b58:	0e f0       	brts	.+2      	; 0x1b5c <ldexp+0x6c>
    1b5a:	a6 c1       	rjmp	.+844    	; 0x1ea8 <__fp_mpack>
    1b5c:	98 cf       	rjmp	.-208    	; 0x1a8e <__fp_nan>
    1b5e:	68 94       	set
    1b60:	90 cf       	rjmp	.-224    	; 0x1a82 <__fp_inf>

00001b62 <log>:
    1b62:	f1 de       	rcall	.-542    	; 0x1946 <__fp_splitA>
    1b64:	c8 f3       	brcs	.-14     	; 0x1b58 <ldexp+0x68>
    1b66:	99 23       	and	r25, r25
    1b68:	d1 f3       	breq	.-12     	; 0x1b5e <ldexp+0x6e>
    1b6a:	c6 f3       	brts	.-16     	; 0x1b5c <ldexp+0x6c>
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	1f 93       	push	r17
    1b72:	0f 93       	push	r16
    1b74:	ff 92       	push	r15
    1b76:	c9 2f       	mov	r28, r25
    1b78:	dd 27       	eor	r29, r29
    1b7a:	88 23       	and	r24, r24
    1b7c:	2a f0       	brmi	.+10     	; 0x1b88 <log+0x26>
    1b7e:	21 97       	sbiw	r28, 0x01	; 1
    1b80:	66 0f       	add	r22, r22
    1b82:	77 1f       	adc	r23, r23
    1b84:	88 1f       	adc	r24, r24
    1b86:	da f7       	brpl	.-10     	; 0x1b7e <log+0x1c>
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e8       	ldi	r20, 0x80	; 128
    1b8e:	5f eb       	ldi	r21, 0xBF	; 191
    1b90:	9f e3       	ldi	r25, 0x3F	; 63
    1b92:	88 39       	cpi	r24, 0x98	; 152
    1b94:	20 f0       	brcs	.+8      	; 0x1b9e <log+0x3c>
    1b96:	80 3e       	cpi	r24, 0xE0	; 224
    1b98:	30 f0       	brcs	.+12     	; 0x1ba6 <log+0x44>
    1b9a:	21 96       	adiw	r28, 0x01	; 1
    1b9c:	8f 77       	andi	r24, 0x7F	; 127
    1b9e:	b8 d0       	rcall	.+368    	; 0x1d10 <__addsf3>
    1ba0:	e4 ed       	ldi	r30, 0xD4	; 212
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	03 c0       	rjmp	.+6      	; 0x1bac <log+0x4a>
    1ba6:	b4 d0       	rcall	.+360    	; 0x1d10 <__addsf3>
    1ba8:	e1 e0       	ldi	r30, 0x01	; 1
    1baa:	f1 e0       	ldi	r31, 0x01	; 1
    1bac:	73 df       	rcall	.-282    	; 0x1a94 <__fp_powser>
    1bae:	8b 01       	movw	r16, r22
    1bb0:	be 01       	movw	r22, r28
    1bb2:	ec 01       	movw	r28, r24
    1bb4:	fb 2e       	mov	r15, r27
    1bb6:	6f 57       	subi	r22, 0x7F	; 127
    1bb8:	71 09       	sbc	r23, r1
    1bba:	75 95       	asr	r23
    1bbc:	77 1f       	adc	r23, r23
    1bbe:	88 0b       	sbc	r24, r24
    1bc0:	99 0b       	sbc	r25, r25
    1bc2:	7e de       	rcall	.-772    	; 0x18c0 <__floatsisf>
    1bc4:	28 e1       	ldi	r18, 0x18	; 24
    1bc6:	32 e7       	ldi	r19, 0x72	; 114
    1bc8:	41 e3       	ldi	r20, 0x31	; 49
    1bca:	5f e3       	ldi	r21, 0x3F	; 63
    1bcc:	49 d0       	rcall	.+146    	; 0x1c60 <__mulsf3x>
    1bce:	af 2d       	mov	r26, r15
    1bd0:	98 01       	movw	r18, r16
    1bd2:	ae 01       	movw	r20, r28
    1bd4:	ff 90       	pop	r15
    1bd6:	0f 91       	pop	r16
    1bd8:	1f 91       	pop	r17
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	a9 d0       	rcall	.+338    	; 0x1d32 <__addsf3x>
    1be0:	7f c1       	rjmp	.+766    	; 0x1ee0 <__fp_round>

00001be2 <modf>:
    1be2:	fa 01       	movw	r30, r20
    1be4:	dc 01       	movw	r26, r24
    1be6:	aa 0f       	add	r26, r26
    1be8:	bb 1f       	adc	r27, r27
    1bea:	9b 01       	movw	r18, r22
    1bec:	ac 01       	movw	r20, r24
    1bee:	bf 57       	subi	r27, 0x7F	; 127
    1bf0:	28 f4       	brcc	.+10     	; 0x1bfc <modf+0x1a>
    1bf2:	22 27       	eor	r18, r18
    1bf4:	33 27       	eor	r19, r19
    1bf6:	44 27       	eor	r20, r20
    1bf8:	50 78       	andi	r21, 0x80	; 128
    1bfa:	1f c0       	rjmp	.+62     	; 0x1c3a <modf+0x58>
    1bfc:	b7 51       	subi	r27, 0x17	; 23
    1bfe:	88 f4       	brcc	.+34     	; 0x1c22 <modf+0x40>
    1c00:	ab 2f       	mov	r26, r27
    1c02:	00 24       	eor	r0, r0
    1c04:	46 95       	lsr	r20
    1c06:	37 95       	ror	r19
    1c08:	27 95       	ror	r18
    1c0a:	01 1c       	adc	r0, r1
    1c0c:	a3 95       	inc	r26
    1c0e:	d2 f3       	brmi	.-12     	; 0x1c04 <modf+0x22>
    1c10:	00 20       	and	r0, r0
    1c12:	69 f0       	breq	.+26     	; 0x1c2e <modf+0x4c>
    1c14:	22 0f       	add	r18, r18
    1c16:	33 1f       	adc	r19, r19
    1c18:	44 1f       	adc	r20, r20
    1c1a:	b3 95       	inc	r27
    1c1c:	da f3       	brmi	.-10     	; 0x1c14 <modf+0x32>
    1c1e:	0d d0       	rcall	.+26     	; 0x1c3a <modf+0x58>
    1c20:	76 c0       	rjmp	.+236    	; 0x1d0e <__subsf3>
    1c22:	61 30       	cpi	r22, 0x01	; 1
    1c24:	71 05       	cpc	r23, r1
    1c26:	a0 e8       	ldi	r26, 0x80	; 128
    1c28:	8a 07       	cpc	r24, r26
    1c2a:	b9 46       	sbci	r27, 0x69	; 105
    1c2c:	30 f4       	brcc	.+12     	; 0x1c3a <modf+0x58>
    1c2e:	9b 01       	movw	r18, r22
    1c30:	ac 01       	movw	r20, r24
    1c32:	66 27       	eor	r22, r22
    1c34:	77 27       	eor	r23, r23
    1c36:	88 27       	eor	r24, r24
    1c38:	90 78       	andi	r25, 0x80	; 128
    1c3a:	30 96       	adiw	r30, 0x00	; 0
    1c3c:	21 f0       	breq	.+8      	; 0x1c46 <modf+0x64>
    1c3e:	20 83       	st	Z, r18
    1c40:	31 83       	std	Z+1, r19	; 0x01
    1c42:	42 83       	std	Z+2, r20	; 0x02
    1c44:	53 83       	std	Z+3, r21	; 0x03
    1c46:	08 95       	ret

00001c48 <__mulsf3>:
    1c48:	0b d0       	rcall	.+22     	; 0x1c60 <__mulsf3x>
    1c4a:	4a c1       	rjmp	.+660    	; 0x1ee0 <__fp_round>
    1c4c:	3b d1       	rcall	.+630    	; 0x1ec4 <__fp_pscA>
    1c4e:	28 f0       	brcs	.+10     	; 0x1c5a <__mulsf3+0x12>
    1c50:	40 d1       	rcall	.+640    	; 0x1ed2 <__fp_pscB>
    1c52:	18 f0       	brcs	.+6      	; 0x1c5a <__mulsf3+0x12>
    1c54:	95 23       	and	r25, r21
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <__mulsf3+0x12>
    1c58:	14 cf       	rjmp	.-472    	; 0x1a82 <__fp_inf>
    1c5a:	19 cf       	rjmp	.-462    	; 0x1a8e <__fp_nan>
    1c5c:	11 24       	eor	r1, r1
    1c5e:	8e ce       	rjmp	.-740    	; 0x197c <__fp_szero>

00001c60 <__mulsf3x>:
    1c60:	6a de       	rcall	.-812    	; 0x1936 <__fp_split3>
    1c62:	a0 f3       	brcs	.-24     	; 0x1c4c <__mulsf3+0x4>

00001c64 <__mulsf3_pse>:
    1c64:	95 9f       	mul	r25, r21
    1c66:	d1 f3       	breq	.-12     	; 0x1c5c <__mulsf3+0x14>
    1c68:	95 0f       	add	r25, r21
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	55 1f       	adc	r21, r21
    1c6e:	62 9f       	mul	r22, r18
    1c70:	f0 01       	movw	r30, r0
    1c72:	72 9f       	mul	r23, r18
    1c74:	bb 27       	eor	r27, r27
    1c76:	f0 0d       	add	r31, r0
    1c78:	b1 1d       	adc	r27, r1
    1c7a:	63 9f       	mul	r22, r19
    1c7c:	aa 27       	eor	r26, r26
    1c7e:	f0 0d       	add	r31, r0
    1c80:	b1 1d       	adc	r27, r1
    1c82:	aa 1f       	adc	r26, r26
    1c84:	64 9f       	mul	r22, r20
    1c86:	66 27       	eor	r22, r22
    1c88:	b0 0d       	add	r27, r0
    1c8a:	a1 1d       	adc	r26, r1
    1c8c:	66 1f       	adc	r22, r22
    1c8e:	82 9f       	mul	r24, r18
    1c90:	22 27       	eor	r18, r18
    1c92:	b0 0d       	add	r27, r0
    1c94:	a1 1d       	adc	r26, r1
    1c96:	62 1f       	adc	r22, r18
    1c98:	73 9f       	mul	r23, r19
    1c9a:	b0 0d       	add	r27, r0
    1c9c:	a1 1d       	adc	r26, r1
    1c9e:	62 1f       	adc	r22, r18
    1ca0:	83 9f       	mul	r24, r19
    1ca2:	a0 0d       	add	r26, r0
    1ca4:	61 1d       	adc	r22, r1
    1ca6:	22 1f       	adc	r18, r18
    1ca8:	74 9f       	mul	r23, r20
    1caa:	33 27       	eor	r19, r19
    1cac:	a0 0d       	add	r26, r0
    1cae:	61 1d       	adc	r22, r1
    1cb0:	23 1f       	adc	r18, r19
    1cb2:	84 9f       	mul	r24, r20
    1cb4:	60 0d       	add	r22, r0
    1cb6:	21 1d       	adc	r18, r1
    1cb8:	82 2f       	mov	r24, r18
    1cba:	76 2f       	mov	r23, r22
    1cbc:	6a 2f       	mov	r22, r26
    1cbe:	11 24       	eor	r1, r1
    1cc0:	9f 57       	subi	r25, 0x7F	; 127
    1cc2:	50 40       	sbci	r21, 0x00	; 0
    1cc4:	8a f0       	brmi	.+34     	; 0x1ce8 <__mulsf3_pse+0x84>
    1cc6:	e1 f0       	breq	.+56     	; 0x1d00 <__mulsf3_pse+0x9c>
    1cc8:	88 23       	and	r24, r24
    1cca:	4a f0       	brmi	.+18     	; 0x1cde <__mulsf3_pse+0x7a>
    1ccc:	ee 0f       	add	r30, r30
    1cce:	ff 1f       	adc	r31, r31
    1cd0:	bb 1f       	adc	r27, r27
    1cd2:	66 1f       	adc	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	88 1f       	adc	r24, r24
    1cd8:	91 50       	subi	r25, 0x01	; 1
    1cda:	50 40       	sbci	r21, 0x00	; 0
    1cdc:	a9 f7       	brne	.-22     	; 0x1cc8 <__mulsf3_pse+0x64>
    1cde:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce0:	51 05       	cpc	r21, r1
    1ce2:	70 f0       	brcs	.+28     	; 0x1d00 <__mulsf3_pse+0x9c>
    1ce4:	ce ce       	rjmp	.-612    	; 0x1a82 <__fp_inf>
    1ce6:	4a ce       	rjmp	.-876    	; 0x197c <__fp_szero>
    1ce8:	5f 3f       	cpi	r21, 0xFF	; 255
    1cea:	ec f3       	brlt	.-6      	; 0x1ce6 <__mulsf3_pse+0x82>
    1cec:	98 3e       	cpi	r25, 0xE8	; 232
    1cee:	dc f3       	brlt	.-10     	; 0x1ce6 <__mulsf3_pse+0x82>
    1cf0:	86 95       	lsr	r24
    1cf2:	77 95       	ror	r23
    1cf4:	67 95       	ror	r22
    1cf6:	b7 95       	ror	r27
    1cf8:	f7 95       	ror	r31
    1cfa:	e7 95       	ror	r30
    1cfc:	9f 5f       	subi	r25, 0xFF	; 255
    1cfe:	c1 f7       	brne	.-16     	; 0x1cf0 <__mulsf3_pse+0x8c>
    1d00:	fe 2b       	or	r31, r30
    1d02:	88 0f       	add	r24, r24
    1d04:	91 1d       	adc	r25, r1
    1d06:	96 95       	lsr	r25
    1d08:	87 95       	ror	r24
    1d0a:	97 f9       	bld	r25, 7
    1d0c:	08 95       	ret

00001d0e <__subsf3>:
    1d0e:	50 58       	subi	r21, 0x80	; 128

00001d10 <__addsf3>:
    1d10:	bb 27       	eor	r27, r27
    1d12:	aa 27       	eor	r26, r26
    1d14:	0e d0       	rcall	.+28     	; 0x1d32 <__addsf3x>
    1d16:	e4 c0       	rjmp	.+456    	; 0x1ee0 <__fp_round>
    1d18:	d5 d0       	rcall	.+426    	; 0x1ec4 <__fp_pscA>
    1d1a:	30 f0       	brcs	.+12     	; 0x1d28 <__addsf3+0x18>
    1d1c:	da d0       	rcall	.+436    	; 0x1ed2 <__fp_pscB>
    1d1e:	20 f0       	brcs	.+8      	; 0x1d28 <__addsf3+0x18>
    1d20:	31 f4       	brne	.+12     	; 0x1d2e <__addsf3+0x1e>
    1d22:	9f 3f       	cpi	r25, 0xFF	; 255
    1d24:	11 f4       	brne	.+4      	; 0x1d2a <__addsf3+0x1a>
    1d26:	1e f4       	brtc	.+6      	; 0x1d2e <__addsf3+0x1e>
    1d28:	b2 ce       	rjmp	.-668    	; 0x1a8e <__fp_nan>
    1d2a:	0e f4       	brtc	.+2      	; 0x1d2e <__addsf3+0x1e>
    1d2c:	e0 95       	com	r30
    1d2e:	e7 fb       	bst	r30, 7
    1d30:	a8 ce       	rjmp	.-688    	; 0x1a82 <__fp_inf>

00001d32 <__addsf3x>:
    1d32:	e9 2f       	mov	r30, r25
    1d34:	00 de       	rcall	.-1024   	; 0x1936 <__fp_split3>
    1d36:	80 f3       	brcs	.-32     	; 0x1d18 <__addsf3+0x8>
    1d38:	ba 17       	cp	r27, r26
    1d3a:	62 07       	cpc	r22, r18
    1d3c:	73 07       	cpc	r23, r19
    1d3e:	84 07       	cpc	r24, r20
    1d40:	95 07       	cpc	r25, r21
    1d42:	18 f0       	brcs	.+6      	; 0x1d4a <__addsf3x+0x18>
    1d44:	71 f4       	brne	.+28     	; 0x1d62 <__addsf3x+0x30>
    1d46:	9e f5       	brtc	.+102    	; 0x1dae <__addsf3x+0x7c>
    1d48:	18 ce       	rjmp	.-976    	; 0x197a <__fp_zero>
    1d4a:	0e f4       	brtc	.+2      	; 0x1d4e <__addsf3x+0x1c>
    1d4c:	e0 95       	com	r30
    1d4e:	0b 2e       	mov	r0, r27
    1d50:	ba 2f       	mov	r27, r26
    1d52:	a0 2d       	mov	r26, r0
    1d54:	0b 01       	movw	r0, r22
    1d56:	b9 01       	movw	r22, r18
    1d58:	90 01       	movw	r18, r0
    1d5a:	0c 01       	movw	r0, r24
    1d5c:	ca 01       	movw	r24, r20
    1d5e:	a0 01       	movw	r20, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	ff 27       	eor	r31, r31
    1d64:	59 1b       	sub	r21, r25
    1d66:	99 f0       	breq	.+38     	; 0x1d8e <__addsf3x+0x5c>
    1d68:	59 3f       	cpi	r21, 0xF9	; 249
    1d6a:	50 f4       	brcc	.+20     	; 0x1d80 <__addsf3x+0x4e>
    1d6c:	50 3e       	cpi	r21, 0xE0	; 224
    1d6e:	68 f1       	brcs	.+90     	; 0x1dca <__addsf3x+0x98>
    1d70:	1a 16       	cp	r1, r26
    1d72:	f0 40       	sbci	r31, 0x00	; 0
    1d74:	a2 2f       	mov	r26, r18
    1d76:	23 2f       	mov	r18, r19
    1d78:	34 2f       	mov	r19, r20
    1d7a:	44 27       	eor	r20, r20
    1d7c:	58 5f       	subi	r21, 0xF8	; 248
    1d7e:	f3 cf       	rjmp	.-26     	; 0x1d66 <__addsf3x+0x34>
    1d80:	46 95       	lsr	r20
    1d82:	37 95       	ror	r19
    1d84:	27 95       	ror	r18
    1d86:	a7 95       	ror	r26
    1d88:	f0 40       	sbci	r31, 0x00	; 0
    1d8a:	53 95       	inc	r21
    1d8c:	c9 f7       	brne	.-14     	; 0x1d80 <__addsf3x+0x4e>
    1d8e:	7e f4       	brtc	.+30     	; 0x1dae <__addsf3x+0x7c>
    1d90:	1f 16       	cp	r1, r31
    1d92:	ba 0b       	sbc	r27, r26
    1d94:	62 0b       	sbc	r22, r18
    1d96:	73 0b       	sbc	r23, r19
    1d98:	84 0b       	sbc	r24, r20
    1d9a:	ba f0       	brmi	.+46     	; 0x1dca <__addsf3x+0x98>
    1d9c:	91 50       	subi	r25, 0x01	; 1
    1d9e:	a1 f0       	breq	.+40     	; 0x1dc8 <__addsf3x+0x96>
    1da0:	ff 0f       	add	r31, r31
    1da2:	bb 1f       	adc	r27, r27
    1da4:	66 1f       	adc	r22, r22
    1da6:	77 1f       	adc	r23, r23
    1da8:	88 1f       	adc	r24, r24
    1daa:	c2 f7       	brpl	.-16     	; 0x1d9c <__addsf3x+0x6a>
    1dac:	0e c0       	rjmp	.+28     	; 0x1dca <__addsf3x+0x98>
    1dae:	ba 0f       	add	r27, r26
    1db0:	62 1f       	adc	r22, r18
    1db2:	73 1f       	adc	r23, r19
    1db4:	84 1f       	adc	r24, r20
    1db6:	48 f4       	brcc	.+18     	; 0x1dca <__addsf3x+0x98>
    1db8:	87 95       	ror	r24
    1dba:	77 95       	ror	r23
    1dbc:	67 95       	ror	r22
    1dbe:	b7 95       	ror	r27
    1dc0:	f7 95       	ror	r31
    1dc2:	9e 3f       	cpi	r25, 0xFE	; 254
    1dc4:	08 f0       	brcs	.+2      	; 0x1dc8 <__addsf3x+0x96>
    1dc6:	b3 cf       	rjmp	.-154    	; 0x1d2e <__addsf3+0x1e>
    1dc8:	93 95       	inc	r25
    1dca:	88 0f       	add	r24, r24
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <__addsf3x+0x9e>
    1dce:	99 27       	eor	r25, r25
    1dd0:	ee 0f       	add	r30, r30
    1dd2:	97 95       	ror	r25
    1dd4:	87 95       	ror	r24
    1dd6:	08 95       	ret

00001dd8 <__divsf3>:
    1dd8:	0c d0       	rcall	.+24     	; 0x1df2 <__divsf3x>
    1dda:	82 c0       	rjmp	.+260    	; 0x1ee0 <__fp_round>
    1ddc:	7a d0       	rcall	.+244    	; 0x1ed2 <__fp_pscB>
    1dde:	40 f0       	brcs	.+16     	; 0x1df0 <__divsf3+0x18>
    1de0:	71 d0       	rcall	.+226    	; 0x1ec4 <__fp_pscA>
    1de2:	30 f0       	brcs	.+12     	; 0x1df0 <__divsf3+0x18>
    1de4:	21 f4       	brne	.+8      	; 0x1dee <__divsf3+0x16>
    1de6:	5f 3f       	cpi	r21, 0xFF	; 255
    1de8:	19 f0       	breq	.+6      	; 0x1df0 <__divsf3+0x18>
    1dea:	4b ce       	rjmp	.-874    	; 0x1a82 <__fp_inf>
    1dec:	51 11       	cpse	r21, r1
    1dee:	c6 cd       	rjmp	.-1140   	; 0x197c <__fp_szero>
    1df0:	4e ce       	rjmp	.-868    	; 0x1a8e <__fp_nan>

00001df2 <__divsf3x>:
    1df2:	a1 dd       	rcall	.-1214   	; 0x1936 <__fp_split3>
    1df4:	98 f3       	brcs	.-26     	; 0x1ddc <__divsf3+0x4>

00001df6 <__divsf3_pse>:
    1df6:	99 23       	and	r25, r25
    1df8:	c9 f3       	breq	.-14     	; 0x1dec <__divsf3+0x14>
    1dfa:	55 23       	and	r21, r21
    1dfc:	b1 f3       	breq	.-20     	; 0x1dea <__divsf3+0x12>
    1dfe:	95 1b       	sub	r25, r21
    1e00:	55 0b       	sbc	r21, r21
    1e02:	bb 27       	eor	r27, r27
    1e04:	aa 27       	eor	r26, r26
    1e06:	62 17       	cp	r22, r18
    1e08:	73 07       	cpc	r23, r19
    1e0a:	84 07       	cpc	r24, r20
    1e0c:	38 f0       	brcs	.+14     	; 0x1e1c <__divsf3_pse+0x26>
    1e0e:	9f 5f       	subi	r25, 0xFF	; 255
    1e10:	5f 4f       	sbci	r21, 0xFF	; 255
    1e12:	22 0f       	add	r18, r18
    1e14:	33 1f       	adc	r19, r19
    1e16:	44 1f       	adc	r20, r20
    1e18:	aa 1f       	adc	r26, r26
    1e1a:	a9 f3       	breq	.-22     	; 0x1e06 <__divsf3_pse+0x10>
    1e1c:	33 d0       	rcall	.+102    	; 0x1e84 <__divsf3_pse+0x8e>
    1e1e:	0e 2e       	mov	r0, r30
    1e20:	3a f0       	brmi	.+14     	; 0x1e30 <__divsf3_pse+0x3a>
    1e22:	e0 e8       	ldi	r30, 0x80	; 128
    1e24:	30 d0       	rcall	.+96     	; 0x1e86 <__divsf3_pse+0x90>
    1e26:	91 50       	subi	r25, 0x01	; 1
    1e28:	50 40       	sbci	r21, 0x00	; 0
    1e2a:	e6 95       	lsr	r30
    1e2c:	00 1c       	adc	r0, r0
    1e2e:	ca f7       	brpl	.-14     	; 0x1e22 <__divsf3_pse+0x2c>
    1e30:	29 d0       	rcall	.+82     	; 0x1e84 <__divsf3_pse+0x8e>
    1e32:	fe 2f       	mov	r31, r30
    1e34:	27 d0       	rcall	.+78     	; 0x1e84 <__divsf3_pse+0x8e>
    1e36:	66 0f       	add	r22, r22
    1e38:	77 1f       	adc	r23, r23
    1e3a:	88 1f       	adc	r24, r24
    1e3c:	bb 1f       	adc	r27, r27
    1e3e:	26 17       	cp	r18, r22
    1e40:	37 07       	cpc	r19, r23
    1e42:	48 07       	cpc	r20, r24
    1e44:	ab 07       	cpc	r26, r27
    1e46:	b0 e8       	ldi	r27, 0x80	; 128
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <__divsf3_pse+0x56>
    1e4a:	bb 0b       	sbc	r27, r27
    1e4c:	80 2d       	mov	r24, r0
    1e4e:	bf 01       	movw	r22, r30
    1e50:	ff 27       	eor	r31, r31
    1e52:	93 58       	subi	r25, 0x83	; 131
    1e54:	5f 4f       	sbci	r21, 0xFF	; 255
    1e56:	2a f0       	brmi	.+10     	; 0x1e62 <__divsf3_pse+0x6c>
    1e58:	9e 3f       	cpi	r25, 0xFE	; 254
    1e5a:	51 05       	cpc	r21, r1
    1e5c:	68 f0       	brcs	.+26     	; 0x1e78 <__divsf3_pse+0x82>
    1e5e:	11 ce       	rjmp	.-990    	; 0x1a82 <__fp_inf>
    1e60:	8d cd       	rjmp	.-1254   	; 0x197c <__fp_szero>
    1e62:	5f 3f       	cpi	r21, 0xFF	; 255
    1e64:	ec f3       	brlt	.-6      	; 0x1e60 <__divsf3_pse+0x6a>
    1e66:	98 3e       	cpi	r25, 0xE8	; 232
    1e68:	dc f3       	brlt	.-10     	; 0x1e60 <__divsf3_pse+0x6a>
    1e6a:	86 95       	lsr	r24
    1e6c:	77 95       	ror	r23
    1e6e:	67 95       	ror	r22
    1e70:	b7 95       	ror	r27
    1e72:	f7 95       	ror	r31
    1e74:	9f 5f       	subi	r25, 0xFF	; 255
    1e76:	c9 f7       	brne	.-14     	; 0x1e6a <__divsf3_pse+0x74>
    1e78:	88 0f       	add	r24, r24
    1e7a:	91 1d       	adc	r25, r1
    1e7c:	96 95       	lsr	r25
    1e7e:	87 95       	ror	r24
    1e80:	97 f9       	bld	r25, 7
    1e82:	08 95       	ret
    1e84:	e1 e0       	ldi	r30, 0x01	; 1
    1e86:	66 0f       	add	r22, r22
    1e88:	77 1f       	adc	r23, r23
    1e8a:	88 1f       	adc	r24, r24
    1e8c:	bb 1f       	adc	r27, r27
    1e8e:	62 17       	cp	r22, r18
    1e90:	73 07       	cpc	r23, r19
    1e92:	84 07       	cpc	r24, r20
    1e94:	ba 07       	cpc	r27, r26
    1e96:	20 f0       	brcs	.+8      	; 0x1ea0 <__divsf3_pse+0xaa>
    1e98:	62 1b       	sub	r22, r18
    1e9a:	73 0b       	sbc	r23, r19
    1e9c:	84 0b       	sbc	r24, r20
    1e9e:	ba 0b       	sbc	r27, r26
    1ea0:	ee 1f       	adc	r30, r30
    1ea2:	88 f7       	brcc	.-30     	; 0x1e86 <__divsf3_pse+0x90>
    1ea4:	e0 95       	com	r30
    1ea6:	08 95       	ret

00001ea8 <__fp_mpack>:
    1ea8:	9f 3f       	cpi	r25, 0xFF	; 255
    1eaa:	31 f0       	breq	.+12     	; 0x1eb8 <__fp_mpack_finite+0xc>

00001eac <__fp_mpack_finite>:
    1eac:	91 50       	subi	r25, 0x01	; 1
    1eae:	20 f4       	brcc	.+8      	; 0x1eb8 <__fp_mpack_finite+0xc>
    1eb0:	87 95       	ror	r24
    1eb2:	77 95       	ror	r23
    1eb4:	67 95       	ror	r22
    1eb6:	b7 95       	ror	r27
    1eb8:	88 0f       	add	r24, r24
    1eba:	91 1d       	adc	r25, r1
    1ebc:	96 95       	lsr	r25
    1ebe:	87 95       	ror	r24
    1ec0:	97 f9       	bld	r25, 7
    1ec2:	08 95       	ret

00001ec4 <__fp_pscA>:
    1ec4:	00 24       	eor	r0, r0
    1ec6:	0a 94       	dec	r0
    1ec8:	16 16       	cp	r1, r22
    1eca:	17 06       	cpc	r1, r23
    1ecc:	18 06       	cpc	r1, r24
    1ece:	09 06       	cpc	r0, r25
    1ed0:	08 95       	ret

00001ed2 <__fp_pscB>:
    1ed2:	00 24       	eor	r0, r0
    1ed4:	0a 94       	dec	r0
    1ed6:	12 16       	cp	r1, r18
    1ed8:	13 06       	cpc	r1, r19
    1eda:	14 06       	cpc	r1, r20
    1edc:	05 06       	cpc	r0, r21
    1ede:	08 95       	ret

00001ee0 <__fp_round>:
    1ee0:	09 2e       	mov	r0, r25
    1ee2:	03 94       	inc	r0
    1ee4:	00 0c       	add	r0, r0
    1ee6:	11 f4       	brne	.+4      	; 0x1eec <__fp_round+0xc>
    1ee8:	88 23       	and	r24, r24
    1eea:	52 f0       	brmi	.+20     	; 0x1f00 <__fp_round+0x20>
    1eec:	bb 0f       	add	r27, r27
    1eee:	40 f4       	brcc	.+16     	; 0x1f00 <__fp_round+0x20>
    1ef0:	bf 2b       	or	r27, r31
    1ef2:	11 f4       	brne	.+4      	; 0x1ef8 <__fp_round+0x18>
    1ef4:	60 ff       	sbrs	r22, 0
    1ef6:	04 c0       	rjmp	.+8      	; 0x1f00 <__fp_round+0x20>
    1ef8:	6f 5f       	subi	r22, 0xFF	; 255
    1efa:	7f 4f       	sbci	r23, 0xFF	; 255
    1efc:	8f 4f       	sbci	r24, 0xFF	; 255
    1efe:	9f 4f       	sbci	r25, 0xFF	; 255
    1f00:	08 95       	ret

00001f02 <__udivmodsi4>:
    1f02:	a1 e2       	ldi	r26, 0x21	; 33
    1f04:	1a 2e       	mov	r1, r26
    1f06:	aa 1b       	sub	r26, r26
    1f08:	bb 1b       	sub	r27, r27
    1f0a:	fd 01       	movw	r30, r26
    1f0c:	0d c0       	rjmp	.+26     	; 0x1f28 <__udivmodsi4_ep>

00001f0e <__udivmodsi4_loop>:
    1f0e:	aa 1f       	adc	r26, r26
    1f10:	bb 1f       	adc	r27, r27
    1f12:	ee 1f       	adc	r30, r30
    1f14:	ff 1f       	adc	r31, r31
    1f16:	a2 17       	cp	r26, r18
    1f18:	b3 07       	cpc	r27, r19
    1f1a:	e4 07       	cpc	r30, r20
    1f1c:	f5 07       	cpc	r31, r21
    1f1e:	20 f0       	brcs	.+8      	; 0x1f28 <__udivmodsi4_ep>
    1f20:	a2 1b       	sub	r26, r18
    1f22:	b3 0b       	sbc	r27, r19
    1f24:	e4 0b       	sbc	r30, r20
    1f26:	f5 0b       	sbc	r31, r21

00001f28 <__udivmodsi4_ep>:
    1f28:	66 1f       	adc	r22, r22
    1f2a:	77 1f       	adc	r23, r23
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	1a 94       	dec	r1
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <__udivmodsi4_loop>
    1f34:	60 95       	com	r22
    1f36:	70 95       	com	r23
    1f38:	80 95       	com	r24
    1f3a:	90 95       	com	r25
    1f3c:	9b 01       	movw	r18, r22
    1f3e:	ac 01       	movw	r20, r24
    1f40:	bd 01       	movw	r22, r26
    1f42:	cf 01       	movw	r24, r30
    1f44:	08 95       	ret

00001f46 <__ashrdi3>:
    1f46:	97 fb       	bst	r25, 7
    1f48:	10 f8       	bld	r1, 0

00001f4a <__lshrdi3>:
    1f4a:	16 94       	lsr	r1
    1f4c:	00 08       	sbc	r0, r0
    1f4e:	0f 93       	push	r16
    1f50:	08 30       	cpi	r16, 0x08	; 8
    1f52:	98 f0       	brcs	.+38     	; 0x1f7a <__lshrdi3+0x30>
    1f54:	08 50       	subi	r16, 0x08	; 8
    1f56:	23 2f       	mov	r18, r19
    1f58:	34 2f       	mov	r19, r20
    1f5a:	45 2f       	mov	r20, r21
    1f5c:	56 2f       	mov	r21, r22
    1f5e:	67 2f       	mov	r22, r23
    1f60:	78 2f       	mov	r23, r24
    1f62:	89 2f       	mov	r24, r25
    1f64:	90 2d       	mov	r25, r0
    1f66:	f4 cf       	rjmp	.-24     	; 0x1f50 <__lshrdi3+0x6>
    1f68:	05 94       	asr	r0
    1f6a:	97 95       	ror	r25
    1f6c:	87 95       	ror	r24
    1f6e:	77 95       	ror	r23
    1f70:	67 95       	ror	r22
    1f72:	57 95       	ror	r21
    1f74:	47 95       	ror	r20
    1f76:	37 95       	ror	r19
    1f78:	27 95       	ror	r18
    1f7a:	0a 95       	dec	r16
    1f7c:	aa f7       	brpl	.-22     	; 0x1f68 <__lshrdi3+0x1e>
    1f7e:	0f 91       	pop	r16
    1f80:	08 95       	ret

00001f82 <__adddi3>:
    1f82:	2a 0d       	add	r18, r10
    1f84:	3b 1d       	adc	r19, r11
    1f86:	4c 1d       	adc	r20, r12
    1f88:	5d 1d       	adc	r21, r13
    1f8a:	6e 1d       	adc	r22, r14
    1f8c:	7f 1d       	adc	r23, r15
    1f8e:	80 1f       	adc	r24, r16
    1f90:	91 1f       	adc	r25, r17
    1f92:	08 95       	ret

00001f94 <__subdi3>:
    1f94:	2a 19       	sub	r18, r10
    1f96:	3b 09       	sbc	r19, r11
    1f98:	4c 09       	sbc	r20, r12
    1f9a:	5d 09       	sbc	r21, r13
    1f9c:	6e 09       	sbc	r22, r14
    1f9e:	7f 09       	sbc	r23, r15
    1fa0:	80 0b       	sbc	r24, r16
    1fa2:	91 0b       	sbc	r25, r17
    1fa4:	08 95       	ret

00001fa6 <__cmpdi2>:
    1fa6:	2a 15       	cp	r18, r10
    1fa8:	3b 05       	cpc	r19, r11
    1faa:	4c 05       	cpc	r20, r12
    1fac:	5d 05       	cpc	r21, r13
    1fae:	6e 05       	cpc	r22, r14
    1fb0:	7f 05       	cpc	r23, r15
    1fb2:	80 07       	cpc	r24, r16
    1fb4:	91 07       	cpc	r25, r17
    1fb6:	08 95       	ret

00001fb8 <memcpy>:
    1fb8:	fb 01       	movw	r30, r22
    1fba:	dc 01       	movw	r26, r24
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <memcpy+0xa>
    1fbe:	01 90       	ld	r0, Z+
    1fc0:	0d 92       	st	X+, r0
    1fc2:	41 50       	subi	r20, 0x01	; 1
    1fc4:	50 40       	sbci	r21, 0x00	; 0
    1fc6:	d8 f7       	brcc	.-10     	; 0x1fbe <memcpy+0x6>
    1fc8:	08 95       	ret

00001fca <_exit>:
    1fca:	f8 94       	cli

00001fcc <__stop_program>:
    1fcc:	ff cf       	rjmp	.-2      	; 0x1fcc <__stop_program>
