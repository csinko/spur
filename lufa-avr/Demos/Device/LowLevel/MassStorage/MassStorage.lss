
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00001754  000017e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001754  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800144  00800144  0000182c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001840  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000840b  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000222c  00000000  00000000  00009f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000042ab  00000000  00000000  0000c18f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000920  00000000  00000000  0001043c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000269b  00000000  00000000  00010d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000044fc  00000000  00000000  000133f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000700  00000000  00000000  000178f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
       2:	00 00       	nop
       4:	af c0       	rjmp	.+350    	; 0x164 <__bad_interrupt>
       6:	00 00       	nop
       8:	ad c0       	rjmp	.+346    	; 0x164 <__bad_interrupt>
       a:	00 00       	nop
       c:	ab c0       	rjmp	.+342    	; 0x164 <__bad_interrupt>
       e:	00 00       	nop
      10:	a9 c0       	rjmp	.+338    	; 0x164 <__bad_interrupt>
      12:	00 00       	nop
      14:	a7 c0       	rjmp	.+334    	; 0x164 <__bad_interrupt>
      16:	00 00       	nop
      18:	a5 c0       	rjmp	.+330    	; 0x164 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a3 c0       	rjmp	.+326    	; 0x164 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a1 c0       	rjmp	.+322    	; 0x164 <__bad_interrupt>
      22:	00 00       	nop
      24:	9f c0       	rjmp	.+318    	; 0x164 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__vector_10>
      2c:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <__vector_11>
      30:	99 c0       	rjmp	.+306    	; 0x164 <__bad_interrupt>
      32:	00 00       	nop
      34:	97 c0       	rjmp	.+302    	; 0x164 <__bad_interrupt>
      36:	00 00       	nop
      38:	95 c0       	rjmp	.+298    	; 0x164 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	93 c0       	rjmp	.+294    	; 0x164 <__bad_interrupt>
      3e:	00 00       	nop
      40:	91 c0       	rjmp	.+290    	; 0x164 <__bad_interrupt>
      42:	00 00       	nop
      44:	8f c0       	rjmp	.+286    	; 0x164 <__bad_interrupt>
      46:	00 00       	nop
      48:	8d c0       	rjmp	.+282    	; 0x164 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8b c0       	rjmp	.+278    	; 0x164 <__bad_interrupt>
      4e:	00 00       	nop
      50:	89 c0       	rjmp	.+274    	; 0x164 <__bad_interrupt>
      52:	00 00       	nop
      54:	87 c0       	rjmp	.+270    	; 0x164 <__bad_interrupt>
      56:	00 00       	nop
      58:	85 c0       	rjmp	.+266    	; 0x164 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	83 c0       	rjmp	.+262    	; 0x164 <__bad_interrupt>
      5e:	00 00       	nop
      60:	81 c0       	rjmp	.+258    	; 0x164 <__bad_interrupt>
      62:	00 00       	nop
      64:	7f c0       	rjmp	.+254    	; 0x164 <__bad_interrupt>
      66:	00 00       	nop
      68:	7d c0       	rjmp	.+250    	; 0x164 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	7b c0       	rjmp	.+246    	; 0x164 <__bad_interrupt>
      6e:	00 00       	nop
      70:	79 c0       	rjmp	.+242    	; 0x164 <__bad_interrupt>
      72:	00 00       	nop
      74:	77 c0       	rjmp	.+238    	; 0x164 <__bad_interrupt>
      76:	00 00       	nop
      78:	75 c0       	rjmp	.+234    	; 0x164 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	73 c0       	rjmp	.+230    	; 0x164 <__bad_interrupt>
      7e:	00 00       	nop
      80:	71 c0       	rjmp	.+226    	; 0x164 <__bad_interrupt>
      82:	00 00       	nop
      84:	6f c0       	rjmp	.+222    	; 0x164 <__bad_interrupt>
      86:	00 00       	nop
      88:	6d c0       	rjmp	.+218    	; 0x164 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6b c0       	rjmp	.+214    	; 0x164 <__bad_interrupt>
      8e:	00 00       	nop
      90:	69 c0       	rjmp	.+210    	; 0x164 <__bad_interrupt>
      92:	00 00       	nop
      94:	67 c0       	rjmp	.+206    	; 0x164 <__bad_interrupt>
      96:	00 00       	nop
      98:	65 c0       	rjmp	.+202    	; 0x164 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	63 c0       	rjmp	.+198    	; 0x164 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	61 c0       	rjmp	.+194    	; 0x164 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	5f c0       	rjmp	.+190    	; 0x164 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	5d c0       	rjmp	.+186    	; 0x164 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      bc:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      cc:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000dc <ManufacturerString>:
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
      fa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
     10a:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

0000011a <DeviceDescriptor>:
     11a:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     12a:	dc 01                                               ..

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	da e0       	ldi	r29, 0x0A	; 10
     134:	de bf       	out	0x3e, r29	; 62
     136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	e4 e5       	ldi	r30, 0x54	; 84
     140:	f7 e1       	ldi	r31, 0x17	; 23
     142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
     144:	05 90       	lpm	r0, Z+
     146:	0d 92       	st	X+, r0
     148:	a4 34       	cpi	r26, 0x44	; 68
     14a:	b1 07       	cpc	r27, r17
     14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
     14e:	21 e0       	ldi	r18, 0x01	; 1
     150:	a4 e4       	ldi	r26, 0x44	; 68
     152:	b1 e0       	ldi	r27, 0x01	; 1
     154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
     156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
     158:	a1 37       	cpi	r26, 0x71	; 113
     15a:	b2 07       	cpc	r27, r18
     15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
     15e:	7c d1       	rcall	.+760    	; 0x458 <main>
     160:	0c 94 a8 0b 	jmp	0x1750	; 0x1750 <_exit>

00000164 <__bad_interrupt>:
     164:	4d cf       	rjmp	.-358    	; 0x0 <__vectors>

00000166 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     166:	9b b1       	in	r25, 0x0b	; 11
     168:	9f 70       	andi	r25, 0x0F	; 15
     16a:	89 2b       	or	r24, r25
     16c:	8b b9       	out	0x0b, r24	; 11
     16e:	08 95       	ret

00000170 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     170:	84 b7       	in	r24, 0x34	; 52
     172:	87 7f       	andi	r24, 0xF7	; 247
     174:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     176:	0f b6       	in	r0, 0x3f	; 63
     178:	f8 94       	cli
     17a:	a8 95       	wdr
     17c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     180:	88 61       	ori	r24, 0x18	; 24
     182:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     186:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     18a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	80 e8       	ldi	r24, 0x80	; 128
     190:	0f b6       	in	r0, 0x3f	; 63
     192:	f8 94       	cli
     194:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     198:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     19c:	0f be       	out	0x3f, r0	; 63
				DDRD  |=  LEDS_ALL_LEDS;
     19e:	8a b1       	in	r24, 0x0a	; 10
     1a0:	80 6f       	ori	r24, 0xF0	; 240
     1a2:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     1a4:	8b b1       	in	r24, 0x0b	; 11
     1a6:	8f 70       	andi	r24, 0x0F	; 15
     1a8:	8b b9       	out	0x0b, r24	; 11
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The appropriate SPI interface will be automatically configured.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     1aa:	8d b1       	in	r24, 0x0d	; 13
     1ac:	83 60       	ori	r24, 0x03	; 3
     1ae:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1b0:	8e b1       	in	r24, 0x0e	; 14
     1b2:	83 60       	ori	r24, 0x03	; 3
     1b4:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void SPI_Init(const uint8_t SPIOptions);
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     1b6:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     1b8:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     1ba:	84 b1       	in	r24, 0x04	; 4
     1bc:	86 60       	ori	r24, 0x06	; 6
     1be:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     1c0:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     1c2:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1c4:	8d b5       	in	r24, 0x2d	; 45
     1c6:	81 60       	ori	r24, 0x01	; 1
     1c8:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     1ca:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     1cc:	8c e5       	ldi	r24, 0x5C	; 92
     1ce:	8c bd       	out	0x2c, r24	; 44
#endif

	/* Hardware Initialization */
	LEDs_Init();
	Dataflash_Init();
	USB_Init();
     1d0:	0e 94 0f 09 	call	0x121e	; 0x121e <USB_Init>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     1d4:	44 d4       	rcall	.+2184   	; 0xa5e <DataflashManager_CheckDataflashOperation>
     1d6:	81 11       	cpse	r24, r1
     1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <SetupHardware+0x70>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     1da:	80 e9       	ldi	r24, 0x90	; 144
     1dc:	c4 df       	rcall	.-120    	; 0x166 <LEDs_SetAllLEDs>
     1de:	ff cf       	rjmp	.-2      	; 0x1de <SetupHardware+0x6e>
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     1e0:	ee c3       	rjmp	.+2012   	; 0x9be <DataflashManager_ResetDataflashProtections>

000001e2 <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1e2:	80 ea       	ldi	r24, 0xA0	; 160
     1e4:	c0 df       	rcall	.-128    	; 0x166 <LEDs_SetAllLEDs>

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     1e6:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
     1ea:	08 95       	ret

000001ec <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1ec:	80 e1       	ldi	r24, 0x10	; 16
     1ee:	bb cf       	rjmp	.-138    	; 0x166 <LEDs_SetAllLEDs>

000001f0 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     1f0:	cf 93       	push	r28
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     1f2:	42 e3       	ldi	r20, 0x32	; 50
     1f4:	61 e8       	ldi	r22, 0x81	; 129
     1f6:	83 e0       	ldi	r24, 0x03	; 3
     1f8:	4f d7       	rcall	.+3742   	; 0x1098 <Endpoint_ConfigureEndpoint_Prv>
     1fa:	c8 2f       	mov	r28, r24
     1fc:	42 e3       	ldi	r20, 0x32	; 50
     1fe:	60 e8       	ldi	r22, 0x80	; 128
     200:	84 e0       	ldi	r24, 0x04	; 4
     202:	4a d7       	rcall	.+3732   	; 0x1098 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     204:	88 23       	and	r24, r24
     206:	11 f0       	breq	.+4      	; 0x20c <EVENT_USB_Device_ConfigurationChanged+0x1c>
     208:	c1 11       	cpse	r28, r1
     20a:	03 c0       	rjmp	.+6      	; 0x212 <EVENT_USB_Device_ConfigurationChanged+0x22>
     20c:	80 e9       	ldi	r24, 0x90	; 144
}
     20e:	cf 91       	pop	r28
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     210:	aa cf       	rjmp	.-172    	; 0x166 <LEDs_SetAllLEDs>
     212:	80 e6       	ldi	r24, 0x60	; 96
     214:	fc cf       	rjmp	.-8      	; 0x20e <EVENT_USB_Device_ConfigurationChanged+0x1e>

00000216 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     216:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <USB_ControlRequest+0x1>
     21a:	8e 3f       	cpi	r24, 0xFE	; 254
     21c:	81 f0       	breq	.+32     	; 0x23e <EVENT_USB_Device_ControlRequest+0x28>
     21e:	8f 3f       	cpi	r24, 0xFF	; 255
     220:	f9 f4       	brne	.+62     	; 0x260 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     222:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <USB_ControlRequest>
     226:	81 32       	cpi	r24, 0x21	; 33
     228:	d9 f4       	brne	.+54     	; 0x260 <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     22a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     22e:	87 7f       	andi	r24, 0xF7	; 247
     230:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     234:	66 d7       	rcall	.+3788   	; 0x1102 <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
     23c:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     23e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <USB_ControlRequest>
     242:	81 3a       	cpi	r24, 0xA1	; 161
     244:	69 f4       	brne	.+26     	; 0x260 <EVENT_USB_Device_ControlRequest+0x4a>
     246:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     24a:	87 7f       	andi	r24, 0xF7	; 247
     24c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     250:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     254:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     258:	8e 77       	andi	r24, 0x7E	; 126
     25a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     25e:	51 c7       	rjmp	.+3746   	; 0x1102 <Endpoint_ClearStatusStage>
     260:	08 95       	ret

00000262 <MassStorage_Task>:

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	00 d0       	rcall	.+0      	; 0x268 <MassStorage_Task+0x6>
     268:	cd b7       	in	r28, 0x3d	; 61
     26a:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     26c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
     270:	84 30       	cpi	r24, 0x04	; 4
     272:	09 f0       	breq	.+2      	; 0x276 <MassStorage_Task+0x14>
     274:	69 c0       	rjmp	.+210    	; 0x348 <MassStorage_Task+0xe6>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     276:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     27a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     27e:	82 ff       	sbrs	r24, 2
     280:	39 c0       	rjmp	.+114    	; 0x2f4 <MassStorage_Task+0x92>
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
     282:	1a 82       	std	Y+2, r1	; 0x02
     284:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     286:	ae 01       	movw	r20, r28
     288:	4f 5f       	subi	r20, 0xFF	; 255
     28a:	5f 4f       	sbci	r21, 0xFF	; 255
     28c:	6f e0       	ldi	r22, 0x0F	; 15
     28e:	70 e0       	ldi	r23, 0x00	; 0
     290:	85 e4       	ldi	r24, 0x45	; 69
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	f9 d5       	rcall	.+3058   	; 0xe88 <Endpoint_Read_Stream_LE>
     296:	85 30       	cpi	r24, 0x05	; 5
     298:	49 f1       	breq	.+82     	; 0x2ec <MassStorage_Task+0x8a>
		if (IsMassStoreReset)
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     29a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <CommandBlock>
     29e:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <CommandBlock+0x1>
     2a2:	a0 91 47 01 	lds	r26, 0x0147	; 0x800147 <CommandBlock+0x2>
     2a6:	b0 91 48 01 	lds	r27, 0x0148	; 0x800148 <CommandBlock+0x3>
     2aa:	85 35       	cpi	r24, 0x55	; 85
     2ac:	93 45       	sbci	r25, 0x53	; 83
     2ae:	a2 44       	sbci	r26, 0x42	; 66
     2b0:	b3 44       	sbci	r27, 0x43	; 67
     2b2:	71 f4       	brne	.+28     	; 0x2d0 <MassStorage_Task+0x6e>
     2b4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <CommandBlock+0xd>
     2b8:	81 11       	cpse	r24, r1
     2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <MassStorage_Task+0x6e>
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
     2bc:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <CommandBlock+0xc>
     2c0:	8f 71       	andi	r24, 0x1F	; 31
     2c2:	31 f4       	brne	.+12     	; 0x2d0 <MassStorage_Task+0x6e>
		(CommandBlock.Flags              & 0x1F)             ||
     2c4:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <CommandBlock+0xe>
     2c8:	81 50       	subi	r24, 0x01	; 1
     2ca:	80 31       	cpi	r24, 0x10	; 16
     2cc:	08 f4       	brcc	.+2      	; 0x2d0 <MassStorage_Task+0x6e>
     2ce:	41 c0       	rjmp	.+130    	; 0x352 <MassStorage_Task+0xf0>
				UECONX |= (1 << STALLRQ);
     2d0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2d4:	80 62       	ori	r24, 0x20	; 32
     2d6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2da:	83 e0       	ldi	r24, 0x03	; 3
     2dc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQ);
     2e0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2e4:	80 62       	ori	r24, 0x20	; 32
     2e6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2ea:	04 c0       	rjmp	.+8      	; 0x2f4 <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     2ec:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     2f0:	88 23       	and	r24, r24
     2f2:	49 f2       	breq	.-110    	; 0x286 <MassStorage_Task+0x24>
	if (IsMassStoreReset)
     2f4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     2f8:	88 23       	and	r24, r24
     2fa:	31 f1       	breq	.+76     	; 0x348 <MassStorage_Task+0xe6>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2fc:	80 e1       	ldi	r24, 0x10	; 16
     2fe:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     302:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     306:	88 e0       	ldi	r24, 0x08	; 8
     308:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     30c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     310:	84 e0       	ldi	r24, 0x04	; 4
     312:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     316:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     31a:	80 61       	ori	r24, 0x10	; 16
     31c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     320:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     324:	88 60       	ori	r24, 0x08	; 8
     326:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     330:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     334:	80 61       	ori	r24, 0x10	; 16
     336:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     33a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     33e:	88 60       	ori	r24, 0x08	; 8
     340:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		IsMassStoreReset = false;
     344:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
}
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

		return false;
	}

	/* Read in command block command data */
	BytesTransferred = 0;
     352:	1a 82       	std	Y+2, r1	; 0x02
     354:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     356:	60 91 53 01 	lds	r22, 0x0153	; 0x800153 <CommandBlock+0xe>
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	ae 01       	movw	r20, r28
     35e:	4f 5f       	subi	r20, 0xFF	; 255
     360:	5f 4f       	sbci	r21, 0xFF	; 255
     362:	84 e5       	ldi	r24, 0x54	; 84
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	90 d5       	rcall	.+2848   	; 0xe88 <Endpoint_Read_Stream_LE>
     368:	85 30       	cpi	r24, 0x05	; 5
     36a:	09 f4       	brne	.+2      	; 0x36e <MassStorage_Task+0x10c>
     36c:	5e c0       	rjmp	.+188    	; 0x42a <__FUSE_REGION_LENGTH__+0x2a>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     36e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     372:	8b 77       	andi	r24, 0x7B	; 123
     374:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     378:	80 e2       	ldi	r24, 0x20	; 32
     37a:	f5 de       	rcall	.-534    	; 0x166 <LEDs_SetAllLEDs>
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     37c:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <CommandBlock+0xc>
     380:	87 ff       	sbrs	r24, 7
     382:	03 c0       	rjmp	.+6      	; 0x38a <MassStorage_Task+0x128>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     384:	83 e0       	ldi	r24, 0x03	; 3
     386:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     38a:	de d3       	rcall	.+1980   	; 0xb48 <SCSI_DecodeSCSICommand>
     38c:	91 e0       	ldi	r25, 0x01	; 1
     38e:	89 27       	eor	r24, r25
     390:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <CommandStatus+0xc>
		CommandStatus.Tag = CommandBlock.Tag;
     394:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <CommandBlock+0x4>
     398:	50 91 4a 01 	lds	r21, 0x014A	; 0x80014a <CommandBlock+0x5>
     39c:	60 91 4b 01 	lds	r22, 0x014B	; 0x80014b <CommandBlock+0x6>
     3a0:	70 91 4c 01 	lds	r23, 0x014C	; 0x80014c <CommandBlock+0x7>
     3a4:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <CommandStatus+0x4>
     3a8:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <CommandStatus+0x5>
     3ac:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <CommandStatus+0x6>
     3b0:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <CommandStatus+0x7>
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     3b4:	40 91 4d 01 	lds	r20, 0x014D	; 0x80014d <CommandBlock+0x8>
     3b8:	50 91 4e 01 	lds	r21, 0x014E	; 0x80014e <CommandBlock+0x9>
     3bc:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <CommandBlock+0xa>
     3c0:	70 91 50 01 	lds	r23, 0x0150	; 0x800150 <CommandBlock+0xb>
     3c4:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <CommandStatus+0x8>
     3c8:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <CommandStatus+0x9>
     3cc:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <CommandStatus+0xa>
     3d0:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <CommandStatus+0xb>
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     3d4:	88 23       	and	r24, r24
     3d6:	49 f0       	breq	.+18     	; 0x3ea <MassStorage_Task+0x188>
     3d8:	45 2b       	or	r20, r21
     3da:	46 2b       	or	r20, r22
     3dc:	47 2b       	or	r20, r23
     3de:	29 f0       	breq	.+10     	; 0x3ea <MassStorage_Task+0x188>
				UECONX |= (1 << STALLRQ);
     3e0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     3e4:	80 62       	ori	r24, 0x20	; 32
     3e6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3ea:	84 e0       	ldi	r24, 0x04	; 4
     3ec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3f0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3f4:	85 fd       	sbrc	r24, 5
     3f6:	1f c0       	rjmp	.+62     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3f8:	83 e0       	ldi	r24, 0x03	; 3
     3fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3fe:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     402:	85 fd       	sbrc	r24, 5
     404:	1f c0       	rjmp	.+62     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
     406:	1a 82       	std	Y+2, r1	; 0x02
     408:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     40a:	ae 01       	movw	r20, r28
     40c:	4f 5f       	subi	r20, 0xFF	; 255
     40e:	5f 4f       	sbci	r21, 0xFF	; 255
     410:	6d e0       	ldi	r22, 0x0D	; 13
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	ea d4       	rcall	.+2516   	; 0xdee <Endpoint_Write_Stream_LE>
     41a:	85 30       	cpi	r24, 0x05	; 5
     41c:	c1 f0       	breq	.+48     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     41e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     422:	8e 77       	andi	r24, 0x7E	; 126
     424:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     428:	0a c0       	rjmp	.+20     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
		if (IsMassStoreReset)
     42a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     42e:	88 23       	and	r24, r24
     430:	09 f4       	brne	.+2      	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
     432:	91 cf       	rjmp	.-222    	; 0x356 <MassStorage_Task+0xf4>
     434:	5f cf       	rjmp	.-322    	; 0x2f4 <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     436:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     43a:	88 23       	and	r24, r24
     43c:	c9 f2       	breq	.-78     	; 0x3f0 <MassStorage_Task+0x18e>
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     43e:	80 e6       	ldi	r24, 0x60	; 96
     440:	92 de       	rcall	.-732    	; 0x166 <LEDs_SetAllLEDs>
     442:	58 cf       	rjmp	.-336    	; 0x2f4 <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     444:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     448:	88 23       	and	r24, r24
     44a:	c9 f2       	breq	.-78     	; 0x3fe <MassStorage_Task+0x19c>
     44c:	f8 cf       	rjmp	.-16     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     44e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     452:	88 23       	and	r24, r24
     454:	d1 f2       	breq	.-76     	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
     456:	f3 cf       	rjmp	.-26     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>

00000458 <main>:
	SetupHardware();
     458:	8b de       	rcall	.-746    	; 0x170 <SetupHardware>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     45a:	80 e1       	ldi	r24, 0x10	; 16
     45c:	84 de       	rcall	.-760    	; 0x166 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     45e:	78 94       	sei
		MassStorage_Task();
     460:	00 df       	rcall	.-512    	; 0x262 <MassStorage_Task>
		USB_USBTask();
     462:	0e 94 8d 0b 	call	0x171a	; 0x171a <USB_USBTask>
     466:	fc cf       	rjmp	.-8      	; 0x460 <main+0x8>

00000468 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     468:	29 2f       	mov	r18, r25
     46a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     46c:	22 30       	cpi	r18, 0x02	; 2
     46e:	31 05       	cpc	r19, r1
     470:	71 f0       	breq	.+28     	; 0x48e <CALLBACK_USB_GetDescriptor+0x26>
     472:	23 30       	cpi	r18, 0x03	; 3
     474:	31 05       	cpc	r19, r1
     476:	81 f0       	breq	.+32     	; 0x498 <CALLBACK_USB_GetDescriptor+0x30>
     478:	21 30       	cpi	r18, 0x01	; 1
     47a:	31 05       	cpc	r19, r1
     47c:	a1 f4       	brne	.+40     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     47e:	82 e1       	ldi	r24, 0x12	; 18
     480:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     482:	2a e1       	ldi	r18, 0x1A	; 26
     484:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     486:	fa 01       	movw	r30, r20
     488:	31 83       	std	Z+1, r19	; 0x01
     48a:	20 83       	st	Z, r18
	return Size;
}
     48c:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
     48e:	80 e2       	ldi	r24, 0x20	; 32
     490:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     492:	2a ef       	ldi	r18, 0xFA	; 250
     494:	30 e0       	ldi	r19, 0x00	; 0
			break;
     496:	f7 cf       	rjmp	.-18     	; 0x486 <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
     498:	99 27       	eor	r25, r25
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	91 05       	cpc	r25, r1
     49e:	71 f0       	breq	.+28     	; 0x4bc <CALLBACK_USB_GetDescriptor+0x54>
     4a0:	38 f0       	brcs	.+14     	; 0x4b0 <CALLBACK_USB_GetDescriptor+0x48>
     4a2:	02 97       	sbiw	r24, 0x02	; 2
     4a4:	71 f0       	breq	.+28     	; 0x4c2 <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
	const void* Address = NULL;
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	eb cf       	rjmp	.-42     	; 0x486 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4b0:	e6 ef       	ldi	r30, 0xF6	; 246
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4b4:	84 91       	lpm	r24, Z
     4b6:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     4b8:	9f 01       	movw	r18, r30
					break;
     4ba:	e5 cf       	rjmp	.-54     	; 0x486 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4bc:	ec ed       	ldi	r30, 0xDC	; 220
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	f9 cf       	rjmp	.-14     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4c2:	ec ea       	ldi	r30, 0xAC	; 172
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	f6 cf       	rjmp	.-20     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x4c>

000004c8 <Dataflash_ToggleSelectedChipCS>:
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     4c8:	8e b1       	in	r24, 0x0e	; 14
     4ca:	9e b1       	in	r25, 0x0e	; 14
     4cc:	93 60       	ori	r25, 0x03	; 3
     4ce:	9e b9       	out	0x0e, r25	; 14
     4d0:	9e b1       	in	r25, 0x0e	; 14
     4d2:	8c 6f       	ori	r24, 0xFC	; 252
     4d4:	93 60       	ori	r25, 0x03	; 3
     4d6:	89 23       	and	r24, r25
     4d8:	8e b9       	out	0x0e, r24	; 14
     4da:	08 95       	ret

000004dc <Dataflash_WaitWhileBusy>:
     4dc:	f5 df       	rcall	.-22     	; 0x4c8 <Dataflash_ToggleSelectedChipCS>
     4de:	87 ed       	ldi	r24, 0xD7	; 215
     4e0:	8e bd       	out	0x2e, r24	; 46
     4e2:	0d b4       	in	r0, 0x2d	; 45
     4e4:	07 fe       	sbrs	r0, 7
     4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <Dataflash_WaitWhileBusy+0x6>
     4e8:	1e bc       	out	0x2e, r1	; 46
     4ea:	0d b4       	in	r0, 0x2d	; 45
     4ec:	07 fe       	sbrs	r0, 7
     4ee:	fd cf       	rjmp	.-6      	; 0x4ea <Dataflash_WaitWhileBusy+0xe>
     4f0:	0e b4       	in	r0, 0x2e	; 46
     4f2:	07 fe       	sbrs	r0, 7
     4f4:	f9 cf       	rjmp	.-14     	; 0x4e8 <Dataflash_WaitWhileBusy+0xc>
     4f6:	e8 cf       	rjmp	.-48     	; 0x4c8 <Dataflash_ToggleSelectedChipCS>

000004f8 <Dataflash_SendAddressBytes>:
     4f8:	9c 01       	movw	r18, r24
     4fa:	36 95       	lsr	r19
     4fc:	27 95       	ror	r18
     4fe:	56 e0       	ldi	r21, 0x06	; 6
     500:	96 95       	lsr	r25
     502:	87 95       	ror	r24
     504:	5a 95       	dec	r21
     506:	e1 f7       	brne	.-8      	; 0x500 <Dataflash_SendAddressBytes+0x8>
     508:	8e bd       	out	0x2e, r24	; 46
     50a:	0d b4       	in	r0, 0x2d	; 45
     50c:	07 fe       	sbrs	r0, 7
     50e:	fd cf       	rjmp	.-6      	; 0x50a <Dataflash_SendAddressBytes+0x12>
     510:	22 0f       	add	r18, r18
     512:	22 0f       	add	r18, r18
     514:	22 0f       	add	r18, r18
     516:	72 2b       	or	r23, r18
     518:	7e bd       	out	0x2e, r23	; 46
     51a:	0d b4       	in	r0, 0x2d	; 45
     51c:	07 fe       	sbrs	r0, 7
     51e:	fd cf       	rjmp	.-6      	; 0x51a <Dataflash_SendAddressBytes+0x22>
     520:	6e bd       	out	0x2e, r22	; 46
     522:	0d b4       	in	r0, 0x2d	; 45
     524:	07 fe       	sbrs	r0, 7
     526:	fd cf       	rjmp	.-6      	; 0x522 <Dataflash_SendAddressBytes+0x2a>
     528:	08 95       	ret

0000052a <Dataflash_SelectChipFromPage>:
     52a:	9c 01       	movw	r18, r24
     52c:	9e b1       	in	r25, 0x0e	; 14
     52e:	93 60       	ori	r25, 0x03	; 3
     530:	9e b9       	out	0x0e, r25	; 14
     532:	21 15       	cp	r18, r1
     534:	80 e4       	ldi	r24, 0x40	; 64
     536:	38 07       	cpc	r19, r24
     538:	30 f4       	brcc	.+12     	; 0x546 <Dataflash_SelectChipFromPage+0x1c>
     53a:	8e b1       	in	r24, 0x0e	; 14
     53c:	83 60       	ori	r24, 0x03	; 3
     53e:	20 ff       	sbrs	r18, 0
     540:	03 c0       	rjmp	.+6      	; 0x548 <Dataflash_SelectChipFromPage+0x1e>
     542:	8d 7f       	andi	r24, 0xFD	; 253
     544:	8e b9       	out	0x0e, r24	; 14
     546:	08 95       	ret
     548:	8e 7f       	andi	r24, 0xFE	; 254
     54a:	fc cf       	rjmp	.-8      	; 0x544 <Dataflash_SelectChipFromPage+0x1a>

0000054c <DataflashManager_WriteBlocks>:
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	8a 01       	movw	r16, r20
     562:	4b 01       	movw	r8, r22
     564:	5c 01       	movw	r10, r24
     566:	39 e0       	ldi	r19, 0x09	; 9
     568:	88 0c       	add	r8, r8
     56a:	99 1c       	adc	r9, r9
     56c:	aa 1c       	adc	r10, r10
     56e:	bb 1c       	adc	r11, r11
     570:	3a 95       	dec	r19
     572:	d1 f7       	brne	.-12     	; 0x568 <DataflashManager_WriteBlocks+0x1c>
     574:	4a e0       	ldi	r20, 0x0A	; 10
     576:	b6 94       	lsr	r11
     578:	a7 94       	ror	r10
     57a:	97 94       	ror	r9
     57c:	87 94       	ror	r8
     57e:	4a 95       	dec	r20
     580:	d1 f7       	brne	.-12     	; 0x576 <DataflashManager_WriteBlocks+0x2a>
     582:	e4 01       	movw	r28, r8
     584:	76 2f       	mov	r23, r22
     586:	66 27       	eor	r22, r22
     588:	77 0f       	add	r23, r23
     58a:	7b 01       	movw	r14, r22
     58c:	ee 24       	eor	r14, r14
     58e:	82 e0       	ldi	r24, 0x02	; 2
     590:	f8 22       	and	r15, r24
     592:	c4 01       	movw	r24, r8
     594:	ca df       	rcall	.-108    	; 0x52a <Dataflash_SelectChipFromPage>
     596:	83 e5       	ldi	r24, 0x53	; 83
     598:	8e bd       	out	0x2e, r24	; 46
     59a:	0d b4       	in	r0, 0x2d	; 45
     59c:	07 fe       	sbrs	r0, 7
     59e:	fd cf       	rjmp	.-6      	; 0x59a <DataflashManager_WriteBlocks+0x4e>
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	c4 01       	movw	r24, r8
     5a6:	a8 df       	rcall	.-176    	; 0x4f8 <Dataflash_SendAddressBytes>
     5a8:	99 df       	rcall	.-206    	; 0x4dc <Dataflash_WaitWhileBusy>
     5aa:	84 e8       	ldi	r24, 0x84	; 132
     5ac:	8e bd       	out	0x2e, r24	; 46
     5ae:	0d b4       	in	r0, 0x2d	; 45
     5b0:	07 fe       	sbrs	r0, 7
     5b2:	fd cf       	rjmp	.-6      	; 0x5ae <DataflashManager_WriteBlocks+0x62>
     5b4:	b7 01       	movw	r22, r14
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	9e df       	rcall	.-196    	; 0x4f8 <Dataflash_SendAddressBytes>
     5bc:	c1 d5       	rcall	.+2946   	; 0x1140 <Endpoint_WaitUntilReady>
     5be:	81 11       	cpse	r24, r1
     5c0:	df c0       	rjmp	.+446    	; 0x780 <DataflashManager_WriteBlocks+0x234>
     5c2:	94 e0       	ldi	r25, 0x04	; 4
     5c4:	f6 94       	lsr	r15
     5c6:	e7 94       	ror	r14
     5c8:	9a 95       	dec	r25
     5ca:	e1 f7       	brne	.-8      	; 0x5c4 <DataflashManager_WriteBlocks+0x78>
     5cc:	fe 2c       	mov	r15, r14
     5ce:	58 01       	movw	r10, r16
     5d0:	25 e0       	ldi	r18, 0x05	; 5
     5d2:	aa 0c       	add	r10, r10
     5d4:	bb 1c       	adc	r11, r11
     5d6:	2a 95       	dec	r18
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <DataflashManager_WriteBlocks+0x86>
     5da:	e1 2c       	mov	r14, r1
     5dc:	88 24       	eor	r8, r8
     5de:	83 94       	inc	r8
     5e0:	01 15       	cp	r16, r1
     5e2:	11 05       	cpc	r17, r1
     5e4:	d1 f4       	brne	.+52     	; 0x61a <DataflashManager_WriteBlocks+0xce>
     5e6:	7a df       	rcall	.-268    	; 0x4dc <Dataflash_WaitWhileBusy>
     5e8:	e1 10       	cpse	r14, r1
     5ea:	db c0       	rjmp	.+438    	; 0x7a2 <DataflashManager_WriteBlocks+0x256>
     5ec:	83 e8       	ldi	r24, 0x83	; 131
     5ee:	8e bd       	out	0x2e, r24	; 46
     5f0:	0d b4       	in	r0, 0x2d	; 45
     5f2:	07 fe       	sbrs	r0, 7
     5f4:	fd cf       	rjmp	.-6      	; 0x5f0 <DataflashManager_WriteBlocks+0xa4>
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	ce 01       	movw	r24, r28
     5fc:	7d df       	rcall	.-262    	; 0x4f8 <Dataflash_SendAddressBytes>
     5fe:	6e df       	rcall	.-292    	; 0x4dc <Dataflash_WaitWhileBusy>
     600:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     604:	85 fd       	sbrc	r24, 5
     606:	05 c0       	rjmp	.+10     	; 0x612 <DataflashManager_WriteBlocks+0xc6>
     608:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     60c:	8b 77       	andi	r24, 0x7B	; 123
     60e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     612:	8e b1       	in	r24, 0x0e	; 14
     614:	83 60       	ori	r24, 0x03	; 3
     616:	8e b9       	out	0x0e, r24	; 14
     618:	b3 c0       	rjmp	.+358    	; 0x780 <DataflashManager_WriteBlocks+0x234>
     61a:	80 e2       	ldi	r24, 0x20	; 32
     61c:	98 2e       	mov	r9, r24
     61e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     622:	85 ff       	sbrs	r24, 5
     624:	a4 c0       	rjmp	.+328    	; 0x76e <DataflashManager_WriteBlocks+0x222>
     626:	80 e4       	ldi	r24, 0x40	; 64
     628:	f8 12       	cpse	r15, r24
     62a:	33 c0       	rjmp	.+102    	; 0x692 <DataflashManager_WriteBlocks+0x146>
     62c:	57 df       	rcall	.-338    	; 0x4dc <Dataflash_WaitWhileBusy>
     62e:	e1 10       	cpse	r14, r1
     630:	b2 c0       	rjmp	.+356    	; 0x796 <DataflashManager_WriteBlocks+0x24a>
     632:	83 e8       	ldi	r24, 0x83	; 131
     634:	8e bd       	out	0x2e, r24	; 46
     636:	0d b4       	in	r0, 0x2d	; 45
     638:	07 fe       	sbrs	r0, 7
     63a:	fd cf       	rjmp	.-6      	; 0x636 <DataflashManager_WriteBlocks+0xea>
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	ce 01       	movw	r24, r28
     642:	5a df       	rcall	.-332    	; 0x4f8 <Dataflash_SendAddressBytes>
     644:	21 96       	adiw	r28, 0x01	; 1
     646:	8e b1       	in	r24, 0x0e	; 14
     648:	80 95       	com	r24
     64a:	83 70       	andi	r24, 0x03	; 3
     64c:	82 30       	cpi	r24, 0x02	; 2
     64e:	09 f4       	brne	.+2      	; 0x652 <DataflashManager_WriteBlocks+0x106>
     650:	e8 24       	eor	r14, r8
     652:	ce 01       	movw	r24, r28
     654:	6a df       	rcall	.-300    	; 0x52a <Dataflash_SelectChipFromPage>
     656:	80 e4       	ldi	r24, 0x40	; 64
     658:	a8 16       	cp	r10, r24
     65a:	b1 04       	cpc	r11, r1
     65c:	68 f4       	brcc	.+26     	; 0x678 <DataflashManager_WriteBlocks+0x12c>
     65e:	3e df       	rcall	.-388    	; 0x4dc <Dataflash_WaitWhileBusy>
     660:	e1 10       	cpse	r14, r1
     662:	9b c0       	rjmp	.+310    	; 0x79a <DataflashManager_WriteBlocks+0x24e>
     664:	83 e5       	ldi	r24, 0x53	; 83
     666:	8e bd       	out	0x2e, r24	; 46
     668:	0d b4       	in	r0, 0x2d	; 45
     66a:	07 fe       	sbrs	r0, 7
     66c:	fd cf       	rjmp	.-6      	; 0x668 <DataflashManager_WriteBlocks+0x11c>
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	ce 01       	movw	r24, r28
     674:	41 df       	rcall	.-382    	; 0x4f8 <Dataflash_SendAddressBytes>
     676:	32 df       	rcall	.-412    	; 0x4dc <Dataflash_WaitWhileBusy>
     678:	e1 10       	cpse	r14, r1
     67a:	91 c0       	rjmp	.+290    	; 0x79e <DataflashManager_WriteBlocks+0x252>
     67c:	84 e8       	ldi	r24, 0x84	; 132
     67e:	8e bd       	out	0x2e, r24	; 46
     680:	0d b4       	in	r0, 0x2d	; 45
     682:	07 fe       	sbrs	r0, 7
     684:	fd cf       	rjmp	.-6      	; 0x680 <DataflashManager_WriteBlocks+0x134>
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	34 df       	rcall	.-408    	; 0x4f8 <Dataflash_SendAddressBytes>
     690:	f1 2c       	mov	r15, r1
     692:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     696:	8e bd       	out	0x2e, r24	; 46
     698:	0d b4       	in	r0, 0x2d	; 45
     69a:	07 fe       	sbrs	r0, 7
     69c:	fd cf       	rjmp	.-6      	; 0x698 <DataflashManager_WriteBlocks+0x14c>
     69e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6a2:	8e bd       	out	0x2e, r24	; 46
     6a4:	0d b4       	in	r0, 0x2d	; 45
     6a6:	07 fe       	sbrs	r0, 7
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <DataflashManager_WriteBlocks+0x158>
     6aa:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6ae:	8e bd       	out	0x2e, r24	; 46
     6b0:	0d b4       	in	r0, 0x2d	; 45
     6b2:	07 fe       	sbrs	r0, 7
     6b4:	fd cf       	rjmp	.-6      	; 0x6b0 <DataflashManager_WriteBlocks+0x164>
     6b6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6ba:	8e bd       	out	0x2e, r24	; 46
     6bc:	0d b4       	in	r0, 0x2d	; 45
     6be:	07 fe       	sbrs	r0, 7
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <DataflashManager_WriteBlocks+0x170>
     6c2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6c6:	8e bd       	out	0x2e, r24	; 46
     6c8:	0d b4       	in	r0, 0x2d	; 45
     6ca:	07 fe       	sbrs	r0, 7
     6cc:	fd cf       	rjmp	.-6      	; 0x6c8 <DataflashManager_WriteBlocks+0x17c>
     6ce:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6d2:	8e bd       	out	0x2e, r24	; 46
     6d4:	0d b4       	in	r0, 0x2d	; 45
     6d6:	07 fe       	sbrs	r0, 7
     6d8:	fd cf       	rjmp	.-6      	; 0x6d4 <DataflashManager_WriteBlocks+0x188>
     6da:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6de:	8e bd       	out	0x2e, r24	; 46
     6e0:	0d b4       	in	r0, 0x2d	; 45
     6e2:	07 fe       	sbrs	r0, 7
     6e4:	fd cf       	rjmp	.-6      	; 0x6e0 <DataflashManager_WriteBlocks+0x194>
     6e6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6ea:	8e bd       	out	0x2e, r24	; 46
     6ec:	0d b4       	in	r0, 0x2d	; 45
     6ee:	07 fe       	sbrs	r0, 7
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <DataflashManager_WriteBlocks+0x1a0>
     6f2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6f6:	8e bd       	out	0x2e, r24	; 46
     6f8:	0d b4       	in	r0, 0x2d	; 45
     6fa:	07 fe       	sbrs	r0, 7
     6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <DataflashManager_WriteBlocks+0x1ac>
     6fe:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     702:	8e bd       	out	0x2e, r24	; 46
     704:	0d b4       	in	r0, 0x2d	; 45
     706:	07 fe       	sbrs	r0, 7
     708:	fd cf       	rjmp	.-6      	; 0x704 <DataflashManager_WriteBlocks+0x1b8>
     70a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     70e:	8e bd       	out	0x2e, r24	; 46
     710:	0d b4       	in	r0, 0x2d	; 45
     712:	07 fe       	sbrs	r0, 7
     714:	fd cf       	rjmp	.-6      	; 0x710 <DataflashManager_WriteBlocks+0x1c4>
     716:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     71a:	8e bd       	out	0x2e, r24	; 46
     71c:	0d b4       	in	r0, 0x2d	; 45
     71e:	07 fe       	sbrs	r0, 7
     720:	fd cf       	rjmp	.-6      	; 0x71c <DataflashManager_WriteBlocks+0x1d0>
     722:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     726:	8e bd       	out	0x2e, r24	; 46
     728:	0d b4       	in	r0, 0x2d	; 45
     72a:	07 fe       	sbrs	r0, 7
     72c:	fd cf       	rjmp	.-6      	; 0x728 <DataflashManager_WriteBlocks+0x1dc>
     72e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     732:	8e bd       	out	0x2e, r24	; 46
     734:	0d b4       	in	r0, 0x2d	; 45
     736:	07 fe       	sbrs	r0, 7
     738:	fd cf       	rjmp	.-6      	; 0x734 <DataflashManager_WriteBlocks+0x1e8>
     73a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     73e:	8e bd       	out	0x2e, r24	; 46
     740:	0d b4       	in	r0, 0x2d	; 45
     742:	07 fe       	sbrs	r0, 7
     744:	fd cf       	rjmp	.-6      	; 0x740 <DataflashManager_WriteBlocks+0x1f4>
     746:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     74a:	8e bd       	out	0x2e, r24	; 46
     74c:	0d b4       	in	r0, 0x2d	; 45
     74e:	07 fe       	sbrs	r0, 7
     750:	fd cf       	rjmp	.-6      	; 0x74c <DataflashManager_WriteBlocks+0x200>
     752:	f3 94       	inc	r15
     754:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     758:	81 11       	cpse	r24, r1
     75a:	12 c0       	rjmp	.+36     	; 0x780 <DataflashManager_WriteBlocks+0x234>
     75c:	9a 94       	dec	r9
     75e:	91 10       	cpse	r9, r1
     760:	5e cf       	rjmp	.-324    	; 0x61e <DataflashManager_WriteBlocks+0xd2>
     762:	01 50       	subi	r16, 0x01	; 1
     764:	11 09       	sbc	r17, r1
     766:	80 e2       	ldi	r24, 0x20	; 32
     768:	a8 1a       	sub	r10, r24
     76a:	b1 08       	sbc	r11, r1
     76c:	39 cf       	rjmp	.-398    	; 0x5e0 <DataflashManager_WriteBlocks+0x94>
     76e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     772:	8b 77       	andi	r24, 0x7B	; 123
     774:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     778:	e3 d4       	rcall	.+2502   	; 0x1140 <Endpoint_WaitUntilReady>
     77a:	88 23       	and	r24, r24
     77c:	09 f4       	brne	.+2      	; 0x780 <DataflashManager_WriteBlocks+0x234>
     77e:	53 cf       	rjmp	.-346    	; 0x626 <DataflashManager_WriteBlocks+0xda>
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	08 95       	ret
     796:	86 e8       	ldi	r24, 0x86	; 134
     798:	4d cf       	rjmp	.-358    	; 0x634 <DataflashManager_WriteBlocks+0xe8>
     79a:	85 e5       	ldi	r24, 0x55	; 85
     79c:	64 cf       	rjmp	.-312    	; 0x666 <DataflashManager_WriteBlocks+0x11a>
     79e:	87 e8       	ldi	r24, 0x87	; 135
     7a0:	6e cf       	rjmp	.-292    	; 0x67e <DataflashManager_WriteBlocks+0x132>
     7a2:	86 e8       	ldi	r24, 0x86	; 134
     7a4:	24 cf       	rjmp	.-440    	; 0x5ee <DataflashManager_WriteBlocks+0xa2>

000007a6 <DataflashManager_ReadBlocks>:
     7a6:	8f 92       	push	r8
     7a8:	9f 92       	push	r9
     7aa:	af 92       	push	r10
     7ac:	bf 92       	push	r11
     7ae:	ef 92       	push	r14
     7b0:	ff 92       	push	r15
     7b2:	0f 93       	push	r16
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	8a 01       	movw	r16, r20
     7bc:	4b 01       	movw	r8, r22
     7be:	5c 01       	movw	r10, r24
     7c0:	39 e0       	ldi	r19, 0x09	; 9
     7c2:	88 0c       	add	r8, r8
     7c4:	99 1c       	adc	r9, r9
     7c6:	aa 1c       	adc	r10, r10
     7c8:	bb 1c       	adc	r11, r11
     7ca:	3a 95       	dec	r19
     7cc:	d1 f7       	brne	.-12     	; 0x7c2 <DataflashManager_ReadBlocks+0x1c>
     7ce:	4a e0       	ldi	r20, 0x0A	; 10
     7d0:	b6 94       	lsr	r11
     7d2:	a7 94       	ror	r10
     7d4:	97 94       	ror	r9
     7d6:	87 94       	ror	r8
     7d8:	4a 95       	dec	r20
     7da:	d1 f7       	brne	.-12     	; 0x7d0 <DataflashManager_ReadBlocks+0x2a>
     7dc:	e4 01       	movw	r28, r8
     7de:	76 2f       	mov	r23, r22
     7e0:	66 27       	eor	r22, r22
     7e2:	77 0f       	add	r23, r23
     7e4:	7b 01       	movw	r14, r22
     7e6:	ee 24       	eor	r14, r14
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	f8 22       	and	r15, r24
     7ec:	c4 01       	movw	r24, r8
     7ee:	9d de       	rcall	.-710    	; 0x52a <Dataflash_SelectChipFromPage>
     7f0:	82 ed       	ldi	r24, 0xD2	; 210
     7f2:	8e bd       	out	0x2e, r24	; 46
     7f4:	0d b4       	in	r0, 0x2d	; 45
     7f6:	07 fe       	sbrs	r0, 7
     7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <DataflashManager_ReadBlocks+0x4e>
     7fa:	b7 01       	movw	r22, r14
     7fc:	c4 01       	movw	r24, r8
     7fe:	7c de       	rcall	.-776    	; 0x4f8 <Dataflash_SendAddressBytes>
     800:	1e bc       	out	0x2e, r1	; 46
     802:	0d b4       	in	r0, 0x2d	; 45
     804:	07 fe       	sbrs	r0, 7
     806:	fd cf       	rjmp	.-6      	; 0x802 <DataflashManager_ReadBlocks+0x5c>
     808:	1e bc       	out	0x2e, r1	; 46
     80a:	0d b4       	in	r0, 0x2d	; 45
     80c:	07 fe       	sbrs	r0, 7
     80e:	fd cf       	rjmp	.-6      	; 0x80a <DataflashManager_ReadBlocks+0x64>
     810:	1e bc       	out	0x2e, r1	; 46
     812:	0d b4       	in	r0, 0x2d	; 45
     814:	07 fe       	sbrs	r0, 7
     816:	fd cf       	rjmp	.-6      	; 0x812 <DataflashManager_ReadBlocks+0x6c>
     818:	1e bc       	out	0x2e, r1	; 46
     81a:	0d b4       	in	r0, 0x2d	; 45
     81c:	07 fe       	sbrs	r0, 7
     81e:	fd cf       	rjmp	.-6      	; 0x81a <DataflashManager_ReadBlocks+0x74>
     820:	8f d4       	rcall	.+2334   	; 0x1140 <Endpoint_WaitUntilReady>
     822:	81 11       	cpse	r24, r1
     824:	c1 c0       	rjmp	.+386    	; 0x9a8 <DataflashManager_ReadBlocks+0x202>
     826:	94 e0       	ldi	r25, 0x04	; 4
     828:	f6 94       	lsr	r15
     82a:	e7 94       	ror	r14
     82c:	9a 95       	dec	r25
     82e:	e1 f7       	brne	.-8      	; 0x828 <DataflashManager_ReadBlocks+0x82>
     830:	fe 2c       	mov	r15, r14
     832:	22 ed       	ldi	r18, 0xD2	; 210
     834:	b2 2e       	mov	r11, r18
     836:	01 15       	cp	r16, r1
     838:	11 05       	cpc	r17, r1
     83a:	69 f4       	brne	.+26     	; 0x856 <DataflashManager_ReadBlocks+0xb0>
     83c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     840:	85 fd       	sbrc	r24, 5
     842:	05 c0       	rjmp	.+10     	; 0x84e <DataflashManager_ReadBlocks+0xa8>
     844:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     848:	8e 77       	andi	r24, 0x7E	; 126
     84a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     84e:	8e b1       	in	r24, 0x0e	; 14
     850:	83 60       	ori	r24, 0x03	; 3
     852:	8e b9       	out	0x0e, r24	; 14
     854:	a9 c0       	rjmp	.+338    	; 0x9a8 <DataflashManager_ReadBlocks+0x202>
     856:	80 e2       	ldi	r24, 0x20	; 32
     858:	e8 2e       	mov	r14, r24
     85a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     85e:	85 ff       	sbrs	r24, 5
     860:	9a c0       	rjmp	.+308    	; 0x996 <DataflashManager_ReadBlocks+0x1f0>
     862:	80 e4       	ldi	r24, 0x40	; 64
     864:	f8 12       	cpse	r15, r24
     866:	1c c0       	rjmp	.+56     	; 0x8a0 <DataflashManager_ReadBlocks+0xfa>
     868:	21 96       	adiw	r28, 0x01	; 1
     86a:	ce 01       	movw	r24, r28
     86c:	5e de       	rcall	.-836    	; 0x52a <Dataflash_SelectChipFromPage>
     86e:	be bc       	out	0x2e, r11	; 46
     870:	0d b4       	in	r0, 0x2d	; 45
     872:	07 fe       	sbrs	r0, 7
     874:	fd cf       	rjmp	.-6      	; 0x870 <DataflashManager_ReadBlocks+0xca>
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	ce 01       	movw	r24, r28
     87c:	3d de       	rcall	.-902    	; 0x4f8 <Dataflash_SendAddressBytes>
     87e:	1e bc       	out	0x2e, r1	; 46
     880:	0d b4       	in	r0, 0x2d	; 45
     882:	07 fe       	sbrs	r0, 7
     884:	fd cf       	rjmp	.-6      	; 0x880 <DataflashManager_ReadBlocks+0xda>
     886:	1e bc       	out	0x2e, r1	; 46
     888:	0d b4       	in	r0, 0x2d	; 45
     88a:	07 fe       	sbrs	r0, 7
     88c:	fd cf       	rjmp	.-6      	; 0x888 <DataflashManager_ReadBlocks+0xe2>
     88e:	1e bc       	out	0x2e, r1	; 46
     890:	0d b4       	in	r0, 0x2d	; 45
     892:	07 fe       	sbrs	r0, 7
     894:	fd cf       	rjmp	.-6      	; 0x890 <DataflashManager_ReadBlocks+0xea>
     896:	1e bc       	out	0x2e, r1	; 46
     898:	0d b4       	in	r0, 0x2d	; 45
     89a:	07 fe       	sbrs	r0, 7
     89c:	fd cf       	rjmp	.-6      	; 0x898 <DataflashManager_ReadBlocks+0xf2>
     89e:	f1 2c       	mov	r15, r1
     8a0:	1e bc       	out	0x2e, r1	; 46
     8a2:	0d b4       	in	r0, 0x2d	; 45
     8a4:	07 fe       	sbrs	r0, 7
     8a6:	fd cf       	rjmp	.-6      	; 0x8a2 <DataflashManager_ReadBlocks+0xfc>
     8a8:	8e b5       	in	r24, 0x2e	; 46
     8aa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8ae:	1e bc       	out	0x2e, r1	; 46
     8b0:	0d b4       	in	r0, 0x2d	; 45
     8b2:	07 fe       	sbrs	r0, 7
     8b4:	fd cf       	rjmp	.-6      	; 0x8b0 <DataflashManager_ReadBlocks+0x10a>
     8b6:	8e b5       	in	r24, 0x2e	; 46
     8b8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8bc:	1e bc       	out	0x2e, r1	; 46
     8be:	0d b4       	in	r0, 0x2d	; 45
     8c0:	07 fe       	sbrs	r0, 7
     8c2:	fd cf       	rjmp	.-6      	; 0x8be <DataflashManager_ReadBlocks+0x118>
     8c4:	8e b5       	in	r24, 0x2e	; 46
     8c6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8ca:	1e bc       	out	0x2e, r1	; 46
     8cc:	0d b4       	in	r0, 0x2d	; 45
     8ce:	07 fe       	sbrs	r0, 7
     8d0:	fd cf       	rjmp	.-6      	; 0x8cc <DataflashManager_ReadBlocks+0x126>
     8d2:	8e b5       	in	r24, 0x2e	; 46
     8d4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8d8:	1e bc       	out	0x2e, r1	; 46
     8da:	0d b4       	in	r0, 0x2d	; 45
     8dc:	07 fe       	sbrs	r0, 7
     8de:	fd cf       	rjmp	.-6      	; 0x8da <DataflashManager_ReadBlocks+0x134>
     8e0:	8e b5       	in	r24, 0x2e	; 46
     8e2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8e6:	1e bc       	out	0x2e, r1	; 46
     8e8:	0d b4       	in	r0, 0x2d	; 45
     8ea:	07 fe       	sbrs	r0, 7
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <DataflashManager_ReadBlocks+0x142>
     8ee:	8e b5       	in	r24, 0x2e	; 46
     8f0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8f4:	1e bc       	out	0x2e, r1	; 46
     8f6:	0d b4       	in	r0, 0x2d	; 45
     8f8:	07 fe       	sbrs	r0, 7
     8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <DataflashManager_ReadBlocks+0x150>
     8fc:	8e b5       	in	r24, 0x2e	; 46
     8fe:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     902:	1e bc       	out	0x2e, r1	; 46
     904:	0d b4       	in	r0, 0x2d	; 45
     906:	07 fe       	sbrs	r0, 7
     908:	fd cf       	rjmp	.-6      	; 0x904 <DataflashManager_ReadBlocks+0x15e>
     90a:	8e b5       	in	r24, 0x2e	; 46
     90c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     910:	1e bc       	out	0x2e, r1	; 46
     912:	0d b4       	in	r0, 0x2d	; 45
     914:	07 fe       	sbrs	r0, 7
     916:	fd cf       	rjmp	.-6      	; 0x912 <DataflashManager_ReadBlocks+0x16c>
     918:	8e b5       	in	r24, 0x2e	; 46
     91a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     91e:	1e bc       	out	0x2e, r1	; 46
     920:	0d b4       	in	r0, 0x2d	; 45
     922:	07 fe       	sbrs	r0, 7
     924:	fd cf       	rjmp	.-6      	; 0x920 <DataflashManager_ReadBlocks+0x17a>
     926:	8e b5       	in	r24, 0x2e	; 46
     928:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     92c:	1e bc       	out	0x2e, r1	; 46
     92e:	0d b4       	in	r0, 0x2d	; 45
     930:	07 fe       	sbrs	r0, 7
     932:	fd cf       	rjmp	.-6      	; 0x92e <DataflashManager_ReadBlocks+0x188>
     934:	8e b5       	in	r24, 0x2e	; 46
     936:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     93a:	1e bc       	out	0x2e, r1	; 46
     93c:	0d b4       	in	r0, 0x2d	; 45
     93e:	07 fe       	sbrs	r0, 7
     940:	fd cf       	rjmp	.-6      	; 0x93c <DataflashManager_ReadBlocks+0x196>
     942:	8e b5       	in	r24, 0x2e	; 46
     944:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     948:	1e bc       	out	0x2e, r1	; 46
     94a:	0d b4       	in	r0, 0x2d	; 45
     94c:	07 fe       	sbrs	r0, 7
     94e:	fd cf       	rjmp	.-6      	; 0x94a <DataflashManager_ReadBlocks+0x1a4>
     950:	8e b5       	in	r24, 0x2e	; 46
     952:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     956:	1e bc       	out	0x2e, r1	; 46
     958:	0d b4       	in	r0, 0x2d	; 45
     95a:	07 fe       	sbrs	r0, 7
     95c:	fd cf       	rjmp	.-6      	; 0x958 <DataflashManager_ReadBlocks+0x1b2>
     95e:	8e b5       	in	r24, 0x2e	; 46
     960:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     964:	1e bc       	out	0x2e, r1	; 46
     966:	0d b4       	in	r0, 0x2d	; 45
     968:	07 fe       	sbrs	r0, 7
     96a:	fd cf       	rjmp	.-6      	; 0x966 <DataflashManager_ReadBlocks+0x1c0>
     96c:	8e b5       	in	r24, 0x2e	; 46
     96e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     972:	1e bc       	out	0x2e, r1	; 46
     974:	0d b4       	in	r0, 0x2d	; 45
     976:	07 fe       	sbrs	r0, 7
     978:	fd cf       	rjmp	.-6      	; 0x974 <DataflashManager_ReadBlocks+0x1ce>
     97a:	8e b5       	in	r24, 0x2e	; 46
     97c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     980:	f3 94       	inc	r15
     982:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     986:	81 11       	cpse	r24, r1
     988:	0f c0       	rjmp	.+30     	; 0x9a8 <DataflashManager_ReadBlocks+0x202>
     98a:	ea 94       	dec	r14
     98c:	e1 10       	cpse	r14, r1
     98e:	65 cf       	rjmp	.-310    	; 0x85a <DataflashManager_ReadBlocks+0xb4>
     990:	01 50       	subi	r16, 0x01	; 1
     992:	11 09       	sbc	r17, r1
     994:	50 cf       	rjmp	.-352    	; 0x836 <DataflashManager_ReadBlocks+0x90>
     996:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     99a:	8e 77       	andi	r24, 0x7E	; 126
     99c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9a0:	cf d3       	rcall	.+1950   	; 0x1140 <Endpoint_WaitUntilReady>
     9a2:	88 23       	and	r24, r24
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <DataflashManager_ReadBlocks+0x202>
     9a6:	5d cf       	rjmp	.-326    	; 0x862 <DataflashManager_ReadBlocks+0xbc>
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	0f 91       	pop	r16
     9b0:	ff 90       	pop	r15
     9b2:	ef 90       	pop	r14
     9b4:	bf 90       	pop	r11
     9b6:	af 90       	pop	r10
     9b8:	9f 90       	pop	r9
     9ba:	8f 90       	pop	r8
     9bc:	08 95       	ret

000009be <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     9be:	8e b1       	in	r24, 0x0e	; 14
     9c0:	83 60       	ori	r24, 0x03	; 3
     9c2:	8e 7f       	andi	r24, 0xFE	; 254
     9c4:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     9c6:	87 ed       	ldi	r24, 0xD7	; 215
     9c8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9ca:	0d b4       	in	r0, 0x2d	; 45
     9cc:	07 fe       	sbrs	r0, 7
     9ce:	fd cf       	rjmp	.-6      	; 0x9ca <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     9d0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9d2:	0d b4       	in	r0, 0x2d	; 45
     9d4:	07 fe       	sbrs	r0, 7
     9d6:	fd cf       	rjmp	.-6      	; 0x9d2 <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     9d8:	0e b4       	in	r0, 0x2e	; 46
     9da:	01 fc       	sbrc	r0, 1
     9dc:	14 c0       	rjmp	.+40     	; 0xa06 <DataflashManager_ResetDataflashProtections+0x48>
     9de:	8e b1       	in	r24, 0x0e	; 14
     9e0:	83 60       	ori	r24, 0x03	; 3
     9e2:	8d 7f       	andi	r24, 0xFD	; 253
     9e4:	8e b9       	out	0x0e, r24	; 14
				SPDR = Byte;
     9e6:	87 ed       	ldi	r24, 0xD7	; 215
     9e8:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     9ea:	0d b4       	in	r0, 0x2d	; 45
     9ec:	07 fe       	sbrs	r0, 7
     9ee:	fd cf       	rjmp	.-6      	; 0x9ea <DataflashManager_ResetDataflashProtections+0x2c>
				SPDR = 0x00;
     9f0:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     9f2:	0d b4       	in	r0, 0x2d	; 45
     9f4:	07 fe       	sbrs	r0, 7
     9f6:	fd cf       	rjmp	.-6      	; 0x9f2 <DataflashManager_ResetDataflashProtections+0x34>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     9f8:	0e b4       	in	r0, 0x2e	; 46
     9fa:	01 fc       	sbrc	r0, 1
     9fc:	1a c0       	rjmp	.+52     	; 0xa32 <DataflashManager_ResetDataflashProtections+0x74>
     9fe:	8e b1       	in	r24, 0x0e	; 14
     a00:	83 60       	ori	r24, 0x03	; 3
     a02:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     a04:	08 95       	ret
		Dataflash_ToggleSelectedChipCS();
     a06:	60 dd       	rcall	.-1344   	; 0x4c8 <Dataflash_ToggleSelectedChipCS>
				SPDR = Byte;
     a08:	8d e3       	ldi	r24, 0x3D	; 61
     a0a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a0c:	0d b4       	in	r0, 0x2d	; 45
     a0e:	07 fe       	sbrs	r0, 7
     a10:	fd cf       	rjmp	.-6      	; 0xa0c <DataflashManager_ResetDataflashProtections+0x4e>
				SPDR = Byte;
     a12:	8a e2       	ldi	r24, 0x2A	; 42
     a14:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a16:	0d b4       	in	r0, 0x2d	; 45
     a18:	07 fe       	sbrs	r0, 7
     a1a:	fd cf       	rjmp	.-6      	; 0xa16 <DataflashManager_ResetDataflashProtections+0x58>
				SPDR = Byte;
     a1c:	8f e7       	ldi	r24, 0x7F	; 127
     a1e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a20:	0d b4       	in	r0, 0x2d	; 45
     a22:	07 fe       	sbrs	r0, 7
     a24:	fd cf       	rjmp	.-6      	; 0xa20 <DataflashManager_ResetDataflashProtections+0x62>
				SPDR = Byte;
     a26:	8a e9       	ldi	r24, 0x9A	; 154
     a28:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a2a:	0d b4       	in	r0, 0x2d	; 45
     a2c:	07 fe       	sbrs	r0, 7
     a2e:	fd cf       	rjmp	.-6      	; 0xa2a <DataflashManager_ResetDataflashProtections+0x6c>
     a30:	d6 cf       	rjmp	.-84     	; 0x9de <DataflashManager_ResetDataflashProtections+0x20>
		Dataflash_ToggleSelectedChipCS();
     a32:	4a dd       	rcall	.-1388   	; 0x4c8 <Dataflash_ToggleSelectedChipCS>
				SPDR = Byte;
     a34:	8d e3       	ldi	r24, 0x3D	; 61
     a36:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a38:	0d b4       	in	r0, 0x2d	; 45
     a3a:	07 fe       	sbrs	r0, 7
     a3c:	fd cf       	rjmp	.-6      	; 0xa38 <DataflashManager_ResetDataflashProtections+0x7a>
				SPDR = Byte;
     a3e:	8a e2       	ldi	r24, 0x2A	; 42
     a40:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a42:	0d b4       	in	r0, 0x2d	; 45
     a44:	07 fe       	sbrs	r0, 7
     a46:	fd cf       	rjmp	.-6      	; 0xa42 <DataflashManager_ResetDataflashProtections+0x84>
				SPDR = Byte;
     a48:	8f e7       	ldi	r24, 0x7F	; 127
     a4a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a4c:	0d b4       	in	r0, 0x2d	; 45
     a4e:	07 fe       	sbrs	r0, 7
     a50:	fd cf       	rjmp	.-6      	; 0xa4c <DataflashManager_ResetDataflashProtections+0x8e>
				SPDR = Byte;
     a52:	8a e9       	ldi	r24, 0x9A	; 154
     a54:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a56:	0d b4       	in	r0, 0x2d	; 45
     a58:	07 fe       	sbrs	r0, 7
     a5a:	fd cf       	rjmp	.-6      	; 0xa56 <DataflashManager_ResetDataflashProtections+0x98>
     a5c:	d0 cf       	rjmp	.-96     	; 0x9fe <DataflashManager_ResetDataflashProtections+0x40>

00000a5e <DataflashManager_CheckDataflashOperation>:
     a5e:	8e b1       	in	r24, 0x0e	; 14
     a60:	83 60       	ori	r24, 0x03	; 3
     a62:	8e 7f       	andi	r24, 0xFE	; 254
     a64:	8e b9       	out	0x0e, r24	; 14
				SPDR = Byte;
     a66:	8f e9       	ldi	r24, 0x9F	; 159
     a68:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a6a:	0d b4       	in	r0, 0x2d	; 45
     a6c:	07 fe       	sbrs	r0, 7
     a6e:	fd cf       	rjmp	.-6      	; 0xa6a <DataflashManager_CheckDataflashOperation+0xc>
				SPDR = 0x00;
     a70:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a72:	0d b4       	in	r0, 0x2d	; 45
     a74:	07 fe       	sbrs	r0, 7
     a76:	fd cf       	rjmp	.-6      	; 0xa72 <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     a78:	9e b5       	in	r25, 0x2e	; 46
     a7a:	8e b1       	in	r24, 0x0e	; 14
     a7c:	83 60       	ori	r24, 0x03	; 3
     a7e:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     a80:	9f 31       	cpi	r25, 0x1F	; 31
     a82:	a1 f4       	brne	.+40     	; 0xaac <DataflashManager_CheckDataflashOperation+0x4e>
     a84:	8e b1       	in	r24, 0x0e	; 14
     a86:	83 60       	ori	r24, 0x03	; 3
     a88:	8d 7f       	andi	r24, 0xFD	; 253
     a8a:	8e b9       	out	0x0e, r24	; 14
				SPDR = Byte;
     a8c:	8f e9       	ldi	r24, 0x9F	; 159
     a8e:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     a90:	0d b4       	in	r0, 0x2d	; 45
     a92:	07 fe       	sbrs	r0, 7
     a94:	fd cf       	rjmp	.-6      	; 0xa90 <DataflashManager_CheckDataflashOperation+0x32>
				SPDR = 0x00;
     a96:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     a98:	0d b4       	in	r0, 0x2d	; 45
     a9a:	07 fe       	sbrs	r0, 7
     a9c:	fd cf       	rjmp	.-6      	; 0xa98 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     a9e:	9e b5       	in	r25, 0x2e	; 46
     aa0:	8e b1       	in	r24, 0x0e	; 14
     aa2:	83 60       	ori	r24, 0x03	; 3
     aa4:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	9f 31       	cpi	r25, 0x1F	; 31
     aaa:	09 f0       	breq	.+2      	; 0xaae <DataflashManager_CheckDataflashOperation+0x50>
	  return false;
     aac:	80 e0       	ldi	r24, 0x00	; 0
	  return false;
	#endif

	return true;
}
     aae:	08 95       	ret

00000ab0 <SCSI_Command_ReadWrite_10>:
 *  \param[in] IsDataRead  Indicates if the command is a READ (10) command or WRITE (10) command (DATA_READ or DATA_WRITE)
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(const bool IsDataRead)
{
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	28 2f       	mov	r18, r24

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     ab6:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <CommandBlock+0x14>
     aba:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <CommandBlock+0x13>
     abe:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <CommandBlock+0x12>
     ac2:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <CommandBlock+0x11>
				return Data.Word;
     ac6:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <CommandBlock+0x17>
     aca:	c3 2f       	mov	r28, r19
     acc:	30 91 5b 01 	lds	r19, 0x015B	; 0x80015b <CommandBlock+0x16>
     ad0:	d3 2f       	mov	r29, r19

	BlockAddress = SwapEndian_32(*(uint32_t*)&CommandBlock.SCSICommandData[2]);
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     ad2:	61 15       	cp	r22, r1
     ad4:	30 e8       	ldi	r19, 0x80	; 128
     ad6:	73 07       	cpc	r23, r19
     ad8:	81 05       	cpc	r24, r1
     ada:	91 05       	cpc	r25, r1
     adc:	78 f0       	brcs	.+30     	; 0xafc <SCSI_Command_ReadWrite_10+0x4c>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     ade:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SenseData+0x2>
     ae2:	80 7f       	andi	r24, 0xF0	; 240
     ae4:	85 60       	ori	r24, 0x05	; 5
     ae6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SenseData+0x2>
     aea:	81 e2       	ldi	r24, 0x21	; 33
     aec:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <SenseData+0xc>
     af0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <SenseData+0xd>
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     af4:	80 e0       	ldi	r24, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);

	return true;
}
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret
	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
     afc:	ae 01       	movw	r20, r28
	if (IsDataRead == DATA_READ)
     afe:	22 23       	and	r18, r18
     b00:	09 f1       	breq	.+66     	; 0xb44 <__stack+0x45>
	  DataflashManager_ReadBlocks(BlockAddress, TotalBlocks);
     b02:	51 de       	rcall	.-862    	; 0x7a6 <DataflashManager_ReadBlocks>
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     b04:	ae 01       	movw	r20, r28
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	89 e0       	ldi	r24, 0x09	; 9
     b0c:	44 0f       	add	r20, r20
     b0e:	55 1f       	adc	r21, r21
     b10:	66 1f       	adc	r22, r22
     b12:	77 1f       	adc	r23, r23
     b14:	8a 95       	dec	r24
     b16:	d1 f7       	brne	.-12     	; 0xb0c <__stack+0xd>
     b18:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <CommandBlock+0x8>
     b1c:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <CommandBlock+0x9>
     b20:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <CommandBlock+0xa>
     b24:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <CommandBlock+0xb>
     b28:	84 1b       	sub	r24, r20
     b2a:	95 0b       	sbc	r25, r21
     b2c:	a6 0b       	sbc	r26, r22
     b2e:	b7 0b       	sbc	r27, r23
     b30:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <CommandBlock+0x8>
     b34:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <CommandBlock+0x9>
     b38:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <CommandBlock+0xa>
     b3c:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <CommandBlock+0xb>
	return true;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	d9 cf       	rjmp	.-78     	; 0xaf6 <SCSI_Command_ReadWrite_10+0x46>
	  DataflashManager_WriteBlocks(BlockAddress, TotalBlocks);
     b44:	03 dd       	rcall	.-1530   	; 0x54c <DataflashManager_WriteBlocks>
     b46:	de cf       	rjmp	.-68     	; 0xb04 <__stack+0x5>

00000b48 <SCSI_DecodeSCSICommand>:
{
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
	switch (CommandBlock.SCSICommandData[0])
     b50:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <CommandBlock+0xf>
     b54:	8d 31       	cpi	r24, 0x1D	; 29
     b56:	09 f4       	brne	.+2      	; 0xb5a <SCSI_DecodeSCSICommand+0x12>
     b58:	c6 c0       	rjmp	.+396    	; 0xce6 <SCSI_DecodeSCSICommand+0x19e>
     b5a:	f8 f4       	brcc	.+62     	; 0xb9a <SCSI_DecodeSCSICommand+0x52>
     b5c:	82 31       	cpi	r24, 0x12	; 18
     b5e:	09 f4       	brne	.+2      	; 0xb62 <SCSI_DecodeSCSICommand+0x1a>
     b60:	44 c0       	rjmp	.+136    	; 0xbea <SCSI_DecodeSCSICommand+0xa2>
     b62:	68 f4       	brcc	.+26     	; 0xb7e <SCSI_DecodeSCSICommand+0x36>
     b64:	88 23       	and	r24, r24
     b66:	81 f0       	breq	.+32     	; 0xb88 <SCSI_DecodeSCSICommand+0x40>
     b68:	83 30       	cpi	r24, 0x03	; 3
     b6a:	09 f4       	brne	.+2      	; 0xb6e <SCSI_DecodeSCSICommand+0x26>
     b6c:	84 c0       	rjmp	.+264    	; 0xc76 <SCSI_DecodeSCSICommand+0x12e>
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b6e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SenseData+0x2>
     b72:	80 7f       	andi	r24, 0xF0	; 240
     b74:	85 60       	ori	r24, 0x05	; 5
     b76:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SenseData+0x2>
     b7a:	80 e2       	ldi	r24, 0x20	; 32
     b7c:	4b c0       	rjmp	.+150    	; 0xc14 <SCSI_DecodeSCSICommand+0xcc>
	switch (CommandBlock.SCSICommandData[0])
     b7e:	8a 31       	cpi	r24, 0x1A	; 26
     b80:	09 f4       	brne	.+2      	; 0xb84 <SCSI_DecodeSCSICommand+0x3c>
     b82:	d9 c0       	rjmp	.+434    	; 0xd36 <SCSI_DecodeSCSICommand+0x1ee>
     b84:	8b 31       	cpi	r24, 0x1B	; 27
     b86:	99 f7       	brne	.-26     	; 0xb6e <SCSI_DecodeSCSICommand+0x26>
			CommandBlock.DataTransferLength = 0;
     b88:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <CommandBlock+0x8>
     b8c:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <CommandBlock+0x9>
     b90:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <CommandBlock+0xa>
     b94:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <CommandBlock+0xb>
			break;
     b98:	c1 c0       	rjmp	.+386    	; 0xd1c <SCSI_DecodeSCSICommand+0x1d4>
	switch (CommandBlock.SCSICommandData[0])
     b9a:	88 32       	cpi	r24, 0x28	; 40
     b9c:	09 f4       	brne	.+2      	; 0xba0 <SCSI_DecodeSCSICommand+0x58>
     b9e:	c9 c0       	rjmp	.+402    	; 0xd32 <SCSI_DecodeSCSICommand+0x1ea>
     ba0:	f0 f4       	brcc	.+60     	; 0xbde <SCSI_DecodeSCSICommand+0x96>
     ba2:	8e 31       	cpi	r24, 0x1E	; 30
     ba4:	89 f3       	breq	.-30     	; 0xb88 <SCSI_DecodeSCSICommand+0x40>
     ba6:	85 32       	cpi	r24, 0x25	; 37
     ba8:	11 f7       	brne	.-60     	; 0xb6e <SCSI_DecodeSCSICommand+0x26>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     baa:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     bae:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     bb2:	8f e7       	ldi	r24, 0x7F	; 127
     bb4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
     bbe:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     bc2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     bc6:	82 e0       	ldi	r24, 0x02	; 2
     bc8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     bcc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	if (IsMassStoreReset)
     bd0:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     bd4:	88 23       	and	r24, r24
     bd6:	09 f4       	brne	.+2      	; 0xbda <SCSI_DecodeSCSICommand+0x92>
     bd8:	75 c0       	rjmp	.+234    	; 0xcc4 <SCSI_DecodeSCSICommand+0x17c>
	return false;
     bda:	80 e0       	ldi	r24, 0x00	; 0
			break;
     bdc:	95 c0       	rjmp	.+298    	; 0xd08 <SCSI_DecodeSCSICommand+0x1c0>
	switch (CommandBlock.SCSICommandData[0])
     bde:	8a 32       	cpi	r24, 0x2A	; 42
     be0:	09 f4       	brne	.+2      	; 0xbe4 <SCSI_DecodeSCSICommand+0x9c>
     be2:	97 c0       	rjmp	.+302    	; 0xd12 <SCSI_DecodeSCSICommand+0x1ca>
     be4:	8f 32       	cpi	r24, 0x2F	; 47
     be6:	81 f2       	breq	.-96     	; 0xb88 <SCSI_DecodeSCSICommand+0x40>
     be8:	c2 cf       	rjmp	.-124    	; 0xb6e <SCSI_DecodeSCSICommand+0x26>
     bea:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <CommandBlock+0x13>
     bee:	c8 2f       	mov	r28, r24
     bf0:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <CommandBlock+0x12>
     bf4:	d8 2f       	mov	r29, r24
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     bf6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <CommandBlock+0x10>
     bfa:	83 70       	andi	r24, 0x03	; 3
     bfc:	21 f4       	brne	.+8      	; 0xc06 <SCSI_DecodeSCSICommand+0xbe>
     bfe:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <CommandBlock+0x11>
     c02:	88 23       	and	r24, r24
     c04:	61 f0       	breq	.+24     	; 0xc1e <SCSI_DecodeSCSICommand+0xd6>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c06:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SenseData+0x2>
     c0a:	80 7f       	andi	r24, 0xF0	; 240
     c0c:	85 60       	ori	r24, 0x05	; 5
     c0e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SenseData+0x2>
     c12:	84 e2       	ldi	r24, 0x24	; 36
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     c14:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <SenseData+0xc>
     c18:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <SenseData+0xd>
     c1c:	de cf       	rjmp	.-68     	; 0xbda <SCSI_DecodeSCSICommand+0x92>
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     c1e:	8e 01       	movw	r16, r28
     c20:	c5 32       	cpi	r28, 0x25	; 37
     c22:	d1 05       	cpc	r29, r1
     c24:	10 f0       	brcs	.+4      	; 0xc2a <SCSI_DecodeSCSICommand+0xe2>
     c26:	04 e2       	ldi	r16, 0x24	; 36
     c28:	10 e0       	ldi	r17, 0x00	; 0
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	b8 01       	movw	r22, r16
     c30:	8f e1       	ldi	r24, 0x1F	; 31
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	dc d0       	rcall	.+440    	; 0xdee <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	ce 01       	movw	r24, r28
     c3c:	80 1b       	sub	r24, r16
     c3e:	91 0b       	sbc	r25, r17
     c40:	93 d0       	rcall	.+294    	; 0xd68 <Endpoint_Null_Stream>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c46:	8e 77       	andi	r24, 0x7E	; 126
     c48:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     c4c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <CommandBlock+0x8>
     c50:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <CommandBlock+0x9>
     c54:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <CommandBlock+0xa>
     c58:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <CommandBlock+0xb>
     c5c:	80 1b       	sub	r24, r16
     c5e:	91 0b       	sbc	r25, r17
     c60:	a1 09       	sbc	r26, r1
     c62:	b1 09       	sbc	r27, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     c64:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <CommandBlock+0x8>
     c68:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <CommandBlock+0x9>
     c6c:	a0 93 4f 01 	sts	0x014F, r26	; 0x80014f <CommandBlock+0xa>
     c70:	b0 93 50 01 	sts	0x0150, r27	; 0x800150 <CommandBlock+0xb>
			break;
     c74:	53 c0       	rjmp	.+166    	; 0xd1c <SCSI_DecodeSCSICommand+0x1d4>
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     c76:	c0 91 58 01 	lds	r28, 0x0158	; 0x800158 <CommandBlock+0x13>
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     c7a:	dc 2f       	mov	r29, r28
     c7c:	c3 31       	cpi	r28, 0x13	; 19
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <SCSI_DecodeSCSICommand+0x13a>
     c80:	d2 e1       	ldi	r29, 0x12	; 18
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     c82:	0d 2f       	mov	r16, r29
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	b8 01       	movw	r22, r16
     c8c:	8d e0       	ldi	r24, 0x0D	; 13
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	ae d0       	rcall	.+348    	; 0xdee <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     c92:	8c 2f       	mov	r24, r28
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 1b       	sub	r24, r16
     c9c:	91 0b       	sbc	r25, r17
     c9e:	64 d0       	rcall	.+200    	; 0xd68 <Endpoint_Null_Stream>
     ca0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ca4:	8e 77       	andi	r24, 0x7E	; 126
     ca6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     caa:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <CommandBlock+0x8>
     cae:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <CommandBlock+0x9>
     cb2:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <CommandBlock+0xa>
     cb6:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <CommandBlock+0xb>
     cba:	8d 1b       	sub	r24, r29
     cbc:	91 09       	sbc	r25, r1
     cbe:	a1 09       	sbc	r26, r1
     cc0:	b1 09       	sbc	r27, r1
     cc2:	d0 cf       	rjmp	.-96     	; 0xc64 <SCSI_DecodeSCSICommand+0x11c>
     cc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cc8:	8e 77       	andi	r24, 0x7E	; 126
     cca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= 8;
     cce:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <CommandBlock+0x8>
     cd2:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <CommandBlock+0x9>
     cd6:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <CommandBlock+0xa>
     cda:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <CommandBlock+0xb>
     cde:	08 97       	sbiw	r24, 0x08	; 8
     ce0:	a1 09       	sbc	r26, r1
     ce2:	b1 09       	sbc	r27, r1
     ce4:	bf cf       	rjmp	.-130    	; 0xc64 <SCSI_DecodeSCSICommand+0x11c>
	if (!(CommandBlock.SCSICommandData[1] & (1 << 2)))
     ce6:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <CommandBlock+0x10>
     cea:	82 ff       	sbrs	r24, 2
     cec:	8c cf       	rjmp	.-232    	; 0xc06 <SCSI_DecodeSCSICommand+0xbe>
	if (!(DataflashManager_CheckDataflashOperation()))
     cee:	b7 de       	rcall	.-658    	; 0xa5e <DataflashManager_CheckDataflashOperation>
     cf0:	81 11       	cpse	r24, r1
     cf2:	4a cf       	rjmp	.-364    	; 0xb88 <SCSI_DecodeSCSICommand+0x40>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     cf4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <SenseData+0x2>
     cf8:	90 7f       	andi	r25, 0xF0	; 240
     cfa:	94 60       	ori	r25, 0x04	; 4
     cfc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <SenseData+0x2>
     d00:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <SenseData+0xc>
     d04:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <SenseData+0xd>
}
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	08 95       	ret
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_WRITE);
     d12:	80 e0       	ldi	r24, 0x00	; 0
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
     d14:	cd de       	rcall	.-614    	; 0xab0 <SCSI_Command_ReadWrite_10>
	if (CommandSuccess)
     d16:	88 23       	and	r24, r24
     d18:	09 f4       	brne	.+2      	; 0xd1c <SCSI_DecodeSCSICommand+0x1d4>
     d1a:	5f cf       	rjmp	.-322    	; 0xbda <SCSI_DecodeSCSICommand+0x92>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     d1c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <SenseData+0x2>
     d20:	80 7f       	andi	r24, 0xF0	; 240
     d22:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <SenseData+0x2>
     d26:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <SenseData+0xc>
     d2a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <SenseData+0xd>
		return true;
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	eb cf       	rjmp	.-42     	; 0xd08 <SCSI_DecodeSCSICommand+0x1c0>
			CommandSuccess = SCSI_Command_ReadWrite_10(DATA_READ);
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	ef cf       	rjmp	.-34     	; 0xd14 <SCSI_DecodeSCSICommand+0x1cc>
				UEDATX = Data;
     d36:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     d3a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     d3e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     d42:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     d46:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d4a:	8e 77       	andi	r24, 0x7E	; 126
     d4c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= 4;
     d50:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <CommandBlock+0x8>
     d54:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <CommandBlock+0x9>
     d58:	a0 91 4f 01 	lds	r26, 0x014F	; 0x80014f <CommandBlock+0xa>
     d5c:	b0 91 50 01 	lds	r27, 0x0150	; 0x800150 <CommandBlock+0xb>
     d60:	04 97       	sbiw	r24, 0x04	; 4
     d62:	a1 09       	sbc	r26, r1
     d64:	b1 09       	sbc	r27, r1
     d66:	7e cf       	rjmp	.-260    	; 0xc64 <SCSI_DecodeSCSICommand+0x11c>

00000d68 <Endpoint_Null_Stream>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     d68:	cf 92       	push	r12
     d6a:	df 92       	push	r13
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ec 01       	movw	r28, r24
     d78:	8b 01       	movw	r16, r22
     d7a:	e2 d1       	rcall	.+964    	; 0x1140 <Endpoint_WaitUntilReady>
     d7c:	f8 2e       	mov	r15, r24
     d7e:	81 11       	cpse	r24, r1
     d80:	21 c0       	rjmp	.+66     	; 0xdc4 <Endpoint_Null_Stream+0x5c>
     d82:	01 15       	cp	r16, r1
     d84:	11 05       	cpc	r17, r1
     d86:	29 f0       	breq	.+10     	; 0xd92 <Endpoint_Null_Stream+0x2a>
     d88:	f8 01       	movw	r30, r16
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	c8 1b       	sub	r28, r24
     d90:	d9 0b       	sbc	r29, r25
     d92:	c1 2c       	mov	r12, r1
     d94:	d1 2c       	mov	r13, r1
     d96:	20 97       	sbiw	r28, 0x00	; 0
     d98:	a9 f0       	breq	.+42     	; 0xdc4 <Endpoint_Null_Stream+0x5c>
     d9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d9e:	85 fd       	sbrc	r24, 5
     da0:	1f c0       	rjmp	.+62     	; 0xde0 <Endpoint_Null_Stream+0x78>
     da2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     da6:	8e 77       	andi	r24, 0x7E	; 126
     da8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dac:	01 15       	cp	r16, r1
     dae:	11 05       	cpc	r17, r1
     db0:	91 f0       	breq	.+36     	; 0xdd6 <Endpoint_Null_Stream+0x6e>
     db2:	f8 01       	movw	r30, r16
     db4:	80 81       	ld	r24, Z
     db6:	91 81       	ldd	r25, Z+1	; 0x01
     db8:	c8 0e       	add	r12, r24
     dba:	d9 1e       	adc	r13, r25
     dbc:	d1 82       	std	Z+1, r13	; 0x01
     dbe:	c0 82       	st	Z, r12
     dc0:	85 e0       	ldi	r24, 0x05	; 5
     dc2:	f8 2e       	mov	r15, r24
     dc4:	8f 2d       	mov	r24, r15
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	ff 90       	pop	r15
     dd0:	df 90       	pop	r13
     dd2:	cf 90       	pop	r12
     dd4:	08 95       	ret
     dd6:	b4 d1       	rcall	.+872    	; 0x1140 <Endpoint_WaitUntilReady>
     dd8:	88 23       	and	r24, r24
     dda:	e9 f2       	breq	.-70     	; 0xd96 <Endpoint_Null_Stream+0x2e>
     ddc:	f8 2e       	mov	r15, r24
     dde:	f2 cf       	rjmp	.-28     	; 0xdc4 <Endpoint_Null_Stream+0x5c>
     de0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     de4:	21 97       	sbiw	r28, 0x01	; 1
     de6:	ff ef       	ldi	r31, 0xFF	; 255
     de8:	cf 1a       	sub	r12, r31
     dea:	df 0a       	sbc	r13, r31
     dec:	d4 cf       	rjmp	.-88     	; 0xd96 <Endpoint_Null_Stream+0x2e>

00000dee <Endpoint_Write_Stream_LE>:
     dee:	af 92       	push	r10
     df0:	bf 92       	push	r11
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	ec 01       	movw	r28, r24
     e02:	8b 01       	movw	r16, r22
     e04:	7a 01       	movw	r14, r20
     e06:	9c d1       	rcall	.+824    	; 0x1140 <Endpoint_WaitUntilReady>
     e08:	d8 2e       	mov	r13, r24
     e0a:	81 11       	cpse	r24, r1
     e0c:	24 c0       	rjmp	.+72     	; 0xe56 <Endpoint_Write_Stream_LE+0x68>
     e0e:	e1 14       	cp	r14, r1
     e10:	f1 04       	cpc	r15, r1
     e12:	39 f0       	breq	.+14     	; 0xe22 <Endpoint_Write_Stream_LE+0x34>
     e14:	f7 01       	movw	r30, r14
     e16:	80 81       	ld	r24, Z
     e18:	91 81       	ldd	r25, Z+1	; 0x01
     e1a:	08 1b       	sub	r16, r24
     e1c:	19 0b       	sbc	r17, r25
     e1e:	c8 0f       	add	r28, r24
     e20:	d9 1f       	adc	r29, r25
     e22:	a1 2c       	mov	r10, r1
     e24:	b1 2c       	mov	r11, r1
     e26:	01 15       	cp	r16, r1
     e28:	11 05       	cpc	r17, r1
     e2a:	a9 f0       	breq	.+42     	; 0xe56 <Endpoint_Write_Stream_LE+0x68>
     e2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e30:	85 fd       	sbrc	r24, 5
     e32:	21 c0       	rjmp	.+66     	; 0xe76 <Endpoint_Write_Stream_LE+0x88>
     e34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e38:	8e 77       	andi	r24, 0x7E	; 126
     e3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e3e:	e1 14       	cp	r14, r1
     e40:	f1 04       	cpc	r15, r1
     e42:	a1 f0       	breq	.+40     	; 0xe6c <Endpoint_Write_Stream_LE+0x7e>
     e44:	f7 01       	movw	r30, r14
     e46:	80 81       	ld	r24, Z
     e48:	91 81       	ldd	r25, Z+1	; 0x01
     e4a:	a8 0e       	add	r10, r24
     e4c:	b9 1e       	adc	r11, r25
     e4e:	b1 82       	std	Z+1, r11	; 0x01
     e50:	a0 82       	st	Z, r10
     e52:	85 e0       	ldi	r24, 0x05	; 5
     e54:	d8 2e       	mov	r13, r24
     e56:	8d 2d       	mov	r24, r13
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	bf 90       	pop	r11
     e68:	af 90       	pop	r10
     e6a:	08 95       	ret
     e6c:	69 d1       	rcall	.+722    	; 0x1140 <Endpoint_WaitUntilReady>
     e6e:	88 23       	and	r24, r24
     e70:	d1 f2       	breq	.-76     	; 0xe26 <Endpoint_Write_Stream_LE+0x38>
     e72:	d8 2e       	mov	r13, r24
     e74:	f0 cf       	rjmp	.-32     	; 0xe56 <Endpoint_Write_Stream_LE+0x68>
     e76:	89 91       	ld	r24, Y+
     e78:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     e7c:	01 50       	subi	r16, 0x01	; 1
     e7e:	11 09       	sbc	r17, r1
     e80:	ff ef       	ldi	r31, 0xFF	; 255
     e82:	af 1a       	sub	r10, r31
     e84:	bf 0a       	sbc	r11, r31
     e86:	cf cf       	rjmp	.-98     	; 0xe26 <Endpoint_Write_Stream_LE+0x38>

00000e88 <Endpoint_Read_Stream_LE>:
     e88:	af 92       	push	r10
     e8a:	bf 92       	push	r11
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	ec 01       	movw	r28, r24
     e9c:	8b 01       	movw	r16, r22
     e9e:	7a 01       	movw	r14, r20
     ea0:	4f d1       	rcall	.+670    	; 0x1140 <Endpoint_WaitUntilReady>
     ea2:	d8 2e       	mov	r13, r24
     ea4:	81 11       	cpse	r24, r1
     ea6:	24 c0       	rjmp	.+72     	; 0xef0 <Endpoint_Read_Stream_LE+0x68>
     ea8:	e1 14       	cp	r14, r1
     eaa:	f1 04       	cpc	r15, r1
     eac:	39 f0       	breq	.+14     	; 0xebc <Endpoint_Read_Stream_LE+0x34>
     eae:	f7 01       	movw	r30, r14
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	08 1b       	sub	r16, r24
     eb6:	19 0b       	sbc	r17, r25
     eb8:	c8 0f       	add	r28, r24
     eba:	d9 1f       	adc	r29, r25
     ebc:	a1 2c       	mov	r10, r1
     ebe:	b1 2c       	mov	r11, r1
     ec0:	01 15       	cp	r16, r1
     ec2:	11 05       	cpc	r17, r1
     ec4:	a9 f0       	breq	.+42     	; 0xef0 <Endpoint_Read_Stream_LE+0x68>
     ec6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eca:	85 fd       	sbrc	r24, 5
     ecc:	21 c0       	rjmp	.+66     	; 0xf10 <Endpoint_Read_Stream_LE+0x88>
     ece:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ed2:	8b 77       	andi	r24, 0x7B	; 123
     ed4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ed8:	e1 14       	cp	r14, r1
     eda:	f1 04       	cpc	r15, r1
     edc:	a1 f0       	breq	.+40     	; 0xf06 <Endpoint_Read_Stream_LE+0x7e>
     ede:	f7 01       	movw	r30, r14
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	a8 0e       	add	r10, r24
     ee6:	b9 1e       	adc	r11, r25
     ee8:	b1 82       	std	Z+1, r11	; 0x01
     eea:	a0 82       	st	Z, r10
     eec:	85 e0       	ldi	r24, 0x05	; 5
     eee:	d8 2e       	mov	r13, r24
     ef0:	8d 2d       	mov	r24, r13
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	bf 90       	pop	r11
     f02:	af 90       	pop	r10
     f04:	08 95       	ret
     f06:	1c d1       	rcall	.+568    	; 0x1140 <Endpoint_WaitUntilReady>
     f08:	88 23       	and	r24, r24
     f0a:	d1 f2       	breq	.-76     	; 0xec0 <Endpoint_Read_Stream_LE+0x38>
     f0c:	d8 2e       	mov	r13, r24
     f0e:	f0 cf       	rjmp	.-32     	; 0xef0 <Endpoint_Read_Stream_LE+0x68>
     f10:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     f14:	89 93       	st	Y+, r24
     f16:	01 50       	subi	r16, 0x01	; 1
     f18:	11 09       	sbc	r17, r1
     f1a:	ff ef       	ldi	r31, 0xFF	; 255
     f1c:	af 1a       	sub	r10, r31
     f1e:	bf 0a       	sbc	r11, r31
     f20:	cf cf       	rjmp	.-98     	; 0xec0 <Endpoint_Read_Stream_LE+0x38>

00000f22 <Endpoint_Write_Control_Stream_LE>:
     f22:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <USB_ControlRequest+0x6>
     f26:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <USB_ControlRequest+0x7>
     f2a:	26 17       	cp	r18, r22
     f2c:	37 07       	cpc	r19, r23
     f2e:	a8 f0       	brcs	.+42     	; 0xf5a <Endpoint_Write_Control_Stream_LE+0x38>
     f30:	61 15       	cp	r22, r1
     f32:	71 05       	cpc	r23, r1
     f34:	29 f4       	brne	.+10     	; 0xf40 <Endpoint_Write_Control_Stream_LE+0x1e>
     f36:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f3a:	2e 77       	andi	r18, 0x7E	; 126
     f3c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f40:	fc 01       	movw	r30, r24
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	61 15       	cp	r22, r1
     f46:	71 05       	cpc	r23, r1
     f48:	51 f4       	brne	.+20     	; 0xf5e <Endpoint_Write_Control_Stream_LE+0x3c>
     f4a:	21 11       	cpse	r18, r1
     f4c:	08 c0       	rjmp	.+16     	; 0xf5e <Endpoint_Write_Control_Stream_LE+0x3c>
     f4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f52:	82 ff       	sbrs	r24, 2
     f54:	33 c0       	rjmp	.+102    	; 0xfbc <Endpoint_Write_Control_Stream_LE+0x9a>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	08 95       	ret
     f5a:	b9 01       	movw	r22, r18
     f5c:	f1 cf       	rjmp	.-30     	; 0xf40 <Endpoint_Write_Control_Stream_LE+0x1e>
     f5e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
     f62:	88 23       	and	r24, r24
     f64:	b9 f1       	breq	.+110    	; 0xfd4 <Endpoint_Write_Control_Stream_LE+0xb2>
     f66:	85 30       	cpi	r24, 0x05	; 5
     f68:	b9 f1       	breq	.+110    	; 0xfd8 <Endpoint_Write_Control_Stream_LE+0xb6>
     f6a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f6e:	83 fd       	sbrc	r24, 3
     f70:	2f c0       	rjmp	.+94     	; 0xfd0 <Endpoint_Write_Control_Stream_LE+0xae>
     f72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f76:	82 fd       	sbrc	r24, 2
     f78:	ea cf       	rjmp	.-44     	; 0xf4e <Endpoint_Write_Control_Stream_LE+0x2c>
     f7a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f7e:	80 ff       	sbrs	r24, 0
     f80:	e1 cf       	rjmp	.-62     	; 0xf44 <Endpoint_Write_Control_Stream_LE+0x22>
     f82:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     f86:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	92 2b       	or	r25, r18
     f8e:	61 15       	cp	r22, r1
     f90:	71 05       	cpc	r23, r1
     f92:	19 f0       	breq	.+6      	; 0xf9a <Endpoint_Write_Control_Stream_LE+0x78>
     f94:	88 30       	cpi	r24, 0x08	; 8
     f96:	91 05       	cpc	r25, r1
     f98:	50 f0       	brcs	.+20     	; 0xfae <Endpoint_Write_Control_Stream_LE+0x8c>
     f9a:	21 e0       	ldi	r18, 0x01	; 1
     f9c:	08 97       	sbiw	r24, 0x08	; 8
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <Endpoint_Write_Control_Stream_LE+0x80>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fa6:	8e 77       	andi	r24, 0x7E	; 126
     fa8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fac:	cb cf       	rjmp	.-106    	; 0xf44 <Endpoint_Write_Control_Stream_LE+0x22>
     fae:	21 91       	ld	r18, Z+
     fb0:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     fb4:	61 50       	subi	r22, 0x01	; 1
     fb6:	71 09       	sbc	r23, r1
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	e9 cf       	rjmp	.-46     	; 0xf8e <Endpoint_Write_Control_Stream_LE+0x6c>
     fbc:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
     fc0:	88 23       	and	r24, r24
     fc2:	41 f0       	breq	.+16     	; 0xfd4 <Endpoint_Write_Control_Stream_LE+0xb2>
     fc4:	85 30       	cpi	r24, 0x05	; 5
     fc6:	41 f0       	breq	.+16     	; 0xfd8 <Endpoint_Write_Control_Stream_LE+0xb6>
     fc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fcc:	83 ff       	sbrs	r24, 3
     fce:	bf cf       	rjmp	.-130    	; 0xf4e <Endpoint_Write_Control_Stream_LE+0x2c>
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	08 95       	ret
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	08 95       	ret
     fd8:	83 e0       	ldi	r24, 0x03	; 3
     fda:	08 95       	ret

00000fdc <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     fdc:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <USB_ControlRequest+0x6>
     fe0:	30 91 70 01 	lds	r19, 0x0170	; 0x800170 <USB_ControlRequest+0x7>
     fe4:	26 17       	cp	r18, r22
     fe6:	37 07       	cpc	r19, r23
     fe8:	a8 f0       	brcs	.+42     	; 0x1014 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     fea:	61 15       	cp	r22, r1
     fec:	71 05       	cpc	r23, r1
     fee:	29 f4       	brne	.+10     	; 0xffa <Endpoint_Write_Control_PStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ff0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ff4:	2e 77       	andi	r18, 0x7E	; 126
     ff6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ffe:	61 15       	cp	r22, r1
    1000:	71 05       	cpc	r23, r1
    1002:	51 f4       	brne	.+20     	; 0x1018 <Endpoint_Write_Control_PStream_LE+0x3c>
    1004:	21 11       	cpse	r18, r1
    1006:	08 c0       	rjmp	.+16     	; 0x1018 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1008:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    100c:	82 ff       	sbrs	r24, 2
    100e:	34 c0       	rjmp	.+104    	; 0x1078 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	08 95       	ret
    1014:	b9 01       	movw	r22, r18
    1016:	f1 cf       	rjmp	.-30     	; 0xffa <Endpoint_Write_Control_PStream_LE+0x1e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1018:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    101c:	88 23       	and	r24, r24
    101e:	c1 f1       	breq	.+112    	; 0x1090 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1020:	85 30       	cpi	r24, 0x05	; 5
    1022:	c1 f1       	breq	.+112    	; 0x1094 <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1024:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1028:	83 fd       	sbrc	r24, 3
    102a:	30 c0       	rjmp	.+96     	; 0x108c <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    102c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    1030:	82 fd       	sbrc	r24, 2
    1032:	ea cf       	rjmp	.-44     	; 0x1008 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1034:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    1038:	80 ff       	sbrs	r24, 0
    103a:	e1 cf       	rjmp	.-62     	; 0xffe <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    103c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1040:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	92 2b       	or	r25, r18
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1048:	61 15       	cp	r22, r1
    104a:	71 05       	cpc	r23, r1
    104c:	19 f0       	breq	.+6      	; 0x1054 <Endpoint_Write_Control_PStream_LE+0x78>
    104e:	88 30       	cpi	r24, 0x08	; 8
    1050:	91 05       	cpc	r25, r1
    1052:	50 f0       	brcs	.+20     	; 0x1068 <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1054:	21 e0       	ldi	r18, 0x01	; 1
    1056:	08 97       	sbiw	r24, 0x08	; 8
    1058:	09 f0       	breq	.+2      	; 0x105c <Endpoint_Write_Control_PStream_LE+0x80>
    105a:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    105c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1060:	8e 77       	andi	r24, 0x7E	; 126
    1062:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1066:	cb cf       	rjmp	.-106    	; 0xffe <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1068:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    106a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    106e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1070:	61 50       	subi	r22, 0x01	; 1
    1072:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	e8 cf       	rjmp	.-48     	; 0x1048 <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1078:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    107c:	88 23       	and	r24, r24
    107e:	41 f0       	breq	.+16     	; 0x1090 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1080:	85 30       	cpi	r24, 0x05	; 5
    1082:	41 f0       	breq	.+16     	; 0x1094 <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1084:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1088:	83 ff       	sbrs	r24, 3
    108a:	be cf       	rjmp	.-132    	; 0x1008 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    108c:	81 e0       	ldi	r24, 0x01	; 1
}
    108e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1090:	82 e0       	ldi	r24, 0x02	; 2
    1092:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1094:	83 e0       	ldi	r24, 0x03	; 3
    1096:	08 95       	ret

00001098 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1098:	98 2f       	mov	r25, r24
    109a:	97 30       	cpi	r25, 0x07	; 7
    109c:	28 f0       	brcs	.+10     	; 0x10a8 <Endpoint_ConfigureEndpoint_Prv+0x10>
    109e:	8f 70       	andi	r24, 0x0F	; 15
    10a0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	08 95       	ret
    10a8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    10ac:	98 17       	cp	r25, r24
    10ae:	51 f0       	breq	.+20     	; 0x10c4 <Endpoint_ConfigureEndpoint_Prv+0x2c>
    10b0:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    10b4:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    10b8:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    10bc:	21 fd       	sbrc	r18, 1
    10be:	06 c0       	rjmp	.+12     	; 0x10cc <Endpoint_ConfigureEndpoint_Prv+0x34>
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	eb cf       	rjmp	.-42     	; 0x109a <Endpoint_ConfigureEndpoint_Prv+0x2>
    10c4:	24 2f       	mov	r18, r20
    10c6:	76 2f       	mov	r23, r22
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	f8 cf       	rjmp	.-16     	; 0x10bc <Endpoint_ConfigureEndpoint_Prv+0x24>
    10cc:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    10d0:	3e 7f       	andi	r19, 0xFE	; 254
    10d2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    10d6:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    10da:	3d 7f       	andi	r19, 0xFD	; 253
    10dc:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    10e0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    10e4:	31 60       	ori	r19, 0x01	; 1
    10e6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    10ea:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    10ee:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    10f2:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    10f6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    10fa:	27 fd       	sbrc	r18, 7
    10fc:	e1 cf       	rjmp	.-62     	; 0x10c0 <Endpoint_ConfigureEndpoint_Prv+0x28>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	08 95       	ret

00001102 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1102:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <USB_ControlRequest>
    1106:	87 ff       	sbrs	r24, 7
    1108:	13 c0       	rjmp	.+38     	; 0x1130 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    110a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    110e:	82 ff       	sbrs	r24, 2
    1110:	06 c0       	rjmp	.+12     	; 0x111e <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1112:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1116:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1118:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    111c:	04 c0       	rjmp	.+8      	; 0x1126 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    111e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
    1122:	81 11       	cpse	r24, r1
    1124:	f2 cf       	rjmp	.-28     	; 0x110a <Endpoint_ClearStatusStage+0x8>
    1126:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1128:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
    112c:	88 23       	and	r24, r24
    112e:	d9 f3       	breq	.-10     	; 0x1126 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1130:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    1134:	80 ff       	sbrs	r24, 0
    1136:	f8 cf       	rjmp	.-16     	; 0x1128 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1138:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    113c:	8e 77       	andi	r24, 0x7E	; 126
    113e:	ec cf       	rjmp	.-40     	; 0x1118 <Endpoint_ClearStatusStage+0x16>

00001140 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1140:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1144:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1148:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    114a:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    114e:	90 fd       	sbrc	r25, 0
    1150:	20 c0       	rjmp	.+64     	; 0x1192 <Endpoint_WaitUntilReady+0x52>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1152:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1156:	92 fd       	sbrc	r25, 2
    1158:	20 c0       	rjmp	.+64     	; 0x119a <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    115a:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    115e:	99 23       	and	r25, r25
    1160:	91 f0       	breq	.+36     	; 0x1186 <Endpoint_WaitUntilReady+0x46>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1162:	95 30       	cpi	r25, 0x05	; 5
    1164:	91 f0       	breq	.+36     	; 0x118a <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1166:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    116a:	95 fd       	sbrc	r25, 5
    116c:	10 c0       	rjmp	.+32     	; 0x118e <Endpoint_WaitUntilReady+0x4e>
    116e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1172:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1176:	42 17       	cp	r20, r18
    1178:	53 07       	cpc	r21, r19
    117a:	39 f3       	breq	.-50     	; 0x114a <Endpoint_WaitUntilReady+0xa>
    117c:	81 50       	subi	r24, 0x01	; 1
    117e:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1180:	21 f7       	brne	.-56     	; 0x114a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1182:	84 e0       	ldi	r24, 0x04	; 4
    1184:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	08 95       	ret
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1192:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
    1196:	90 ff       	sbrs	r25, 0
    1198:	e0 cf       	rjmp	.-64     	; 0x115a <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	08 95       	ret

0000119e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    11a6:	4b d0       	rcall	.+150    	; 0x123e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    11a8:	52 d0       	rcall	.+164    	; 0x124e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    11aa:	c8 ed       	ldi	r28, 0xD8	; 216
    11ac:	d0 e0       	ldi	r29, 0x00	; 0
    11ae:	88 81       	ld	r24, Y
    11b0:	8f 77       	andi	r24, 0x7F	; 127
    11b2:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    11b4:	88 81       	ld	r24, Y
    11b6:	80 68       	ori	r24, 0x80	; 128
    11b8:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    11ba:	88 81       	ld	r24, Y
    11bc:	8f 7d       	andi	r24, 0xDF	; 223
    11be:	88 83       	st	Y, r24
				PLLCSR = 0;
    11c0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    11c2:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    11c6:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    11ca:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    11ce:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    11d2:	00 ee       	ldi	r16, 0xE0	; 224
    11d4:	10 e0       	ldi	r17, 0x00	; 0
    11d6:	f8 01       	movw	r30, r16
    11d8:	80 81       	ld	r24, Z
    11da:	8b 7f       	andi	r24, 0xFB	; 251
    11dc:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    11de:	88 81       	ld	r24, Y
    11e0:	81 60       	ori	r24, 0x01	; 1
    11e2:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    11e4:	42 e0       	ldi	r20, 0x02	; 2
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	56 df       	rcall	.-340    	; 0x1098 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    11ec:	e1 ee       	ldi	r30, 0xE1	; 225
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8e 7f       	andi	r24, 0xFE	; 254
    11f4:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    11f6:	e2 ee       	ldi	r30, 0xE2	; 226
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	81 60       	ori	r24, 0x01	; 1
    11fe:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    1200:	80 81       	ld	r24, Z
    1202:	88 60       	ori	r24, 0x08	; 8
    1204:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    1206:	f8 01       	movw	r30, r16
    1208:	80 81       	ld	r24, Z
    120a:	8e 7f       	andi	r24, 0xFE	; 254
    120c:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    120e:	88 81       	ld	r24, Y
    1210:	80 61       	ori	r24, 0x10	; 16
    1212:	88 83       	st	Y, r24
}
    1214:	df 91       	pop	r29
    1216:	cf 91       	pop	r28
    1218:	1f 91       	pop	r17
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    121e:	e8 ed       	ldi	r30, 0xD8	; 216
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	8f 7e       	andi	r24, 0xEF	; 239
    1226:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1228:	e7 ed       	ldi	r30, 0xD7	; 215
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	81 60       	ori	r24, 0x01	; 1
    1230:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1232:	84 e0       	ldi	r24, 0x04	; 4
    1234:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <USB_IsInitialized>
	USB_ResetInterface();
    123c:	b0 cf       	rjmp	.-160    	; 0x119e <USB_ResetInterface>

0000123e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    123e:	e8 ed       	ldi	r30, 0xD8	; 216
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	8e 7f       	andi	r24, 0xFE	; 254
    1246:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1248:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    124c:	08 95       	ret

0000124e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    124e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1252:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1256:	08 95       	ret

00001258 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1258:	1f 92       	push	r1
    125a:	0f 92       	push	r0
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	0f 92       	push	r0
    1260:	11 24       	eor	r1, r1
    1262:	2f 93       	push	r18
    1264:	3f 93       	push	r19
    1266:	4f 93       	push	r20
    1268:	5f 93       	push	r21
    126a:	6f 93       	push	r22
    126c:	7f 93       	push	r23
    126e:	8f 93       	push	r24
    1270:	9f 93       	push	r25
    1272:	af 93       	push	r26
    1274:	bf 93       	push	r27
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    127a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    127e:	82 ff       	sbrs	r24, 2
    1280:	0a c0       	rjmp	.+20     	; 0x1296 <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
    1282:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1286:	82 ff       	sbrs	r24, 2
    1288:	06 c0       	rjmp	.+12     	; 0x1296 <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
    128a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    128e:	8b 7f       	andi	r24, 0xFB	; 251
    1290:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1294:	41 d2       	rcall	.+1154   	; 0x1718 <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    1296:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    129a:	80 ff       	sbrs	r24, 0
    129c:	19 c0       	rjmp	.+50     	; 0x12d0 <__vector_10+0x78>
						return (USBCON & (1 << VBUSTE));
    129e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    12a2:	80 ff       	sbrs	r24, 0
    12a4:	15 c0       	rjmp	.+42     	; 0x12d0 <__vector_10+0x78>
						USBINT &= ~(1 << VBUSTI);
    12a6:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    12aa:	8e 7f       	andi	r24, 0xFE	; 254
    12ac:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    12b0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    12b4:	80 ff       	sbrs	r24, 0
    12b6:	90 c0       	rjmp	.+288    	; 0x13d8 <__vector_10+0x180>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    12b8:	80 e1       	ldi	r24, 0x10	; 16
    12ba:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    12bc:	82 e1       	ldi	r24, 0x12	; 18
    12be:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    12c0:	09 b4       	in	r0, 0x29	; 41
    12c2:	00 fe       	sbrs	r0, 0
    12c4:	fd cf       	rjmp	.-6      	; 0x12c0 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    12cc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    12d0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    12d4:	80 ff       	sbrs	r24, 0
    12d6:	18 c0       	rjmp	.+48     	; 0x1308 <__vector_10+0xb0>
						return (UDIEN  & (1 << SUSPE));
    12d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    12dc:	80 ff       	sbrs	r24, 0
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <__vector_10+0xb0>
						UDIEN  &= ~(1 << SUSPE);
    12e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    12e4:	8e 7f       	andi	r24, 0xFE	; 254
    12e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    12ea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    12ee:	80 61       	ori	r24, 0x10	; 16
    12f0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    12f4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    12f8:	80 62       	ori	r24, 0x20	; 32
    12fa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    12fe:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1300:	85 e0       	ldi	r24, 0x05	; 5
    1302:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1306:	08 d2       	rcall	.+1040   	; 0x1718 <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
    1308:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    130c:	84 ff       	sbrs	r24, 4
    130e:	28 c0       	rjmp	.+80     	; 0x1360 <__vector_10+0x108>
						return (UDIEN  & (1 << WAKEUPE));
    1310:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1314:	84 ff       	sbrs	r24, 4
    1316:	24 c0       	rjmp	.+72     	; 0x1360 <__vector_10+0x108>
				PLLCSR = USB_PLL_PSC;
    1318:	80 e1       	ldi	r24, 0x10	; 16
    131a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    131c:	82 e1       	ldi	r24, 0x12	; 18
    131e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1320:	09 b4       	in	r0, 0x29	; 41
    1322:	00 fe       	sbrs	r0, 0
    1324:	fd cf       	rjmp	.-6      	; 0x1320 <__vector_10+0xc8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1326:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    132a:	8f 7d       	andi	r24, 0xDF	; 223
    132c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1330:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1334:	8f 7e       	andi	r24, 0xEF	; 239
    1336:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    133a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    133e:	8f 7e       	andi	r24, 0xEF	; 239
    1340:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1344:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1348:	81 60       	ori	r24, 0x01	; 1
    134a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    134e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <USB_Device_ConfigurationNumber>
    1352:	88 23       	and	r24, r24
    1354:	09 f4       	brne	.+2      	; 0x1358 <__vector_10+0x100>
    1356:	46 c0       	rjmp	.+140    	; 0x13e4 <__vector_10+0x18c>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1358:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    135a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    135e:	dc d1       	rcall	.+952    	; 0x1718 <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
    1360:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1364:	83 ff       	sbrs	r24, 3
    1366:	27 c0       	rjmp	.+78     	; 0x13b6 <__vector_10+0x15e>
						return (UDIEN  & (1 << EORSTE));
    1368:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    136c:	83 ff       	sbrs	r24, 3
    136e:	23 c0       	rjmp	.+70     	; 0x13b6 <__vector_10+0x15e>
						UDINT  &= ~(1 << EORSTI);
    1370:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1374:	87 7f       	andi	r24, 0xF7	; 247
    1376:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1380:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1384:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1388:	8e 7f       	andi	r24, 0xFE	; 254
    138a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    138e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1392:	8e 7f       	andi	r24, 0xFE	; 254
    1394:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1398:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    139c:	80 61       	ori	r24, 0x10	; 16
    139e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    13a2:	42 e0       	ldi	r20, 0x02	; 2
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	77 de       	rcall	.-786    	; 0x1098 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    13aa:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    13ae:	88 60       	ori	r24, 0x08	; 8
    13b0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    13b4:	b1 d1       	rcall	.+866    	; 0x1718 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    13b6:	ff 91       	pop	r31
    13b8:	ef 91       	pop	r30
    13ba:	bf 91       	pop	r27
    13bc:	af 91       	pop	r26
    13be:	9f 91       	pop	r25
    13c0:	8f 91       	pop	r24
    13c2:	7f 91       	pop	r23
    13c4:	6f 91       	pop	r22
    13c6:	5f 91       	pop	r21
    13c8:	4f 91       	pop	r20
    13ca:	3f 91       	pop	r19
    13cc:	2f 91       	pop	r18
    13ce:	0f 90       	pop	r0
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	0f 90       	pop	r0
    13d4:	1f 90       	pop	r1
    13d6:	18 95       	reti
				PLLCSR = 0;
    13d8:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    13da:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    13de:	0e 94 f6 00 	call	0x1ec	; 0x1ec <EVENT_USB_Device_Disconnect>
    13e2:	76 cf       	rjmp	.-276    	; 0x12d0 <__vector_10+0x78>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    13e4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    13e8:	87 fd       	sbrc	r24, 7
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <__vector_10+0x198>
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	b5 cf       	rjmp	.-150    	; 0x135a <__vector_10+0x102>
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	b3 cf       	rjmp	.-154    	; 0x135a <__vector_10+0x102>

000013f4 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    13f4:	1f 92       	push	r1
    13f6:	0f 92       	push	r0
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	0f 92       	push	r0
    13fc:	11 24       	eor	r1, r1
    13fe:	2f 93       	push	r18
    1400:	3f 93       	push	r19
    1402:	4f 93       	push	r20
    1404:	5f 93       	push	r21
    1406:	6f 93       	push	r22
    1408:	7f 93       	push	r23
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
    1412:	cf 93       	push	r28
    1414:	ef 93       	push	r30
    1416:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1418:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    141c:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    141e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1422:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    1426:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    142a:	87 7f       	andi	r24, 0xF7	; 247
    142c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1430:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1432:	1b d0       	rcall	.+54     	; 0x146a <USB_Device_ProcessControlRequest>
    1434:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    1438:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    143c:	88 60       	ori	r24, 0x08	; 8
    143e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1442:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1446:	ff 91       	pop	r31
    1448:	ef 91       	pop	r30
    144a:	cf 91       	pop	r28
    144c:	bf 91       	pop	r27
    144e:	af 91       	pop	r26
    1450:	9f 91       	pop	r25
    1452:	8f 91       	pop	r24
    1454:	7f 91       	pop	r23
    1456:	6f 91       	pop	r22
    1458:	5f 91       	pop	r21
    145a:	4f 91       	pop	r20
    145c:	3f 91       	pop	r19
    145e:	2f 91       	pop	r18
    1460:	0f 90       	pop	r0
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	0f 90       	pop	r0
    1466:	1f 90       	pop	r1
    1468:	18 95       	reti

0000146a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	aa 97       	sbiw	r28, 0x2a	; 42
    1476:	0f b6       	in	r0, 0x3f	; 63
    1478:	f8 94       	cli
    147a:	de bf       	out	0x3e, r29	; 62
    147c:	0f be       	out	0x3f, r0	; 63
    147e:	cd bf       	out	0x3d, r28	; 61
    1480:	e9 e6       	ldi	r30, 0x69	; 105
    1482:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1484:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1488:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    148a:	21 e0       	ldi	r18, 0x01	; 1
    148c:	e1 37       	cpi	r30, 0x71	; 113
    148e:	f2 07       	cpc	r31, r18
    1490:	c9 f7       	brne	.-14     	; 0x1484 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1492:	0e 94 0b 01 	call	0x216	; 0x216 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1496:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    149a:	83 ff       	sbrs	r24, 3
    149c:	10 c0       	rjmp	.+32     	; 0x14be <USB_Device_ProcessControlRequest+0x54>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    149e:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    14a2:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <USB_ControlRequest+0x1>
    14a6:	95 30       	cpi	r25, 0x05	; 5
    14a8:	09 f4       	brne	.+2      	; 0x14ac <USB_Device_ProcessControlRequest+0x42>
    14aa:	d2 c0       	rjmp	.+420    	; 0x1650 <USB_Device_ProcessControlRequest+0x1e6>
    14ac:	00 f5       	brcc	.+64     	; 0x14ee <USB_Device_ProcessControlRequest+0x84>
    14ae:	91 30       	cpi	r25, 0x01	; 1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <USB_Device_ProcessControlRequest+0x4a>
    14b2:	88 c0       	rjmp	.+272    	; 0x15c4 <USB_Device_ProcessControlRequest+0x15a>
    14b4:	08 f4       	brcc	.+2      	; 0x14b8 <USB_Device_ProcessControlRequest+0x4e>
    14b6:	61 c0       	rjmp	.+194    	; 0x157a <USB_Device_ProcessControlRequest+0x110>
    14b8:	93 30       	cpi	r25, 0x03	; 3
    14ba:	09 f4       	brne	.+2      	; 0x14be <USB_Device_ProcessControlRequest+0x54>
    14bc:	83 c0       	rjmp	.+262    	; 0x15c4 <USB_Device_ProcessControlRequest+0x15a>
    14be:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    14c2:	83 ff       	sbrs	r24, 3
    14c4:	0a c0       	rjmp	.+20     	; 0x14da <USB_Device_ProcessControlRequest+0x70>
				UEINTX &= ~(1 << RXSTPI);
    14c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14ca:	87 7f       	andi	r24, 0xF7	; 247
    14cc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    14d0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    14d4:	80 62       	ori	r24, 0x20	; 32
    14d6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    14da:	aa 96       	adiw	r28, 0x2a	; 42
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
    14ee:	98 30       	cpi	r25, 0x08	; 8
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <USB_Device_ProcessControlRequest+0x8a>
    14f2:	e6 c0       	rjmp	.+460    	; 0x16c0 <USB_Device_ProcessControlRequest+0x256>
    14f4:	99 30       	cpi	r25, 0x09	; 9
    14f6:	09 f4       	brne	.+2      	; 0x14fa <USB_Device_ProcessControlRequest+0x90>
    14f8:	f0 c0       	rjmp	.+480    	; 0x16da <USB_Device_ProcessControlRequest+0x270>
    14fa:	96 30       	cpi	r25, 0x06	; 6
    14fc:	01 f7       	brne	.-64     	; 0x14be <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14fe:	80 58       	subi	r24, 0x80	; 128
    1500:	82 30       	cpi	r24, 0x02	; 2
    1502:	e8 f6       	brcc	.-70     	; 0x14be <USB_Device_ProcessControlRequest+0x54>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1504:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    1508:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <USB_ControlRequest+0x3>
    150c:	8c 3d       	cpi	r24, 0xDC	; 220
    150e:	23 e0       	ldi	r18, 0x03	; 3
    1510:	92 07       	cpc	r25, r18
    1512:	09 f0       	breq	.+2      	; 0x1516 <USB_Device_ProcessControlRequest+0xac>
    1514:	c1 c0       	rjmp	.+386    	; 0x1698 <USB_Device_ProcessControlRequest+0x22e>
	SignatureDescriptor.Header.Type = DTYPE_String;
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    151a:	8a e2       	ldi	r24, 0x2A	; 42
    151c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    151e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1520:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1522:	de 01       	movw	r26, r28
    1524:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1526:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1528:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    152a:	51 e2       	ldi	r21, 0x21	; 33
    152c:	e3 2f       	mov	r30, r19
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1534:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1536:	20 ff       	sbrs	r18, 0
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <USB_Device_ProcessControlRequest+0xd6>
					{
						SerialByte >>= 4;
    153a:	e2 95       	swap	r30
    153c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    153e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1540:	ef 70       	andi	r30, 0x0F	; 15
    1542:	8e 2f       	mov	r24, r30
    1544:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1546:	ea 30       	cpi	r30, 0x0A	; 10
    1548:	08 f4       	brcc	.+2      	; 0x154c <USB_Device_ProcessControlRequest+0xe2>
    154a:	a4 c0       	rjmp	.+328    	; 0x1694 <USB_Device_ProcessControlRequest+0x22a>
    154c:	c7 96       	adiw	r24, 0x37	; 55
    154e:	8d 93       	st	X+, r24
    1550:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1552:	2f 5f       	subi	r18, 0xFF	; 255
    1554:	24 31       	cpi	r18, 0x14	; 20
    1556:	51 f7       	brne	.-44     	; 0x152c <USB_Device_ProcessControlRequest+0xc2>
				SREG = GlobalIntState;
    1558:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    155a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    155e:	87 7f       	andi	r24, 0xF7	; 247
    1560:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1564:	6a e2       	ldi	r22, 0x2A	; 42
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	ce 01       	movw	r24, r28
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	da dc       	rcall	.-1612   	; 0xf22 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    156e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1572:	8b 77       	andi	r24, 0x7B	; 123
    1574:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1578:	a2 cf       	rjmp	.-188    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    157a:	80 38       	cpi	r24, 0x80	; 128
    157c:	81 f0       	breq	.+32     	; 0x159e <USB_Device_ProcessControlRequest+0x134>
    157e:	82 38       	cpi	r24, 0x82	; 130
    1580:	09 f0       	breq	.+2      	; 0x1584 <USB_Device_ProcessControlRequest+0x11a>
    1582:	9d cf       	rjmp	.-198    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1584:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <USB_ControlRequest+0x4>
    1588:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    158a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    158e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1592:	85 fb       	bst	r24, 5
    1594:	88 27       	eor	r24, r24
    1596:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1598:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <USB_Device_ProcessControlRequest+0x140>
	uint8_t CurrentStatus = 0;
    159e:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    15a2:	90 91 66 01 	lds	r25, 0x0166	; 0x800166 <USB_Device_RemoteWakeupEnabled>
    15a6:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    15a8:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    15aa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15ae:	97 7f       	andi	r25, 0xF7	; 247
    15b0:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    15b4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    15b8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    15bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15c0:	8e 77       	andi	r24, 0x7E	; 126
    15c2:	2f c0       	rjmp	.+94     	; 0x1622 <USB_Device_ProcessControlRequest+0x1b8>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15c4:	28 2f       	mov	r18, r24
    15c6:	2d 7f       	andi	r18, 0xFD	; 253
    15c8:	09 f0       	breq	.+2      	; 0x15cc <USB_Device_ProcessControlRequest+0x162>
    15ca:	79 cf       	rjmp	.-270    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    15cc:	88 23       	and	r24, r24
    15ce:	d1 f0       	breq	.+52     	; 0x1604 <USB_Device_ProcessControlRequest+0x19a>
    15d0:	82 30       	cpi	r24, 0x02	; 2
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <USB_Device_ProcessControlRequest+0x16c>
    15d4:	74 cf       	rjmp	.-280    	; 0x14be <USB_Device_ProcessControlRequest+0x54>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    15d6:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    15da:	81 11       	cpse	r24, r1
    15dc:	1d c0       	rjmp	.+58     	; 0x1618 <USB_Device_ProcessControlRequest+0x1ae>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    15de:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <USB_ControlRequest+0x4>
    15e2:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <USB_Device_ProcessControlRequest+0x17e>
    15e6:	6b cf       	rjmp	.-298    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15e8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    15ec:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    15f0:	20 ff       	sbrs	r18, 0
    15f2:	12 c0       	rjmp	.+36     	; 0x1618 <USB_Device_ProcessControlRequest+0x1ae>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    15f4:	93 30       	cpi	r25, 0x03	; 3
    15f6:	c9 f4       	brne	.+50     	; 0x162a <USB_Device_ProcessControlRequest+0x1c0>
				UECONX |= (1 << STALLRQ);
    15f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    15fc:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    15fe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1602:	0a c0       	rjmp	.+20     	; 0x1618 <USB_Device_ProcessControlRequest+0x1ae>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1604:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	09 f0       	breq	.+2      	; 0x160e <USB_Device_ProcessControlRequest+0x1a4>
    160c:	58 cf       	rjmp	.-336    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    160e:	93 30       	cpi	r25, 0x03	; 3
    1610:	09 f0       	breq	.+2      	; 0x1614 <USB_Device_ProcessControlRequest+0x1aa>
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1618:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    161c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1620:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1622:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1626:	6d dd       	rcall	.-1318   	; 0x1102 <Endpoint_ClearStatusStage>
    1628:	4a cf       	rjmp	.-364    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
				UECONX |= (1 << STALLRQC);
    162a:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    162e:	90 61       	ori	r25, 0x10	; 16
    1630:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1634:	21 e0       	ldi	r18, 0x01	; 1
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	01 c0       	rjmp	.+2      	; 0x163c <USB_Device_ProcessControlRequest+0x1d2>
    163a:	22 0f       	add	r18, r18
    163c:	8a 95       	dec	r24
    163e:	ea f7       	brpl	.-6      	; 0x163a <USB_Device_ProcessControlRequest+0x1d0>
    1640:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1644:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    1648:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    164c:	88 60       	ori	r24, 0x08	; 8
    164e:	d7 cf       	rjmp	.-82     	; 0x15fe <USB_Device_ProcessControlRequest+0x194>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1650:	81 11       	cpse	r24, r1
    1652:	35 cf       	rjmp	.-406    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1654:	10 91 6b 01 	lds	r17, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    1658:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    165a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    165e:	80 78       	andi	r24, 0x80	; 128
    1660:	81 2b       	or	r24, r17
    1662:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    1666:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    166a:	87 7f       	andi	r24, 0xF7	; 247
    166c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1670:	48 dd       	rcall	.-1392   	; 0x1102 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1672:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    1676:	80 ff       	sbrs	r24, 0
    1678:	fc cf       	rjmp	.-8      	; 0x1672 <USB_Device_ProcessControlRequest+0x208>
				UDADDR |= (1 << ADDEN);
    167a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    167e:	80 68       	ori	r24, 0x80	; 128
    1680:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1684:	11 11       	cpse	r17, r1
    1686:	04 c0       	rjmp	.+8      	; 0x1690 <USB_Device_ProcessControlRequest+0x226>
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>
    168e:	17 cf       	rjmp	.-466    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
    1690:	83 e0       	ldi	r24, 0x03	; 3
    1692:	fb cf       	rjmp	.-10     	; 0x168a <USB_Device_ProcessControlRequest+0x220>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1694:	c0 96       	adiw	r24, 0x30	; 48
    1696:	5b cf       	rjmp	.-330    	; 0x154e <USB_Device_ProcessControlRequest+0xe4>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1698:	ae 01       	movw	r20, r28
    169a:	4f 5f       	subi	r20, 0xFF	; 255
    169c:	5f 4f       	sbci	r21, 0xFF	; 255
    169e:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <USB_ControlRequest+0x4>
    16a2:	0e 94 34 02 	call	0x468	; 0x468 <CALLBACK_USB_GetDescriptor>
    16a6:	bc 01       	movw	r22, r24
    16a8:	89 2b       	or	r24, r25
    16aa:	09 f4       	brne	.+2      	; 0x16ae <USB_Device_ProcessControlRequest+0x244>
    16ac:	08 cf       	rjmp	.-496    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    16ae:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16b2:	97 7f       	andi	r25, 0xF7	; 247
    16b4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	9a 81       	ldd	r25, Y+2	; 0x02
    16bc:	8f dc       	rcall	.-1762   	; 0xfdc <Endpoint_Write_Control_PStream_LE>
    16be:	57 cf       	rjmp	.-338    	; 0x156e <USB_Device_ProcessControlRequest+0x104>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    16c0:	80 38       	cpi	r24, 0x80	; 128
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <USB_Device_ProcessControlRequest+0x25c>
    16c4:	fc ce       	rjmp	.-520    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
    16c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16ca:	87 7f       	andi	r24, 0xF7	; 247
    16cc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    16d0:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    16d4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    16d8:	71 cf       	rjmp	.-286    	; 0x15bc <USB_Device_ProcessControlRequest+0x152>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    16da:	81 11       	cpse	r24, r1
    16dc:	f0 ce       	rjmp	.-544    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    16de:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <USB_ControlRequest+0x2>
    16e2:	92 30       	cpi	r25, 0x02	; 2
    16e4:	08 f0       	brcs	.+2      	; 0x16e8 <USB_Device_ProcessControlRequest+0x27e>
    16e6:	eb ce       	rjmp	.-554    	; 0x14be <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    16e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16ec:	87 7f       	andi	r24, 0xF7	; 247
    16ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    16f2:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    16f6:	05 dd       	rcall	.-1526   	; 0x1102 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    16f8:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <USB_Device_ConfigurationNumber>
    16fc:	88 23       	and	r24, r24
    16fe:	11 f0       	breq	.+4      	; 0x1704 <USB_Device_ProcessControlRequest+0x29a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1700:	84 e0       	ldi	r24, 0x04	; 4
    1702:	05 c0       	rjmp	.+10     	; 0x170e <USB_Device_ProcessControlRequest+0x2a4>
				return (UDADDR & (1 << ADDEN));
    1704:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1708:	87 fd       	sbrc	r24, 7
    170a:	fa cf       	rjmp	.-12     	; 0x1700 <USB_Device_ProcessControlRequest+0x296>
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1712:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <EVENT_USB_Device_ConfigurationChanged>
    1716:	d3 ce       	rjmp	.-602    	; 0x14be <USB_Device_ProcessControlRequest+0x54>

00001718 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1718:	08 95       	ret

0000171a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    171a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    171c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <USB_DeviceState>
    1720:	88 23       	and	r24, r24
    1722:	91 f0       	breq	.+36     	; 0x1748 <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1724:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1728:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    172a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    172e:	80 fd       	sbrc	r24, 0
    1730:	0d c0       	rjmp	.+26     	; 0x174c <USB_USBTask+0x32>
    1732:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1734:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1736:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    173a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    173e:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1740:	94 de       	rcall	.-728    	; 0x146a <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1742:	cf 70       	andi	r28, 0x0F	; 15
    1744:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    174c:	80 e8       	ldi	r24, 0x80	; 128
    174e:	f2 cf       	rjmp	.-28     	; 0x1734 <USB_USBTask+0x1a>

00001750 <_exit>:
    1750:	f8 94       	cli

00001752 <__stop_program>:
    1752:	ff cf       	rjmp	.-2      	; 0x1752 <__stop_program>
