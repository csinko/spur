
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  000018ee  00001982  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000236  00800294  00800294  00001b16  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001b16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00001b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007842  00000000  00000000  00001e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002403  00000000  00000000  000096c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003dce  00000000  00000000  0000bac5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a18  00000000  00000000  0000f894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000027a3  00000000  00000000  000102ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000048df  00000000  00000000  00012a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000850  00000000  00000000  0001732e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8d c0       	rjmp	.+282    	; 0x11c <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__vector_10>
      2c:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <__vector_11>
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop
      98:	5d c0       	rjmp	.+186    	; 0x154 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5b c0       	rjmp	.+182    	; 0x154 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	59 c0       	rjmp	.+178    	; 0x154 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	57 c0       	rjmp	.+174    	; 0x154 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	55 c0       	rjmp	.+170    	; 0x154 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	2c 03 53 00 70 00 75 00 72 00 20 00 4d 00 75 00     ,.S.p.u.r. .M.u.
      bc:	6c 00 74 00 69 00 62 00 6f 00 6f 00 74 00 20 00     l.t.i.b.o.o.t. .
      cc:	44 00 65 00 76 00 69 00 63 00 65 00 00 00           D.e.v.i.c.e...

000000da <ManufacturerString>:
      da:	0a 03 53 00 70 00 75 00 72 00 00 00                 ..S.p.u.r...

000000e6 <LanguageString>:
      e6:	04 03 09 04                                         ....

000000ea <ConfigurationDescriptor>:
      ea:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      fa:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

0000010a <DeviceDescriptor>:
     10a:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     11a:	dc 01                                               ..

0000011c <__ctors_end>:
     11c:	11 24       	eor	r1, r1
     11e:	1f be       	out	0x3f, r1	; 63
     120:	cf ef       	ldi	r28, 0xFF	; 255
     122:	da e0       	ldi	r29, 0x0A	; 10
     124:	de bf       	out	0x3e, r29	; 62
     126:	cd bf       	out	0x3d, r28	; 61

00000128 <__do_copy_data>:
     128:	12 e0       	ldi	r17, 0x02	; 2
     12a:	a0 e0       	ldi	r26, 0x00	; 0
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	ee ee       	ldi	r30, 0xEE	; 238
     130:	f8 e1       	ldi	r31, 0x18	; 24
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x10>
     134:	05 90       	lpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a4 39       	cpi	r26, 0x94	; 148
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0xc>

0000013e <__do_clear_bss>:
     13e:	24 e0       	ldi	r18, 0x04	; 4
     140:	a4 e9       	ldi	r26, 0x94	; 148
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	aa 3c       	cpi	r26, 0xCA	; 202
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	71 d1       	rcall	.+738    	; 0x432 <main>
     150:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <LEDs_SetAllLEDs>:
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
     156:	25 b1       	in	r18, 0x05	; 5
     158:	98 2f       	mov	r25, r24
     15a:	91 70       	andi	r25, 0x01	; 1
     15c:	90 95       	com	r25
     15e:	21 60       	ori	r18, 0x01	; 1
     160:	92 23       	and	r25, r18
     162:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
     164:	2b b1       	in	r18, 0x0b	; 11
     166:	98 2f       	mov	r25, r24
     168:	90 72       	andi	r25, 0x20	; 32
     16a:	90 95       	com	r25
     16c:	20 62       	ori	r18, 0x20	; 32
     16e:	92 23       	and	r25, r18
     170:	9b b9       	out	0x0b, r25	; 11
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
     172:	98 b1       	in	r25, 0x08	; 8
     174:	9f 77       	andi	r25, 0x7F	; 127
     176:	80 78       	andi	r24, 0x80	; 128
     178:	89 2b       	or	r24, r25
     17a:	88 b9       	out	0x08, r24	; 8
     17c:	08 95       	ret

0000017e <SetupHardware>:

void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     17e:	84 b7       	in	r24, 0x34	; 52
     180:	87 7f       	andi	r24, 0xF7	; 247
     182:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	a8 95       	wdr
     18a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     18e:	88 61       	ori	r24, 0x18	; 24
     190:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     194:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     198:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	80 e8       	ldi	r24, 0x80	; 128
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1aa:	0f be       	out	0x3f, r0	; 63
				DDRB  |=  LEDS_PORTB_LEDS;
     1ac:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     1ae:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     1b0:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     1b2:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     1b4:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     1b6:	47 98       	cbi	0x08, 7	; 8
#endif

	/* Hardware Initialization */
	LEDs_Init();
	//Dataflash_Init();
	USB_Init();
     1b8:	0c 94 8e 09 	jmp	0x131c	; 0x131c <USB_Init>

000001bc <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1bc:	80 ea       	ldi	r24, 0xA0	; 160
     1be:	cb df       	rcall	.-106    	; 0x156 <LEDs_SetAllLEDs>

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     1c0:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <__data_end>
     1c4:	08 95       	ret

000001c6 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	c6 cf       	rjmp	.-116    	; 0x156 <LEDs_SetAllLEDs>

000001ca <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     1ca:	cf 93       	push	r28
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     1cc:	42 e3       	ldi	r20, 0x32	; 50
     1ce:	61 e8       	ldi	r22, 0x81	; 129
     1d0:	83 e0       	ldi	r24, 0x03	; 3
     1d2:	e1 d7       	rcall	.+4034   	; 0x1196 <Endpoint_ConfigureEndpoint_Prv>
     1d4:	c8 2f       	mov	r28, r24
     1d6:	42 e3       	ldi	r20, 0x32	; 50
     1d8:	60 e8       	ldi	r22, 0x80	; 128
     1da:	84 e0       	ldi	r24, 0x04	; 4
     1dc:	dc d7       	rcall	.+4024   	; 0x1196 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1de:	88 23       	and	r24, r24
     1e0:	11 f0       	breq	.+4      	; 0x1e6 <EVENT_USB_Device_ConfigurationChanged+0x1c>
     1e2:	c1 11       	cpse	r28, r1
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <EVENT_USB_Device_ConfigurationChanged+0x22>
     1e6:	81 e8       	ldi	r24, 0x81	; 129
}
     1e8:	cf 91       	pop	r28
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1ea:	b5 cf       	rjmp	.-150    	; 0x156 <LEDs_SetAllLEDs>
     1ec:	80 e2       	ldi	r24, 0x20	; 32
     1ee:	fc cf       	rjmp	.-8      	; 0x1e8 <EVENT_USB_Device_ConfigurationChanged+0x1e>

000001f0 <EVENT_USB_Device_ControlRequest>:
	serialWrite(' ');
	serialWrite('\n');
	serialWrite('\r');*/

	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     1f0:	80 91 c3 04 	lds	r24, 0x04C3	; 0x8004c3 <USB_ControlRequest+0x1>
     1f4:	8e 3f       	cpi	r24, 0xFE	; 254
     1f6:	81 f0       	breq	.+32     	; 0x218 <EVENT_USB_Device_ControlRequest+0x28>
     1f8:	8f 3f       	cpi	r24, 0xFF	; 255
     1fa:	f9 f4       	brne	.+62     	; 0x23a <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     1fc:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <USB_ControlRequest>
     200:	81 32       	cpi	r24, 0x21	; 33
     202:	d9 f4       	brne	.+54     	; 0x23a <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     204:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     208:	87 7f       	andi	r24, 0xF7	; 247
     20a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     20e:	f8 d7       	rcall	.+4080   	; 0x1200 <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <__data_end>
     216:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     218:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <USB_ControlRequest>
     21c:	81 3a       	cpi	r24, 0xA1	; 161
     21e:	69 f4       	brne	.+26     	; 0x23a <EVENT_USB_Device_ControlRequest+0x4a>
     220:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     224:	87 7f       	andi	r24, 0xF7	; 247
     226:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     22a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     22e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     232:	8e 77       	andi	r24, 0x7E	; 126
     234:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     238:	e3 c7       	rjmp	.+4038   	; 0x1200 <Endpoint_ClearStatusStage>
     23a:	08 95       	ret

0000023c <MassStorage_Task>:

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	00 d0       	rcall	.+0      	; 0x242 <MassStorage_Task+0x6>
     242:	cd b7       	in	r28, 0x3d	; 61
     244:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     246:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <USB_DeviceState>
     24a:	84 30       	cpi	r24, 0x04	; 4
     24c:	09 f0       	breq	.+2      	; 0x250 <MassStorage_Task+0x14>
     24e:	69 c0       	rjmp	.+210    	; 0x322 <MassStorage_Task+0xe6>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     250:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     254:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     258:	82 ff       	sbrs	r24, 2
     25a:	39 c0       	rjmp	.+114    	; 0x2ce <MassStorage_Task+0x92>
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
     25c:	1a 82       	std	Y+2, r1	; 0x02
     25e:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     260:	ae 01       	movw	r20, r28
     262:	4f 5f       	subi	r20, 0xFF	; 255
     264:	5f 4f       	sbci	r21, 0xFF	; 255
     266:	6f e0       	ldi	r22, 0x0F	; 15
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	8e e9       	ldi	r24, 0x9E	; 158
     26c:	94 e0       	ldi	r25, 0x04	; 4
     26e:	8b d6       	rcall	.+3350   	; 0xf86 <Endpoint_Read_Stream_LE>
     270:	85 30       	cpi	r24, 0x05	; 5
     272:	49 f1       	breq	.+82     	; 0x2c6 <MassStorage_Task+0x8a>
		if (IsMassStoreReset)
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     274:	80 91 9e 04 	lds	r24, 0x049E	; 0x80049e <CommandBlock>
     278:	90 91 9f 04 	lds	r25, 0x049F	; 0x80049f <CommandBlock+0x1>
     27c:	a0 91 a0 04 	lds	r26, 0x04A0	; 0x8004a0 <CommandBlock+0x2>
     280:	b0 91 a1 04 	lds	r27, 0x04A1	; 0x8004a1 <CommandBlock+0x3>
     284:	85 35       	cpi	r24, 0x55	; 85
     286:	93 45       	sbci	r25, 0x53	; 83
     288:	a2 44       	sbci	r26, 0x42	; 66
     28a:	b3 44       	sbci	r27, 0x43	; 67
     28c:	71 f4       	brne	.+28     	; 0x2aa <MassStorage_Task+0x6e>
     28e:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <CommandBlock+0xd>
     292:	81 11       	cpse	r24, r1
     294:	0a c0       	rjmp	.+20     	; 0x2aa <MassStorage_Task+0x6e>
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
     296:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <CommandBlock+0xc>
     29a:	8f 71       	andi	r24, 0x1F	; 31
     29c:	31 f4       	brne	.+12     	; 0x2aa <MassStorage_Task+0x6e>
		(CommandBlock.Flags              & 0x1F)             ||
     29e:	80 91 ac 04 	lds	r24, 0x04AC	; 0x8004ac <CommandBlock+0xe>
     2a2:	81 50       	subi	r24, 0x01	; 1
     2a4:	80 31       	cpi	r24, 0x10	; 16
     2a6:	08 f4       	brcc	.+2      	; 0x2aa <MassStorage_Task+0x6e>
     2a8:	41 c0       	rjmp	.+130    	; 0x32c <MassStorage_Task+0xf0>
				UECONX |= (1 << STALLRQ);
     2aa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2ae:	80 62       	ori	r24, 0x20	; 32
     2b0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2b4:	83 e0       	ldi	r24, 0x03	; 3
     2b6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQ);
     2ba:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2be:	80 62       	ori	r24, 0x20	; 32
     2c0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2c4:	04 c0       	rjmp	.+8      	; 0x2ce <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     2c6:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     2ca:	88 23       	and	r24, r24
     2cc:	49 f2       	breq	.-110    	; 0x260 <MassStorage_Task+0x24>
	if (IsMassStoreReset)
     2ce:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     2d2:	88 23       	and	r24, r24
     2d4:	31 f1       	breq	.+76     	; 0x322 <MassStorage_Task+0xe6>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2d6:	80 e1       	ldi	r24, 0x10	; 16
     2d8:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     2dc:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2e0:	88 e0       	ldi	r24, 0x08	; 8
     2e2:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     2e6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2ea:	84 e0       	ldi	r24, 0x04	; 4
     2ec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     2f0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2f4:	80 61       	ori	r24, 0x10	; 16
     2f6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     2fa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2fe:	88 60       	ori	r24, 0x08	; 8
     300:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     304:	83 e0       	ldi	r24, 0x03	; 3
     306:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     30a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     30e:	80 61       	ori	r24, 0x10	; 16
     310:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     314:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     318:	88 60       	ori	r24, 0x08	; 8
     31a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		IsMassStoreReset = false;
     31e:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <__data_end>
}
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret
	}

	//serialWriteArray(msg, 21);

	/* Read in command block command data */
	BytesTransferred = 0;
     32c:	1a 82       	std	Y+2, r1	; 0x02
     32e:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     330:	60 91 ac 04 	lds	r22, 0x04AC	; 0x8004ac <CommandBlock+0xe>
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	ae 01       	movw	r20, r28
     338:	4f 5f       	subi	r20, 0xFF	; 255
     33a:	5f 4f       	sbci	r21, 0xFF	; 255
     33c:	8d ea       	ldi	r24, 0xAD	; 173
     33e:	94 e0       	ldi	r25, 0x04	; 4
     340:	22 d6       	rcall	.+3140   	; 0xf86 <Endpoint_Read_Stream_LE>
     342:	85 30       	cpi	r24, 0x05	; 5
     344:	09 f4       	brne	.+2      	; 0x348 <MassStorage_Task+0x10c>
     346:	5e c0       	rjmp	.+188    	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     348:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     34c:	8b 77       	andi	r24, 0x7B	; 123
     34e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     352:	80 e2       	ldi	r24, 0x20	; 32
     354:	00 df       	rcall	.-512    	; 0x156 <LEDs_SetAllLEDs>
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     356:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <CommandBlock+0xc>
     35a:	87 ff       	sbrs	r24, 7
     35c:	03 c0       	rjmp	.+6      	; 0x364 <MassStorage_Task+0x128>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     35e:	83 e0       	ldi	r24, 0x03	; 3
     360:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     364:	17 d2       	rcall	.+1070   	; 0x794 <SCSI_DecodeSCSICommand>
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	89 27       	eor	r24, r25
     36a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <CommandStatus+0xc>
		CommandStatus.Tag = CommandBlock.Tag;
     36e:	40 91 a2 04 	lds	r20, 0x04A2	; 0x8004a2 <CommandBlock+0x4>
     372:	50 91 a3 04 	lds	r21, 0x04A3	; 0x8004a3 <CommandBlock+0x5>
     376:	60 91 a4 04 	lds	r22, 0x04A4	; 0x8004a4 <CommandBlock+0x6>
     37a:	70 91 a5 04 	lds	r23, 0x04A5	; 0x8004a5 <CommandBlock+0x7>
     37e:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <CommandStatus+0x4>
     382:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <CommandStatus+0x5>
     386:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <CommandStatus+0x6>
     38a:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <CommandStatus+0x7>
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     38e:	40 91 a6 04 	lds	r20, 0x04A6	; 0x8004a6 <CommandBlock+0x8>
     392:	50 91 a7 04 	lds	r21, 0x04A7	; 0x8004a7 <CommandBlock+0x9>
     396:	60 91 a8 04 	lds	r22, 0x04A8	; 0x8004a8 <CommandBlock+0xa>
     39a:	70 91 a9 04 	lds	r23, 0x04A9	; 0x8004a9 <CommandBlock+0xb>
     39e:	40 93 2f 01 	sts	0x012F, r20	; 0x80012f <CommandStatus+0x8>
     3a2:	50 93 30 01 	sts	0x0130, r21	; 0x800130 <CommandStatus+0x9>
     3a6:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <CommandStatus+0xa>
     3aa:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <CommandStatus+0xb>
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     3ae:	88 23       	and	r24, r24
     3b0:	49 f0       	breq	.+18     	; 0x3c4 <MassStorage_Task+0x188>
     3b2:	45 2b       	or	r20, r21
     3b4:	46 2b       	or	r20, r22
     3b6:	47 2b       	or	r20, r23
     3b8:	29 f0       	breq	.+10     	; 0x3c4 <MassStorage_Task+0x188>
				UECONX |= (1 << STALLRQ);
     3ba:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     3be:	80 62       	ori	r24, 0x20	; 32
     3c0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3c4:	84 e0       	ldi	r24, 0x04	; 4
     3c6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3ca:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3ce:	85 fd       	sbrc	r24, 5
     3d0:	1f c0       	rjmp	.+62     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3d2:	83 e0       	ldi	r24, 0x03	; 3
     3d4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3d8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3dc:	85 fd       	sbrc	r24, 5
     3de:	1f c0       	rjmp	.+62     	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
     3e0:	1a 82       	std	Y+2, r1	; 0x02
     3e2:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     3e4:	ae 01       	movw	r20, r28
     3e6:	4f 5f       	subi	r20, 0xFF	; 255
     3e8:	5f 4f       	sbci	r21, 0xFF	; 255
     3ea:	6d e0       	ldi	r22, 0x0D	; 13
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	87 e2       	ldi	r24, 0x27	; 39
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	7c d5       	rcall	.+2808   	; 0xeec <Endpoint_Write_Stream_LE>
     3f4:	85 30       	cpi	r24, 0x05	; 5
     3f6:	c1 f0       	breq	.+48     	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3fc:	8e 77       	andi	r24, 0x7E	; 126
     3fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     402:	0a c0       	rjmp	.+20     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
		if (IsMassStoreReset)
     404:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     408:	88 23       	and	r24, r24
     40a:	09 f4       	brne	.+2      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
     40c:	91 cf       	rjmp	.-222    	; 0x330 <MassStorage_Task+0xf4>
     40e:	5f cf       	rjmp	.-322    	; 0x2ce <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     410:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     414:	88 23       	and	r24, r24
     416:	c9 f2       	breq	.-78     	; 0x3ca <MassStorage_Task+0x18e>
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     418:	80 e2       	ldi	r24, 0x20	; 32
     41a:	9d de       	rcall	.-710    	; 0x156 <LEDs_SetAllLEDs>
     41c:	58 cf       	rjmp	.-336    	; 0x2ce <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     41e:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     422:	88 23       	and	r24, r24
     424:	c9 f2       	breq	.-78     	; 0x3d8 <MassStorage_Task+0x19c>
     426:	f8 cf       	rjmp	.-16     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     428:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     42c:	88 23       	and	r24, r24
     42e:	d1 f2       	breq	.-76     	; 0x3e4 <MassStorage_Task+0x1a8>
     430:	f3 cf       	rjmp	.-26     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>

00000432 <main>:
	serialBegin();
     432:	43 d0       	rcall	.+134    	; 0x4ba <serialBegin>
	if(!sd_raw_init())
     434:	56 d4       	rcall	.+2220   	; 0xce2 <sd_raw_init>
     436:	81 11       	cpse	r24, r1
     438:	08 c0       	rjmp	.+16     	; 0x44a <main+0x18>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     43a:	81 e8       	ldi	r24, 0x81	; 129
     43c:	8c de       	rcall	.-744    	; 0x156 <LEDs_SetAllLEDs>
		serialWriteArray(sderrormsg, 20);
     43e:	64 e1       	ldi	r22, 0x14	; 20
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	50 d0       	rcall	.+160    	; 0x4e8 <serialWriteArray>
     448:	ff cf       	rjmp	.-2      	; 0x448 <main+0x16>
	SetupHardware();
     44a:	99 de       	rcall	.-718    	; 0x17e <SetupHardware>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	83 de       	rcall	.-762    	; 0x156 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     450:	78 94       	sei
		MassStorage_Task();
     452:	f4 de       	rcall	.-536    	; 0x23c <MassStorage_Task>
		USB_USBTask();
     454:	0e 94 0c 0c 	call	0x1818	; 0x1818 <USB_USBTask>
     458:	fc cf       	rjmp	.-8      	; 0x452 <main+0x20>

0000045a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     45a:	29 2f       	mov	r18, r25
     45c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     45e:	22 30       	cpi	r18, 0x02	; 2
     460:	31 05       	cpc	r19, r1
     462:	71 f0       	breq	.+28     	; 0x480 <CALLBACK_USB_GetDescriptor+0x26>
     464:	23 30       	cpi	r18, 0x03	; 3
     466:	31 05       	cpc	r19, r1
     468:	81 f0       	breq	.+32     	; 0x48a <CALLBACK_USB_GetDescriptor+0x30>
     46a:	21 30       	cpi	r18, 0x01	; 1
     46c:	31 05       	cpc	r19, r1
     46e:	a1 f4       	brne	.+40     	; 0x498 <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     470:	82 e1       	ldi	r24, 0x12	; 18
     472:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     474:	2a e0       	ldi	r18, 0x0A	; 10
     476:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     478:	fa 01       	movw	r30, r20
     47a:	31 83       	std	Z+1, r19	; 0x01
     47c:	20 83       	st	Z, r18
	return Size;
}
     47e:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
     480:	80 e2       	ldi	r24, 0x20	; 32
     482:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     484:	2a ee       	ldi	r18, 0xEA	; 234
     486:	30 e0       	ldi	r19, 0x00	; 0
			break;
     488:	f7 cf       	rjmp	.-18     	; 0x478 <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
     48a:	99 27       	eor	r25, r25
     48c:	81 30       	cpi	r24, 0x01	; 1
     48e:	91 05       	cpc	r25, r1
     490:	71 f0       	breq	.+28     	; 0x4ae <CALLBACK_USB_GetDescriptor+0x54>
     492:	38 f0       	brcs	.+14     	; 0x4a2 <CALLBACK_USB_GetDescriptor+0x48>
     494:	02 97       	sbiw	r24, 0x02	; 2
     496:	71 f0       	breq	.+28     	; 0x4b4 <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
	const void* Address = NULL;
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	eb cf       	rjmp	.-42     	; 0x478 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4a2:	e6 ee       	ldi	r30, 0xE6	; 230
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4a6:	84 91       	lpm	r24, Z
     4a8:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     4aa:	9f 01       	movw	r18, r30
					break;
     4ac:	e5 cf       	rjmp	.-54     	; 0x478 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4ae:	ea ed       	ldi	r30, 0xDA	; 218
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	f9 cf       	rjmp	.-14     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4b4:	ec ea       	ldi	r30, 0xAC	; 172
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	f6 cf       	rjmp	.-20     	; 0x4a6 <CALLBACK_USB_GetDescriptor+0x4c>

000004ba <serialBegin>:

// initialize the hardware uart: 57600 baud, 8 bits, no parity, 2 stop bits
void serialBegin()
{
	const unsigned int baud = 57600;
	UBRR1 = (F_CPU / 4 / baud - 1) / 2;
     4ba:	82 e2       	ldi	r24, 0x22	; 34
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     4c2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1A = (1<<U2X1);		// set double transmission speed
     4c6:	82 e0       	ldi	r24, 0x02	; 2
     4c8:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
     4cc:	88 e9       	ldi	r24, 0x98	; 152
     4ce:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);
     4d2:	8e e0       	ldi	r24, 0x0E	; 14
     4d4:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     4d8:	08 95       	ret

000004da <serialWrite>:

// output a single byte to uart
void serialWrite( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
     4da:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     4de:	95 ff       	sbrs	r25, 5
     4e0:	fc cf       	rjmp	.-8      	; 0x4da <serialWrite>
	;
	/* Put data into buffer, sends the data */
	UDR1 = (uint8_t)data;
     4e2:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     4e6:	08 95       	ret

000004e8 <serialWriteArray>:
}

// output a string to uart
void serialWriteArray( unsigned char data[], unsigned int len)
{
     4e8:	0f 93       	push	r16
     4ea:	1f 93       	push	r17
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	ec 01       	movw	r28, r24
     4f2:	8c 01       	movw	r16, r24
     4f4:	06 0f       	add	r16, r22
     4f6:	17 1f       	adc	r17, r23
	for(int i = 0; i < len; i++)
     4f8:	c0 17       	cp	r28, r16
     4fa:	d1 07       	cpc	r29, r17
     4fc:	29 f4       	brne	.+10     	; 0x508 <serialWriteArray+0x20>
	{
		serialWrite(*(data + i));
	}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	08 95       	ret
		serialWrite(*(data + i));
     508:	89 91       	ld	r24, Y+
     50a:	e7 df       	rcall	.-50     	; 0x4da <serialWrite>
     50c:	f5 cf       	rjmp	.-22     	; 0x4f8 <serialWriteArray+0x10>

0000050e <readData>:
unsigned char currentblkmsg[] = {'c', 'u', 'r', 'r', 'e', 'n', 't', 'b', 'l', 'k', ':', ' '};
unsigned char endpointfullmsg[] = {'e', 'n', 'd', 'p', 'o', 'i', 'n', 't', ' ', 'f', 'u', 'l', 'l', '\n', '\r'};
unsigned char buffermsg[] = {'b', 'u', 'f', 'f', 'e', 'r', ':', ' '};
unsigned char chunkmsg[] = {'c', 'h', 'u', 'n', 'k'};
void readData(const uint32_t BlockAddress, uint16_t TotalBlocks)
{
     50e:	2f 92       	push	r2
     510:	3f 92       	push	r3
     512:	4f 92       	push	r4
     514:	5f 92       	push	r5
     516:	6f 92       	push	r6
     518:	7f 92       	push	r7
     51a:	8f 92       	push	r8
     51c:	9f 92       	push	r9
     51e:	af 92       	push	r10
     520:	bf 92       	push	r11
     522:	cf 92       	push	r12
     524:	df 92       	push	r13
     526:	ef 92       	push	r14
     528:	ff 92       	push	r15
     52a:	0f 93       	push	r16
     52c:	1f 93       	push	r17
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	cd b7       	in	r28, 0x3d	; 61
     534:	de b7       	in	r29, 0x3e	; 62
     536:	2b 97       	sbiw	r28, 0x0b	; 11
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	f8 94       	cli
     53c:	de bf       	out	0x3e, r29	; 62
     53e:	0f be       	out	0x3f, r0	; 63
     540:	cd bf       	out	0x3d, r28	; 61
     542:	4b 01       	movw	r8, r22
     544:	5c 01       	movw	r10, r24
     546:	5b 87       	std	Y+11, r21	; 0x0b
     548:	4a 87       	std	Y+10, r20	; 0x0a
	serialWrite('c');
     54a:	83 e6       	ldi	r24, 0x63	; 99
     54c:	c6 df       	rcall	.-116    	; 0x4da <serialWrite>
	serialWrite('a');
     54e:	81 e6       	ldi	r24, 0x61	; 97
     550:	c4 df       	rcall	.-120    	; 0x4da <serialWrite>
	serialWrite('l');
     552:	8c e6       	ldi	r24, 0x6C	; 108
     554:	c2 df       	rcall	.-124    	; 0x4da <serialWrite>
	serialWrite('l');
     556:	8c e6       	ldi	r24, 0x6C	; 108
     558:	c0 df       	rcall	.-128    	; 0x4da <serialWrite>
	serialWrite('\n');
     55a:	8a e0       	ldi	r24, 0x0A	; 10
     55c:	be df       	rcall	.-132    	; 0x4da <serialWrite>
	serialWrite('\r');
     55e:	8d e0       	ldi	r24, 0x0D	; 13
     560:	bc df       	rcall	.-136    	; 0x4da <serialWrite>
	serialWriteArray(BlockAddressmsg, 9);
     562:	69 e0       	ldi	r22, 0x09	; 9
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	85 e6       	ldi	r24, 0x65	; 101
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	be df       	rcall	.-132    	; 0x4e8 <serialWriteArray>
	for(int i = 32; i >= 0; i--)
     56c:	00 e2       	ldi	r16, 0x20	; 32
     56e:	10 e0       	ldi	r17, 0x00	; 0
	{
		uint8_t bit = BlockAddress >> i;
     570:	d5 01       	movw	r26, r10
     572:	c4 01       	movw	r24, r8
     574:	00 2e       	mov	r0, r16
     576:	04 c0       	rjmp	.+8      	; 0x580 <readData+0x72>
     578:	b6 95       	lsr	r27
     57a:	a7 95       	ror	r26
     57c:	97 95       	ror	r25
     57e:	87 95       	ror	r24
     580:	0a 94       	dec	r0
     582:	d2 f7       	brpl	.-12     	; 0x578 <readData+0x6a>
		bit &= 1;
		if(bit == 1)
     584:	80 ff       	sbrs	r24, 0
     586:	36 c0       	rjmp	.+108    	; 0x5f4 <readData+0xe6>
			serialWrite('1');
     588:	81 e3       	ldi	r24, 0x31	; 49
		else
			serialWrite('0');
     58a:	a7 df       	rcall	.-178    	; 0x4da <serialWrite>
	for(int i = 32; i >= 0; i--)
     58c:	01 50       	subi	r16, 0x01	; 1
     58e:	11 09       	sbc	r17, r1
     590:	78 f7       	brcc	.-34     	; 0x570 <readData+0x62>
	}
	serialWrite(' ');
     592:	80 e2       	ldi	r24, 0x20	; 32
     594:	a2 df       	rcall	.-188    	; 0x4da <serialWrite>
	serialWriteArray(TotalBlocksmsg, 9);
     596:	69 e0       	ldi	r22, 0x09	; 9
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	8c e5       	ldi	r24, 0x5C	; 92
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	a4 df       	rcall	.-184    	; 0x4e8 <serialWriteArray>
	for(int i = 16; i >= 0; i--)
     5a0:	00 e1       	ldi	r16, 0x10	; 16
     5a2:	10 e0       	ldi	r17, 0x00	; 0
	{
		uint8_t bit = TotalBlocks >> i;
     5a4:	8a 85       	ldd	r24, Y+10	; 0x0a
     5a6:	9b 85       	ldd	r25, Y+11	; 0x0b
     5a8:	00 2e       	mov	r0, r16
     5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <readData+0xa2>
     5ac:	96 95       	lsr	r25
     5ae:	87 95       	ror	r24
     5b0:	0a 94       	dec	r0
     5b2:	e2 f7       	brpl	.-8      	; 0x5ac <readData+0x9e>
		bit &= 1;
		if(bit == 1)
     5b4:	80 ff       	sbrs	r24, 0
     5b6:	20 c0       	rjmp	.+64     	; 0x5f8 <readData+0xea>
			serialWrite('1');
     5b8:	81 e3       	ldi	r24, 0x31	; 49
		else
			serialWrite('0');
     5ba:	8f df       	rcall	.-226    	; 0x4da <serialWrite>
	for(int i = 16; i >= 0; i--)
     5bc:	01 50       	subi	r16, 0x01	; 1
     5be:	11 09       	sbc	r17, r1
     5c0:	88 f7       	brcc	.-30     	; 0x5a4 <readData+0x96>
	}
	serialWrite('\n');
     5c2:	8a e0       	ldi	r24, 0x0A	; 10
     5c4:	8a df       	rcall	.-236    	; 0x4da <serialWrite>
	serialWrite('\r');
     5c6:	8d e0       	ldi	r24, 0x0D	; 13
     5c8:	88 df       	rcall	.-240    	; 0x4da <serialWrite>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     5ca:	39 d6       	rcall	.+3186   	; 0x123e <Endpoint_WaitUntilReady>
     5cc:	68 2e       	mov	r6, r24
     5ce:	81 11       	cpse	r24, r1
     5d0:	c8 c0       	rjmp	.+400    	; 0x762 <readData+0x254>
	  return;

	for(uint8_t currentBlock = 0; currentBlock < TotalBlocks; currentBlock++)
     5d2:	c6 2c       	mov	r12, r6
     5d4:	d1 2c       	mov	r13, r1
     5d6:	8a 85       	ldd	r24, Y+10	; 0x0a
     5d8:	9b 85       	ldd	r25, Y+11	; 0x0b
     5da:	c8 16       	cp	r12, r24
     5dc:	d9 06       	cpc	r13, r25
     5de:	70 f0       	brcs	.+28     	; 0x5fc <readData+0xee>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			  return;
		}
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     5e4:	85 fd       	sbrc	r24, 5
     5e6:	bd c0       	rjmp	.+378    	; 0x762 <readData+0x254>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5ec:	8e 77       	andi	r24, 0x7E	; 126
     5ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5f2:	b7 c0       	rjmp	.+366    	; 0x762 <readData+0x254>
			serialWrite('0');
     5f4:	80 e3       	ldi	r24, 0x30	; 48
     5f6:	c9 cf       	rjmp	.-110    	; 0x58a <readData+0x7c>
			serialWrite('0');
     5f8:	80 e3       	ldi	r24, 0x30	; 48
     5fa:	df cf       	rjmp	.-66     	; 0x5ba <readData+0xac>
		serialWriteArray(currentblkmsg, 12);
     5fc:	6c e0       	ldi	r22, 0x0C	; 12
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	80 e5       	ldi	r24, 0x50	; 80
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	71 df       	rcall	.-286    	; 0x4e8 <serialWriteArray>
		for(int i = 8; i >= 0; i--)
     606:	08 e0       	ldi	r16, 0x08	; 8
     608:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t bit = currentblk >> i;
     60a:	c6 01       	movw	r24, r12
     60c:	00 2e       	mov	r0, r16
     60e:	02 c0       	rjmp	.+4      	; 0x614 <readData+0x106>
     610:	95 95       	asr	r25
     612:	87 95       	ror	r24
     614:	0a 94       	dec	r0
     616:	e2 f7       	brpl	.-8      	; 0x610 <readData+0x102>
			if(bit == 1)
     618:	80 ff       	sbrs	r24, 0
     61a:	91 c0       	rjmp	.+290    	; 0x73e <readData+0x230>
				serialWrite('1');
     61c:	81 e3       	ldi	r24, 0x31	; 49
				serialWrite('0');
     61e:	5d df       	rcall	.-326    	; 0x4da <serialWrite>
		for(int i = 8; i >= 0; i--)
     620:	01 50       	subi	r16, 0x01	; 1
     622:	11 09       	sbc	r17, r1
     624:	90 f7       	brcc	.-28     	; 0x60a <readData+0xfc>
		serialWrite(' ');
     626:	80 e2       	ldi	r24, 0x20	; 32
     628:	58 df       	rcall	.-336    	; 0x4da <serialWrite>
		serialWrite('o');
     62a:	8f e6       	ldi	r24, 0x6F	; 111
     62c:	56 df       	rcall	.-340    	; 0x4da <serialWrite>
		serialWrite('f');
     62e:	86 e6       	ldi	r24, 0x66	; 102
     630:	54 df       	rcall	.-344    	; 0x4da <serialWrite>
		serialWrite(' ');
     632:	80 e2       	ldi	r24, 0x20	; 32
     634:	52 df       	rcall	.-348    	; 0x4da <serialWrite>
		for(int i = 8; i >= 0; i--)
     636:	08 e0       	ldi	r16, 0x08	; 8
     638:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t bit = currentblk >> i;
     63a:	c6 01       	movw	r24, r12
     63c:	00 2e       	mov	r0, r16
     63e:	02 c0       	rjmp	.+4      	; 0x644 <readData+0x136>
     640:	95 95       	asr	r25
     642:	87 95       	ror	r24
     644:	0a 94       	dec	r0
     646:	e2 f7       	brpl	.-8      	; 0x640 <readData+0x132>
			if(bit == 1)
     648:	80 ff       	sbrs	r24, 0
     64a:	7b c0       	rjmp	.+246    	; 0x742 <readData+0x234>
				serialWrite('1');
     64c:	81 e3       	ldi	r24, 0x31	; 49
				serialWrite('0');
     64e:	45 df       	rcall	.-374    	; 0x4da <serialWrite>
		for(int i = 8; i >= 0; i--)
     650:	01 50       	subi	r16, 0x01	; 1
     652:	11 09       	sbc	r17, r1
     654:	90 f7       	brcc	.-28     	; 0x63a <readData+0x12c>
     656:	dc 2c       	mov	r13, r12
     658:	dd 0c       	add	r13, r13
     65a:	1d 82       	std	Y+5, r1	; 0x05
     65c:	de 82       	std	Y+6, r13	; 0x06
     65e:	dd 0c       	add	r13, r13
     660:	dd 08       	sbc	r13, r13
     662:	df 82       	std	Y+7, r13	; 0x07
     664:	d8 86       	std	Y+8, r13	; 0x08
     666:	d9 86       	std	Y+9, r13	; 0x09
     668:	5d 2c       	mov	r5, r13
     66a:	4d 2c       	mov	r4, r13
				sd_raw_read(currentBlock * VIRTUAL_MEMORY_BLOCK_SIZE + chunk * 16 + i, &buffer, 1);
     66c:	80 e3       	ldi	r24, 0x30	; 48
     66e:	8a 83       	std	Y+2, r24	; 0x02
			serialWriteArray(chunkmsg, 5);
     670:	65 e0       	ldi	r22, 0x05	; 5
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	84 e3       	ldi	r24, 0x34	; 52
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	37 df       	rcall	.-402    	; 0x4e8 <serialWriteArray>
			serialWrite(' ');
     67a:	80 e2       	ldi	r24, 0x20	; 32
     67c:	2e df       	rcall	.-420    	; 0x4da <serialWrite>
			serialWrite(chunk + 48);
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	2c df       	rcall	.-424    	; 0x4da <serialWrite>
			serialWrite('\n');
     682:	8a e0       	ldi	r24, 0x0A	; 10
     684:	2a df       	rcall	.-428    	; 0x4da <serialWrite>
			serialWrite('\r');
     686:	8d e0       	ldi	r24, 0x0D	; 13
     688:	28 df       	rcall	.-432    	; 0x4da <serialWrite>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     68a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (!(Endpoint_IsReadWriteAllowed()))
     68e:	85 ff       	sbrs	r24, 5
     690:	5a c0       	rjmp	.+180    	; 0x746 <readData+0x238>
				sd_raw_read(currentBlock * VIRTUAL_MEMORY_BLOCK_SIZE + chunk * 16 + i, &buffer, 1);
     692:	7d 80       	ldd	r7, Y+5	; 0x05
     694:	8e 80       	ldd	r8, Y+6	; 0x06
     696:	9d 2c       	mov	r9, r13
     698:	af 80       	ldd	r10, Y+7	; 0x07
     69a:	b8 84       	ldd	r11, Y+8	; 0x08
     69c:	c9 84       	ldd	r12, Y+9	; 0x09
     69e:	25 2c       	mov	r2, r5
     6a0:	34 2c       	mov	r3, r4
     6a2:	80 e1       	ldi	r24, 0x10	; 16
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	9c 83       	std	Y+4, r25	; 0x04
     6a8:	8b 83       	std	Y+3, r24	; 0x03
     6aa:	ee 24       	eor	r14, r14
     6ac:	e3 94       	inc	r14
     6ae:	f1 2c       	mov	r15, r1
     6b0:	8e 01       	movw	r16, r28
     6b2:	0f 5f       	subi	r16, 0xFF	; 255
     6b4:	1f 4f       	sbci	r17, 0xFF	; 255
     6b6:	27 2d       	mov	r18, r7
     6b8:	38 2d       	mov	r19, r8
     6ba:	49 2d       	mov	r20, r9
     6bc:	5a 2d       	mov	r21, r10
     6be:	6b 2d       	mov	r22, r11
     6c0:	7c 2d       	mov	r23, r12
     6c2:	c1 01       	movw	r24, r2
     6c4:	10 d2       	rcall	.+1056   	; 0xae6 <sd_raw_read>
				Endpoint_Write_8(buffer);
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
				UEDATX = Data;
     6c8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	9c 83       	std	Y+4, r25	; 0x04
     6d4:	8b 83       	std	Y+3, r24	; 0x03
     6d6:	27 2d       	mov	r18, r7
     6d8:	38 2d       	mov	r19, r8
     6da:	49 2d       	mov	r20, r9
     6dc:	5a 2d       	mov	r21, r10
     6de:	6b 2d       	mov	r22, r11
     6e0:	7c 2d       	mov	r23, r12
     6e2:	c1 01       	movw	r24, r2
     6e4:	a1 e0       	ldi	r26, 0x01	; 1
     6e6:	0e 94 4e 0c 	call	0x189c	; 0x189c <__adddi3_s8>
     6ea:	72 2e       	mov	r7, r18
     6ec:	83 2e       	mov	r8, r19
     6ee:	94 2e       	mov	r9, r20
     6f0:	a5 2e       	mov	r10, r21
     6f2:	b6 2e       	mov	r11, r22
     6f4:	c7 2e       	mov	r12, r23
     6f6:	1c 01       	movw	r2, r24
			for(int i = 0; i < 16; i++)
     6f8:	8b 81       	ldd	r24, Y+3	; 0x03
     6fa:	9c 81       	ldd	r25, Y+4	; 0x04
     6fc:	89 2b       	or	r24, r25
     6fe:	a9 f6       	brne	.-86     	; 0x6aa <readData+0x19c>
			if (IsMassStoreReset)
     700:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <__data_end>
     704:	2d 81       	ldd	r18, Y+5	; 0x05
     706:	3e 81       	ldd	r19, Y+6	; 0x06
     708:	4d 2d       	mov	r20, r13
     70a:	5f 81       	ldd	r21, Y+7	; 0x07
     70c:	68 85       	ldd	r22, Y+8	; 0x08
     70e:	79 85       	ldd	r23, Y+9	; 0x09
     710:	85 2d       	mov	r24, r5
     712:	94 2d       	mov	r25, r4
     714:	a0 e1       	ldi	r26, 0x10	; 16
     716:	0e 94 4e 0c 	call	0x189c	; 0x189c <__adddi3_s8>
     71a:	2d 83       	std	Y+5, r18	; 0x05
     71c:	3e 83       	std	Y+6, r19	; 0x06
     71e:	d4 2e       	mov	r13, r20
     720:	5f 83       	std	Y+7, r21	; 0x07
     722:	68 87       	std	Y+8, r22	; 0x08
     724:	79 87       	std	Y+9, r23	; 0x09
     726:	58 2e       	mov	r5, r24
     728:	49 2e       	mov	r4, r25
     72a:	9a 81       	ldd	r25, Y+2	; 0x02
     72c:	9f 5f       	subi	r25, 0xFF	; 255
     72e:	9a 83       	std	Y+2, r25	; 0x02
     730:	e1 11       	cpse	r30, r1
     732:	17 c0       	rjmp	.+46     	; 0x762 <readData+0x254>
		for(int chunk = 0; chunk * 16 < VIRTUAL_MEMORY_BLOCK_SIZE; chunk++)
     734:	90 35       	cpi	r25, 0x50	; 80
     736:	09 f0       	breq	.+2      	; 0x73a <readData+0x22c>
     738:	9b cf       	rjmp	.-202    	; 0x670 <readData+0x162>
	for(uint8_t currentBlock = 0; currentBlock < TotalBlocks; currentBlock++)
     73a:	63 94       	inc	r6
     73c:	4a cf       	rjmp	.-364    	; 0x5d2 <readData+0xc4>
				serialWrite('0');
     73e:	80 e3       	ldi	r24, 0x30	; 48
     740:	6e cf       	rjmp	.-292    	; 0x61e <readData+0x110>
				serialWrite('0');
     742:	80 e3       	ldi	r24, 0x30	; 48
     744:	84 cf       	rjmp	.-248    	; 0x64e <readData+0x140>
				serialWriteArray(endpointfullmsg, 15);
     746:	6f e0       	ldi	r22, 0x0F	; 15
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	81 e4       	ldi	r24, 0x41	; 65
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	cc de       	rcall	.-616    	; 0x4e8 <serialWriteArray>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     750:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     754:	8e 77       	andi	r24, 0x7E	; 126
     756:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				if (Endpoint_WaitUntilReady())
     75a:	71 d5       	rcall	.+2786   	; 0x123e <Endpoint_WaitUntilReady>
     75c:	88 23       	and	r24, r24
     75e:	09 f4       	brne	.+2      	; 0x762 <readData+0x254>
     760:	98 cf       	rjmp	.-208    	; 0x692 <readData+0x184>
	  Endpoint_ClearIN();
     762:	2b 96       	adiw	r28, 0x0b	; 11
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	f8 94       	cli
     768:	de bf       	out	0x3e, r29	; 62
     76a:	0f be       	out	0x3f, r0	; 63
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	1f 91       	pop	r17
     774:	0f 91       	pop	r16
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	bf 90       	pop	r11
     780:	af 90       	pop	r10
     782:	9f 90       	pop	r9
     784:	8f 90       	pop	r8
     786:	7f 90       	pop	r7
     788:	6f 90       	pop	r6
     78a:	5f 90       	pop	r5
     78c:	4f 90       	pop	r4
     78e:	3f 90       	pop	r3
     790:	2f 90       	pop	r2
     792:	08 95       	ret

00000794 <SCSI_DecodeSCSICommand>:
 *  a command failure due to a ILLEGAL REQUEST.
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(void)
{
     794:	0f 93       	push	r16
     796:	1f 93       	push	r17
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     79c:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <CommandBlock+0xf>
     7a0:	8d 31       	cpi	r24, 0x1D	; 29
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <SCSI_DecodeSCSICommand+0x12>
     7a4:	e4 c0       	rjmp	.+456    	; 0x96e <SCSI_DecodeSCSICommand+0x1da>
     7a6:	e0 f4       	brcc	.+56     	; 0x7e0 <SCSI_DecodeSCSICommand+0x4c>
     7a8:	82 31       	cpi	r24, 0x12	; 18
     7aa:	09 f4       	brne	.+2      	; 0x7ae <SCSI_DecodeSCSICommand+0x1a>
     7ac:	5a c0       	rjmp	.+180    	; 0x862 <SCSI_DecodeSCSICommand+0xce>
     7ae:	70 f4       	brcc	.+28     	; 0x7cc <SCSI_DecodeSCSICommand+0x38>
     7b0:	88 23       	and	r24, r24
     7b2:	09 f4       	brne	.+2      	; 0x7b6 <SCSI_DecodeSCSICommand+0x22>
     7b4:	50 c1       	rjmp	.+672    	; 0xa56 <SCSI_DecodeSCSICommand+0x2c2>
     7b6:	83 30       	cpi	r24, 0x03	; 3
     7b8:	09 f4       	brne	.+2      	; 0x7bc <SCSI_DecodeSCSICommand+0x28>
     7ba:	ad c0       	rjmp	.+346    	; 0x916 <SCSI_DecodeSCSICommand+0x182>
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     7bc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SenseData+0x2>
     7c0:	80 7f       	andi	r24, 0xF0	; 240
     7c2:	85 60       	ori	r24, 0x05	; 5
     7c4:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <SenseData+0x2>
     7c8:	80 e2       	ldi	r24, 0x20	; 32
     7ca:	65 c0       	rjmp	.+202    	; 0x896 <SCSI_DecodeSCSICommand+0x102>
	switch (CommandBlock.SCSICommandData[0])
     7cc:	8a 31       	cpi	r24, 0x1A	; 26
     7ce:	09 f4       	brne	.+2      	; 0x7d2 <SCSI_DecodeSCSICommand+0x3e>
     7d0:	23 c1       	rjmp	.+582    	; 0xa18 <SCSI_DecodeSCSICommand+0x284>
     7d2:	8b 31       	cpi	r24, 0x1B	; 27
     7d4:	99 f7       	brne	.-26     	; 0x7bc <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(startstopmsg, 20);
     7d6:	64 e1       	ldi	r22, 0x14	; 20
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	83 ed       	ldi	r24, 0xD3	; 211
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	cb c0       	rjmp	.+406    	; 0x976 <SCSI_DecodeSCSICommand+0x1e2>
	switch (CommandBlock.SCSICommandData[0])
     7e0:	88 32       	cpi	r24, 0x28	; 40
     7e2:	09 f4       	brne	.+2      	; 0x7e6 <SCSI_DecodeSCSICommand+0x52>
     7e4:	df c0       	rjmp	.+446    	; 0x9a4 <SCSI_DecodeSCSICommand+0x210>
     7e6:	90 f5       	brcc	.+100    	; 0x84c <SCSI_DecodeSCSICommand+0xb8>
     7e8:	8e 31       	cpi	r24, 0x1E	; 30
     7ea:	09 f4       	brne	.+2      	; 0x7ee <SCSI_DecodeSCSICommand+0x5a>
     7ec:	39 c1       	rjmp	.+626    	; 0xa60 <SCSI_DecodeSCSICommand+0x2cc>
     7ee:	85 32       	cpi	r24, 0x25	; 37
     7f0:	29 f7       	brne	.-54     	; 0x7bc <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(readcapacitymsg, 23);
     7f2:	67 e1       	ldi	r22, 0x17	; 23
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	81 e3       	ldi	r24, 0x31	; 49
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	76 de       	rcall	.-788    	; 0x4e8 <serialWriteArray>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     7fc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     800:	8f e7       	ldi	r24, 0x7F	; 127
     802:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     806:	8f ef       	ldi	r24, 0xFF	; 255
     808:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     80c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
     810:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     814:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     81e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     822:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <__data_end>
     826:	81 11       	cpse	r24, r1
     828:	3a c0       	rjmp	.+116    	; 0x89e <SCSI_DecodeSCSICommand+0x10a>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     82a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     82e:	8e 77       	andi	r24, 0x7E	; 126
     830:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     834:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <CommandBlock+0x8>
     838:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <CommandBlock+0x9>
     83c:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <CommandBlock+0xa>
     840:	b0 91 a9 04 	lds	r27, 0x04A9	; 0x8004a9 <CommandBlock+0xb>
     844:	08 97       	sbiw	r24, 0x08	; 8
     846:	a1 09       	sbc	r26, r1
     848:	b1 09       	sbc	r27, r1
     84a:	52 c0       	rjmp	.+164    	; 0x8f0 <SCSI_DecodeSCSICommand+0x15c>
	switch (CommandBlock.SCSICommandData[0])
     84c:	8a 32       	cpi	r24, 0x2A	; 42
     84e:	09 f4       	brne	.+2      	; 0x852 <SCSI_DecodeSCSICommand+0xbe>
     850:	9c c0       	rjmp	.+312    	; 0x98a <SCSI_DecodeSCSICommand+0x1f6>
     852:	8f 32       	cpi	r24, 0x2F	; 47
     854:	09 f0       	breq	.+2      	; 0x858 <SCSI_DecodeSCSICommand+0xc4>
     856:	b2 cf       	rjmp	.-156    	; 0x7bc <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(verifymsg, 16);
     858:	60 e1       	ldi	r22, 0x10	; 16
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	81 e9       	ldi	r24, 0x91	; 145
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	8a c0       	rjmp	.+276    	; 0x976 <SCSI_DecodeSCSICommand+0x1e2>
			serialWriteArray(inquirymsg, 17);
     862:	61 e1       	ldi	r22, 0x11	; 17
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	8f e5       	ldi	r24, 0x5F	; 95
     868:	92 e0       	ldi	r25, 0x02	; 2
     86a:	3e de       	rcall	.-900    	; 0x4e8 <serialWriteArray>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     86c:	20 91 b1 04 	lds	r18, 0x04B1	; 0x8004b1 <CommandBlock+0x13>
     870:	c2 2f       	mov	r28, r18
     872:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <CommandBlock+0x12>
     876:	d8 2f       	mov	r29, r24
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     878:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <CommandBlock+0x10>
     87c:	83 70       	andi	r24, 0x03	; 3
     87e:	21 f4       	brne	.+8      	; 0x888 <SCSI_DecodeSCSICommand+0xf4>
     880:	80 91 af 04 	lds	r24, 0x04AF	; 0x8004af <CommandBlock+0x11>
     884:	88 23       	and	r24, r24
     886:	89 f0       	breq	.+34     	; 0x8aa <SCSI_DecodeSCSICommand+0x116>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     888:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SenseData+0x2>
     88c:	80 7f       	andi	r24, 0xF0	; 240
     88e:	85 60       	ori	r24, 0x05	; 5
     890:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <SenseData+0x2>
     894:	84 e2       	ldi	r24, 0x24	; 36
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     896:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <SenseData+0xc>
     89a:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <SenseData+0xd>
	return false;
     89e:	80 e0       	ldi	r24, 0x00	; 0
}
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	08 95       	ret
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     8aa:	8e 01       	movw	r16, r28
     8ac:	c5 32       	cpi	r28, 0x25	; 37
     8ae:	d1 05       	cpc	r29, r1
     8b0:	10 f0       	brcs	.+4      	; 0x8b6 <SCSI_DecodeSCSICommand+0x122>
     8b2:	04 e2       	ldi	r16, 0x24	; 36
     8b4:	10 e0       	ldi	r17, 0x00	; 0
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	50 e0       	ldi	r21, 0x00	; 0
     8ba:	b8 01       	movw	r22, r16
     8bc:	80 e7       	ldi	r24, 0x70	; 112
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	15 d3       	rcall	.+1578   	; 0xeec <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     8c2:	60 e0       	ldi	r22, 0x00	; 0
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	ce 01       	movw	r24, r28
     8c8:	80 1b       	sub	r24, r16
     8ca:	91 0b       	sbc	r25, r17
     8cc:	cc d2       	rcall	.+1432   	; 0xe66 <Endpoint_Null_Stream>
     8ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8d2:	8e 77       	andi	r24, 0x7E	; 126
     8d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     8d8:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <CommandBlock+0x8>
     8dc:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <CommandBlock+0x9>
     8e0:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <CommandBlock+0xa>
     8e4:	b0 91 a9 04 	lds	r27, 0x04A9	; 0x8004a9 <CommandBlock+0xb>
     8e8:	80 1b       	sub	r24, r16
     8ea:	91 0b       	sbc	r25, r17
     8ec:	a1 09       	sbc	r26, r1
     8ee:	b1 09       	sbc	r27, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     8f0:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <CommandBlock+0x8>
     8f4:	90 93 a7 04 	sts	0x04A7, r25	; 0x8004a7 <CommandBlock+0x9>
     8f8:	a0 93 a8 04 	sts	0x04A8, r26	; 0x8004a8 <CommandBlock+0xa>
     8fc:	b0 93 a9 04 	sts	0x04A9, r27	; 0x8004a9 <CommandBlock+0xb>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     900:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SenseData+0x2>
     904:	80 7f       	andi	r24, 0xF0	; 240
     906:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <SenseData+0x2>
     90a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <SenseData+0xc>
     90e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <SenseData+0xd>
		return true;
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	c5 cf       	rjmp	.-118    	; 0x8a0 <SCSI_DecodeSCSICommand+0x10c>
			serialWriteArray(requestsensemsg, 23);
     916:	67 e1       	ldi	r22, 0x17	; 23
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	88 e4       	ldi	r24, 0x48	; 72
     91c:	92 e0       	ldi	r25, 0x02	; 2
     91e:	e4 dd       	rcall	.-1080   	; 0x4e8 <serialWriteArray>
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     920:	c0 91 b1 04 	lds	r28, 0x04B1	; 0x8004b1 <CommandBlock+0x13>
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     924:	dc 2f       	mov	r29, r28
     926:	c3 31       	cpi	r28, 0x13	; 19
     928:	08 f0       	brcs	.+2      	; 0x92c <SCSI_DecodeSCSICommand+0x198>
     92a:	d2 e1       	ldi	r29, 0x12	; 18
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     92c:	0d 2f       	mov	r16, r29
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	40 e0       	ldi	r20, 0x00	; 0
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	b8 01       	movw	r22, r16
     936:	8e e6       	ldi	r24, 0x6E	; 110
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	d8 d2       	rcall	.+1456   	; 0xeec <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     93c:	8c 2f       	mov	r24, r28
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	80 1b       	sub	r24, r16
     946:	91 0b       	sbc	r25, r17
     948:	8e d2       	rcall	.+1308   	; 0xe66 <Endpoint_Null_Stream>
     94a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     94e:	8e 77       	andi	r24, 0x7E	; 126
     950:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     954:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <CommandBlock+0x8>
     958:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <CommandBlock+0x9>
     95c:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <CommandBlock+0xa>
     960:	b0 91 a9 04 	lds	r27, 0x04A9	; 0x8004a9 <CommandBlock+0xb>
     964:	8d 1b       	sub	r24, r29
     966:	91 09       	sbc	r25, r1
     968:	a1 09       	sbc	r26, r1
     96a:	b1 09       	sbc	r27, r1
     96c:	c1 cf       	rjmp	.-126    	; 0x8f0 <SCSI_DecodeSCSICommand+0x15c>
			serialWriteArray(senddiagnosticmsg, 25);
     96e:	69 e1       	ldi	r22, 0x19	; 25
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	88 e1       	ldi	r24, 0x18	; 24
     974:	92 e0       	ldi	r25, 0x02	; 2
			serialWriteArray(preventallowmediumremovalmsg, 31);
     976:	b8 dd       	rcall	.-1168   	; 0x4e8 <serialWriteArray>
			CommandBlock.DataTransferLength = 0;
     978:	10 92 a6 04 	sts	0x04A6, r1	; 0x8004a6 <CommandBlock+0x8>
     97c:	10 92 a7 04 	sts	0x04A7, r1	; 0x8004a7 <CommandBlock+0x9>
     980:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <CommandBlock+0xa>
     984:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <CommandBlock+0xb>
			break;
     988:	bb cf       	rjmp	.-138    	; 0x900 <SCSI_DecodeSCSICommand+0x16c>
			serialWriteArray(writemsg, 15);
     98a:	6f e0       	ldi	r22, 0x0F	; 15
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	89 e0       	ldi	r24, 0x09	; 9
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	aa dd       	rcall	.-1196   	; 0x4e8 <serialWriteArray>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_DATA_PROTECT,
     994:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SenseData+0x2>
     998:	80 7f       	andi	r24, 0xF0	; 240
     99a:	87 60       	ori	r24, 0x07	; 7
     99c:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <SenseData+0x2>
     9a0:	87 e2       	ldi	r24, 0x27	; 39
     9a2:	79 cf       	rjmp	.-270    	; 0x896 <SCSI_DecodeSCSICommand+0x102>
			serialWriteArray(readmsg, 14);
     9a4:	6e e0       	ldi	r22, 0x0E	; 14
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	8b ef       	ldi	r24, 0xFB	; 251
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	9d dd       	rcall	.-1222   	; 0x4e8 <serialWriteArray>

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     9ae:	60 91 b2 04 	lds	r22, 0x04B2	; 0x8004b2 <CommandBlock+0x14>
     9b2:	70 91 b1 04 	lds	r23, 0x04B1	; 0x8004b1 <CommandBlock+0x13>
     9b6:	80 91 b0 04 	lds	r24, 0x04B0	; 0x8004b0 <CommandBlock+0x12>
     9ba:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <CommandBlock+0x11>
				return Data.Word;
     9be:	20 91 b5 04 	lds	r18, 0x04B5	; 0x8004b5 <CommandBlock+0x17>
     9c2:	c2 2f       	mov	r28, r18
     9c4:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <CommandBlock+0x16>
     9c8:	d2 2f       	mov	r29, r18
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     9ca:	61 15       	cp	r22, r1
     9cc:	71 05       	cpc	r23, r1
     9ce:	20 e8       	ldi	r18, 0x80	; 128
     9d0:	82 07       	cpc	r24, r18
     9d2:	91 05       	cpc	r25, r1
     9d4:	40 f0       	brcs	.+16     	; 0x9e6 <SCSI_DecodeSCSICommand+0x252>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9d6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <SenseData+0x2>
     9da:	80 7f       	andi	r24, 0xF0	; 240
     9dc:	85 60       	ori	r24, 0x05	; 5
     9de:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <SenseData+0x2>
     9e2:	81 e2       	ldi	r24, 0x21	; 33
     9e4:	58 cf       	rjmp	.-336    	; 0x896 <SCSI_DecodeSCSICommand+0x102>
	readData(BlockAddress, TotalBlocks);
     9e6:	ae 01       	movw	r20, r28
     9e8:	92 dd       	rcall	.-1244   	; 0x50e <readData>
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     9ea:	ae 01       	movw	r20, r28
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	89 e0       	ldi	r24, 0x09	; 9
     9f2:	44 0f       	add	r20, r20
     9f4:	55 1f       	adc	r21, r21
     9f6:	66 1f       	adc	r22, r22
     9f8:	77 1f       	adc	r23, r23
     9fa:	8a 95       	dec	r24
     9fc:	d1 f7       	brne	.-12     	; 0x9f2 <SCSI_DecodeSCSICommand+0x25e>
     9fe:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <CommandBlock+0x8>
     a02:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <CommandBlock+0x9>
     a06:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <CommandBlock+0xa>
     a0a:	b0 91 a9 04 	lds	r27, 0x04A9	; 0x8004a9 <CommandBlock+0xb>
     a0e:	84 1b       	sub	r24, r20
     a10:	95 0b       	sbc	r25, r21
     a12:	a6 0b       	sbc	r26, r22
     a14:	b7 0b       	sbc	r27, r23
     a16:	6c cf       	rjmp	.-296    	; 0x8f0 <SCSI_DecodeSCSICommand+0x15c>
			serialWriteArray(modesensemsg, 20);
     a18:	64 e1       	ldi	r22, 0x14	; 20
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	87 ee       	ldi	r24, 0xE7	; 231
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	63 dd       	rcall	.-1338   	; 0x4e8 <serialWriteArray>
				UEDATX = Data;
     a22:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a26:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a2a:	80 e8       	ldi	r24, 0x80	; 128
     a2c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a30:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a38:	8e 77       	andi	r24, 0x7E	; 126
     a3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= 4;
     a3e:	80 91 a6 04 	lds	r24, 0x04A6	; 0x8004a6 <CommandBlock+0x8>
     a42:	90 91 a7 04 	lds	r25, 0x04A7	; 0x8004a7 <CommandBlock+0x9>
     a46:	a0 91 a8 04 	lds	r26, 0x04A8	; 0x8004a8 <CommandBlock+0xa>
     a4a:	b0 91 a9 04 	lds	r27, 0x04A9	; 0x8004a9 <CommandBlock+0xb>
     a4e:	04 97       	sbiw	r24, 0x04	; 4
     a50:	a1 09       	sbc	r26, r1
     a52:	b1 09       	sbc	r27, r1
     a54:	4d cf       	rjmp	.-358    	; 0x8f0 <SCSI_DecodeSCSICommand+0x15c>
			serialWriteArray(testunitmsg, 19);
     a56:	63 e1       	ldi	r22, 0x13	; 19
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	80 ec       	ldi	r24, 0xC0	; 192
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	8b cf       	rjmp	.-234    	; 0x976 <SCSI_DecodeSCSICommand+0x1e2>
			serialWriteArray(preventallowmediumremovalmsg, 31);
     a60:	6f e1       	ldi	r22, 0x1F	; 31
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	81 ea       	ldi	r24, 0xA1	; 161
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	86 cf       	rjmp	.-244    	; 0x976 <SCSI_DecodeSCSICommand+0x1e2>

00000a6a <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
     a6a:	8e bd       	out	0x2e, r24	; 46
     a6c:	0d b4       	in	r0, 0x2d	; 45
     a6e:	07 fe       	sbrs	r0, 7
     a70:	fd cf       	rjmp	.-6      	; 0xa6c <sd_raw_send_byte+0x2>
     a72:	8d b5       	in	r24, 0x2d	; 45
     a74:	8f 77       	andi	r24, 0x7F	; 127
     a76:	8d bd       	out	0x2d, r24	; 45
     a78:	08 95       	ret

00000a7a <sd_raw_rec_byte>:
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	8e bd       	out	0x2e, r24	; 46
     a7e:	0d b4       	in	r0, 0x2d	; 45
     a80:	07 fe       	sbrs	r0, 7
     a82:	fd cf       	rjmp	.-6      	; 0xa7e <sd_raw_rec_byte+0x4>
     a84:	8d b5       	in	r24, 0x2d	; 45
     a86:	8f 77       	andi	r24, 0x7F	; 127
     a88:	8d bd       	out	0x2d, r24	; 45
     a8a:	8e b5       	in	r24, 0x2e	; 46
     a8c:	08 95       	ret

00000a8e <sd_raw_send_command>:
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	c8 2f       	mov	r28, r24
     a9a:	d4 2f       	mov	r29, r20
     a9c:	15 2f       	mov	r17, r21
     a9e:	06 2f       	mov	r16, r22
     aa0:	f7 2e       	mov	r15, r23
     aa2:	eb df       	rcall	.-42     	; 0xa7a <sd_raw_rec_byte>
     aa4:	8c 2f       	mov	r24, r28
     aa6:	80 64       	ori	r24, 0x40	; 64
     aa8:	e0 df       	rcall	.-64     	; 0xa6a <sd_raw_send_byte>
     aaa:	8f 2d       	mov	r24, r15
     aac:	de df       	rcall	.-68     	; 0xa6a <sd_raw_send_byte>
     aae:	80 2f       	mov	r24, r16
     ab0:	dc df       	rcall	.-72     	; 0xa6a <sd_raw_send_byte>
     ab2:	81 2f       	mov	r24, r17
     ab4:	da df       	rcall	.-76     	; 0xa6a <sd_raw_send_byte>
     ab6:	8d 2f       	mov	r24, r29
     ab8:	d8 df       	rcall	.-80     	; 0xa6a <sd_raw_send_byte>
     aba:	cc 23       	and	r28, r28
     abc:	21 f0       	breq	.+8      	; 0xac6 <sd_raw_send_command+0x38>
     abe:	c8 30       	cpi	r28, 0x08	; 8
     ac0:	81 f0       	breq	.+32     	; 0xae2 <sd_raw_send_command+0x54>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <sd_raw_send_command+0x3a>
     ac6:	85 e9       	ldi	r24, 0x95	; 149
     ac8:	d0 df       	rcall	.-96     	; 0xa6a <sd_raw_send_byte>
     aca:	ca e0       	ldi	r28, 0x0A	; 10
     acc:	d6 df       	rcall	.-84     	; 0xa7a <sd_raw_rec_byte>
     ace:	8f 3f       	cpi	r24, 0xFF	; 255
     ad0:	11 f4       	brne	.+4      	; 0xad6 <sd_raw_send_command+0x48>
     ad2:	c1 50       	subi	r28, 0x01	; 1
     ad4:	d9 f7       	brne	.-10     	; 0xacc <sd_raw_send_command+0x3e>
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	08 95       	ret
     ae2:	87 e8       	ldi	r24, 0x87	; 135
     ae4:	f1 cf       	rjmp	.-30     	; 0xac8 <sd_raw_send_command+0x3a>

00000ae6 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
     ae6:	2f 92       	push	r2
     ae8:	3f 92       	push	r3
     aea:	4f 92       	push	r4
     aec:	5f 92       	push	r5
     aee:	6f 92       	push	r6
     af0:	7f 92       	push	r7
     af2:	8f 92       	push	r8
     af4:	9f 92       	push	r9
     af6:	af 92       	push	r10
     af8:	bf 92       	push	r11
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	60 97       	sbiw	r28, 0x10	; 16
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	29 83       	std	Y+1, r18	; 0x01
     b1c:	3a 83       	std	Y+2, r19	; 0x02
     b1e:	4b 83       	std	Y+3, r20	; 0x03
     b20:	5c 83       	std	Y+4, r21	; 0x04
     b22:	6d 83       	std	Y+5, r22	; 0x05
     b24:	7e 83       	std	Y+6, r23	; 0x06
     b26:	8f 83       	std	Y+7, r24	; 0x07
     b28:	98 87       	std	Y+8, r25	; 0x08
     b2a:	1a 87       	std	Y+10, r17	; 0x0a
     b2c:	09 87       	std	Y+9, r16	; 0x09
     b2e:	fc 86       	std	Y+12, r15	; 0x0c
     b30:	eb 86       	std	Y+11, r14	; 0x0b
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
     b32:	2b 85       	ldd	r18, Y+11	; 0x0b
     b34:	3c 85       	ldd	r19, Y+12	; 0x0c
     b36:	23 2b       	or	r18, r19
     b38:	11 f4       	brne	.+4      	; 0xb3e <__stack+0x3f>

        length -= read_length;
        offset += read_length;
    }

    return 1;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	51 c0       	rjmp	.+162    	; 0xbe0 <__stack+0xe1>
        block_offset = offset & 0x01ff;
     b3e:	29 81       	ldd	r18, Y+1	; 0x01
     b40:	3a 81       	ldd	r19, Y+2	; 0x02
     b42:	31 70       	andi	r19, 0x01	; 1
     b44:	3e 87       	std	Y+14, r19	; 0x0e
     b46:	2d 87       	std	Y+13, r18	; 0x0d
        block_address = offset - block_offset;
     b48:	19 01       	movw	r2, r18
     b4a:	29 81       	ldd	r18, Y+1	; 0x01
     b4c:	3a 81       	ldd	r19, Y+2	; 0x02
     b4e:	4b 81       	ldd	r20, Y+3	; 0x03
     b50:	5c 81       	ldd	r21, Y+4	; 0x04
     b52:	6d 81       	ldd	r22, Y+5	; 0x05
     b54:	7e 81       	ldd	r23, Y+6	; 0x06
     b56:	8f 81       	ldd	r24, Y+7	; 0x07
     b58:	98 85       	ldd	r25, Y+8	; 0x08
     b5a:	51 01       	movw	r10, r2
     b5c:	c1 2c       	mov	r12, r1
     b5e:	d1 2c       	mov	r13, r1
     b60:	e1 2c       	mov	r14, r1
     b62:	f1 2c       	mov	r15, r1
     b64:	00 e0       	ldi	r16, 0x00	; 0
     b66:	10 e0       	ldi	r17, 0x00	; 0
     b68:	a5 d6       	rcall	.+3402   	; 0x18b4 <__subdi3>
     b6a:	39 01       	movw	r6, r18
     b6c:	4a 01       	movw	r8, r20
     b6e:	1b 01       	movw	r2, r22
     b70:	2c 01       	movw	r4, r24
        read_length = 512 - block_offset; /* read up to block border */
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	ed 85       	ldd	r30, Y+13	; 0x0d
     b78:	fe 85       	ldd	r31, Y+14	; 0x0e
     b7a:	8e 1b       	sub	r24, r30
     b7c:	9f 0b       	sbc	r25, r31
     b7e:	2b 85       	ldd	r18, Y+11	; 0x0b
     b80:	3c 85       	ldd	r19, Y+12	; 0x0c
     b82:	38 8b       	std	Y+16, r19	; 0x10
     b84:	2f 87       	std	Y+15, r18	; 0x0f
     b86:	82 17       	cp	r24, r18
     b88:	93 07       	cpc	r25, r19
     b8a:	10 f4       	brcc	.+4      	; 0xb90 <__stack+0x91>
     b8c:	98 8b       	std	Y+16, r25	; 0x10
     b8e:	8f 87       	std	Y+15, r24	; 0x0f
        if(block_address != raw_block_address)
     b90:	a0 90 96 02 	lds	r10, 0x0296	; 0x800296 <raw_block_address>
     b94:	b0 90 97 02 	lds	r11, 0x0297	; 0x800297 <raw_block_address+0x1>
     b98:	c0 90 98 02 	lds	r12, 0x0298	; 0x800298 <raw_block_address+0x2>
     b9c:	d0 90 99 02 	lds	r13, 0x0299	; 0x800299 <raw_block_address+0x3>
     ba0:	e0 90 9a 02 	lds	r14, 0x029A	; 0x80029a <raw_block_address+0x4>
     ba4:	f0 90 9b 02 	lds	r15, 0x029B	; 0x80029b <raw_block_address+0x5>
     ba8:	00 91 9c 02 	lds	r16, 0x029C	; 0x80029c <raw_block_address+0x6>
     bac:	10 91 9d 02 	lds	r17, 0x029D	; 0x80029d <raw_block_address+0x7>
     bb0:	93 01       	movw	r18, r6
     bb2:	a4 01       	movw	r20, r8
     bb4:	b1 01       	movw	r22, r2
     bb6:	c2 01       	movw	r24, r4
     bb8:	86 d6       	rcall	.+3340   	; 0x18c6 <__cmpdi2>
     bba:	09 f4       	brne	.+2      	; 0xbbe <__stack+0xbf>
     bbc:	80 c0       	rjmp	.+256    	; 0xcbe <__stack+0x1bf>
            select_card();
     bbe:	28 98       	cbi	0x05, 0	; 5
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
     bc0:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <sd_raw_card_type>
     bc4:	82 ff       	sbrs	r24, 2
     bc6:	25 c0       	rjmp	.+74     	; 0xc12 <__stack+0x113>
     bc8:	84 2d       	mov	r24, r4
     bca:	09 e0       	ldi	r16, 0x09	; 9
     bcc:	42 d6       	rcall	.+3204   	; 0x1852 <__lshrdi3>
     bce:	ba 01       	movw	r22, r20
     bd0:	42 2f       	mov	r20, r18
     bd2:	53 2f       	mov	r21, r19
     bd4:	81 e1       	ldi	r24, 0x11	; 17
     bd6:	5b df       	rcall	.-330    	; 0xa8e <sd_raw_send_command>
     bd8:	88 23       	and	r24, r24
     bda:	f1 f0       	breq	.+60     	; 0xc18 <__stack+0x119>
                unselect_card();
     bdc:	28 9a       	sbi	0x05, 0	; 5
                return 0;
     bde:	80 e0       	ldi	r24, 0x00	; 0
}
     be0:	60 96       	adiw	r28, 0x10	; 16
     be2:	0f b6       	in	r0, 0x3f	; 63
     be4:	f8 94       	cli
     be6:	de bf       	out	0x3e, r29	; 62
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	cd bf       	out	0x3d, r28	; 61
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	df 90       	pop	r13
     bfa:	cf 90       	pop	r12
     bfc:	bf 90       	pop	r11
     bfe:	af 90       	pop	r10
     c00:	9f 90       	pop	r9
     c02:	8f 90       	pop	r8
     c04:	7f 90       	pop	r7
     c06:	6f 90       	pop	r6
     c08:	5f 90       	pop	r5
     c0a:	4f 90       	pop	r4
     c0c:	3f 90       	pop	r3
     c0e:	2f 90       	pop	r2
     c10:	08 95       	ret
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
     c12:	a3 01       	movw	r20, r6
     c14:	b4 01       	movw	r22, r8
     c16:	de cf       	rjmp	.-68     	; 0xbd4 <__stack+0xd5>
            while(sd_raw_rec_byte() != 0xfe);
     c18:	30 df       	rcall	.-416    	; 0xa7a <sd_raw_rec_byte>
     c1a:	8e 3f       	cpi	r24, 0xFE	; 254
     c1c:	e9 f7       	brne	.-6      	; 0xc18 <__stack+0x119>
     c1e:	0e e9       	ldi	r16, 0x9E	; 158
     c20:	12 e0       	ldi	r17, 0x02	; 2
                *cache++ = sd_raw_rec_byte();
     c22:	2b df       	rcall	.-426    	; 0xa7a <sd_raw_rec_byte>
     c24:	f8 01       	movw	r30, r16
     c26:	81 93       	st	Z+, r24
     c28:	8f 01       	movw	r16, r30
            for(uint16_t i = 0; i < 512; ++i)
     c2a:	f4 e0       	ldi	r31, 0x04	; 4
     c2c:	0e 39       	cpi	r16, 0x9E	; 158
     c2e:	1f 07       	cpc	r17, r31
     c30:	c1 f7       	brne	.-16     	; 0xc22 <__stack+0x123>
            raw_block_address = block_address;
     c32:	60 92 96 02 	sts	0x0296, r6	; 0x800296 <raw_block_address>
     c36:	70 92 97 02 	sts	0x0297, r7	; 0x800297 <raw_block_address+0x1>
     c3a:	80 92 98 02 	sts	0x0298, r8	; 0x800298 <raw_block_address+0x2>
     c3e:	90 92 99 02 	sts	0x0299, r9	; 0x800299 <raw_block_address+0x3>
     c42:	20 92 9a 02 	sts	0x029A, r2	; 0x80029a <raw_block_address+0x4>
     c46:	30 92 9b 02 	sts	0x029B, r3	; 0x80029b <raw_block_address+0x5>
     c4a:	40 92 9c 02 	sts	0x029C, r4	; 0x80029c <raw_block_address+0x6>
     c4e:	50 92 9d 02 	sts	0x029D, r5	; 0x80029d <raw_block_address+0x7>
            memcpy(buffer, raw_block + block_offset, read_length);
     c52:	6d 85       	ldd	r22, Y+13	; 0x0d
     c54:	7e 85       	ldd	r23, Y+14	; 0x0e
     c56:	62 56       	subi	r22, 0x62	; 98
     c58:	7d 4f       	sbci	r23, 0xFD	; 253
     c5a:	4f 85       	ldd	r20, Y+15	; 0x0f
     c5c:	58 89       	ldd	r21, Y+16	; 0x10
     c5e:	89 85       	ldd	r24, Y+9	; 0x09
     c60:	9a 85       	ldd	r25, Y+10	; 0x0a
     c62:	3a d6       	rcall	.+3188   	; 0x18d8 <memcpy>
            buffer += read_length;
     c64:	29 85       	ldd	r18, Y+9	; 0x09
     c66:	3a 85       	ldd	r19, Y+10	; 0x0a
     c68:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6a:	98 89       	ldd	r25, Y+16	; 0x10
     c6c:	28 0f       	add	r18, r24
     c6e:	39 1f       	adc	r19, r25
     c70:	3a 87       	std	Y+10, r19	; 0x0a
     c72:	29 87       	std	Y+9, r18	; 0x09
            sd_raw_rec_byte();
     c74:	02 df       	rcall	.-508    	; 0xa7a <sd_raw_rec_byte>
            sd_raw_rec_byte();
     c76:	01 df       	rcall	.-510    	; 0xa7a <sd_raw_rec_byte>
            unselect_card();
     c78:	28 9a       	sbi	0x05, 0	; 5
            sd_raw_rec_byte();
     c7a:	ff de       	rcall	.-514    	; 0xa7a <sd_raw_rec_byte>
        length -= read_length;
     c7c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c7e:	9c 85       	ldd	r25, Y+12	; 0x0c
     c80:	ef 85       	ldd	r30, Y+15	; 0x0f
     c82:	f8 89       	ldd	r31, Y+16	; 0x10
     c84:	8e 1b       	sub	r24, r30
     c86:	9f 0b       	sbc	r25, r31
     c88:	9c 87       	std	Y+12, r25	; 0x0c
     c8a:	8b 87       	std	Y+11, r24	; 0x0b
        offset += read_length;
     c8c:	9f 01       	movw	r18, r30
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	a9 80       	ldd	r10, Y+1	; 0x01
     c9c:	ba 80       	ldd	r11, Y+2	; 0x02
     c9e:	cb 80       	ldd	r12, Y+3	; 0x03
     ca0:	dc 80       	ldd	r13, Y+4	; 0x04
     ca2:	ed 80       	ldd	r14, Y+5	; 0x05
     ca4:	fe 80       	ldd	r15, Y+6	; 0x06
     ca6:	0f 81       	ldd	r16, Y+7	; 0x07
     ca8:	18 85       	ldd	r17, Y+8	; 0x08
     caa:	ef d5       	rcall	.+3038   	; 0x188a <__adddi3>
     cac:	29 83       	std	Y+1, r18	; 0x01
     cae:	3a 83       	std	Y+2, r19	; 0x02
     cb0:	4b 83       	std	Y+3, r20	; 0x03
     cb2:	5c 83       	std	Y+4, r21	; 0x04
     cb4:	6d 83       	std	Y+5, r22	; 0x05
     cb6:	7e 83       	std	Y+6, r23	; 0x06
     cb8:	8f 83       	std	Y+7, r24	; 0x07
     cba:	98 87       	std	Y+8, r25	; 0x08
     cbc:	3a cf       	rjmp	.-396    	; 0xb32 <__stack+0x33>
            memcpy(buffer, raw_block + block_offset, read_length);
     cbe:	6d 85       	ldd	r22, Y+13	; 0x0d
     cc0:	7e 85       	ldd	r23, Y+14	; 0x0e
     cc2:	62 56       	subi	r22, 0x62	; 98
     cc4:	7d 4f       	sbci	r23, 0xFD	; 253
     cc6:	4f 85       	ldd	r20, Y+15	; 0x0f
     cc8:	58 89       	ldd	r21, Y+16	; 0x10
     cca:	89 85       	ldd	r24, Y+9	; 0x09
     ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
     cce:	04 d6       	rcall	.+3080   	; 0x18d8 <memcpy>
            buffer += read_length;
     cd0:	e9 85       	ldd	r30, Y+9	; 0x09
     cd2:	fa 85       	ldd	r31, Y+10	; 0x0a
     cd4:	2f 85       	ldd	r18, Y+15	; 0x0f
     cd6:	38 89       	ldd	r19, Y+16	; 0x10
     cd8:	e2 0f       	add	r30, r18
     cda:	f3 1f       	adc	r31, r19
     cdc:	fa 87       	std	Y+10, r31	; 0x0a
     cde:	e9 87       	std	Y+9, r30	; 0x09
     ce0:	cd cf       	rjmp	.-102    	; 0xc7c <__stack+0x17d>

00000ce2 <sd_raw_init>:
{
     ce2:	cf 92       	push	r12
     ce4:	df 92       	push	r13
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
    configure_pin_mosi();
     cf2:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_sck();
     cf4:	21 9a       	sbi	0x04, 1	; 4
    configure_pin_ss();
     cf6:	24 9a       	sbi	0x04, 4	; 4
    configure_pin_miso();
     cf8:	23 98       	cbi	0x04, 3	; 4
    unselect_card();
     cfa:	28 9a       	sbi	0x05, 0	; 5
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
     cfc:	83 e5       	ldi	r24, 0x53	; 83
     cfe:	8c bd       	out	0x2c, r24	; 44
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
     d00:	8d b5       	in	r24, 0x2d	; 45
     d02:	8e 7f       	andi	r24, 0xFE	; 254
     d04:	8d bd       	out	0x2d, r24	; 45
    sd_raw_card_type = 0;
     d06:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <sd_raw_card_type>
     d0a:	ca e0       	ldi	r28, 0x0A	; 10
        sd_raw_rec_byte();
     d0c:	b6 de       	rcall	.-660    	; 0xa7a <sd_raw_rec_byte>
     d0e:	c1 50       	subi	r28, 0x01	; 1
    for(uint8_t i = 0; i < 10; ++i)
     d10:	e9 f7       	brne	.-6      	; 0xd0c <sd_raw_init+0x2a>
    select_card();
     d12:	28 98       	cbi	0x05, 0	; 5
     d14:	c0 e0       	ldi	r28, 0x00	; 0
     d16:	d2 e0       	ldi	r29, 0x02	; 2
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	ba 01       	movw	r22, r20
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	b6 de       	rcall	.-660    	; 0xa8e <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	21 f0       	breq	.+8      	; 0xd2e <sd_raw_init+0x4c>
     d26:	21 97       	sbiw	r28, 0x01	; 1
        if(i == 0x1ff)
     d28:	b9 f7       	brne	.-18     	; 0xd18 <sd_raw_init+0x36>
            unselect_card();
     d2a:	28 9a       	sbi	0x05, 0	; 5
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <sd_raw_init+0x66>
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
     d2e:	4a ea       	ldi	r20, 0xAA	; 170
     d30:	51 e0       	ldi	r21, 0x01	; 1
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	88 e0       	ldi	r24, 0x08	; 8
     d38:	aa de       	rcall	.-684    	; 0xa8e <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
     d3a:	82 fd       	sbrc	r24, 2
     d3c:	2b c0       	rjmp	.+86     	; 0xd94 <sd_raw_init+0xb2>
        sd_raw_rec_byte();
     d3e:	9d de       	rcall	.-710    	; 0xa7a <sd_raw_rec_byte>
        sd_raw_rec_byte();
     d40:	9c de       	rcall	.-712    	; 0xa7a <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
     d42:	9b de       	rcall	.-714    	; 0xa7a <sd_raw_rec_byte>
     d44:	80 fd       	sbrc	r24, 0
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <sd_raw_init+0x6a>
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	83 c0       	rjmp	.+262    	; 0xe52 <sd_raw_init+0x170>
        if(sd_raw_rec_byte() != 0xaa)
     d4c:	96 de       	rcall	.-724    	; 0xa7a <sd_raw_rec_byte>
     d4e:	8a 3a       	cpi	r24, 0xAA	; 170
     d50:	d9 f7       	brne	.-10     	; 0xd48 <sd_raw_init+0x66>
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
     d52:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <sd_raw_card_type>
     d56:	82 60       	ori	r24, 0x02	; 2
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
     d58:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <sd_raw_card_type>
    select_card();
     d5c:	c0 e0       	ldi	r28, 0x00	; 0
     d5e:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
     d60:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <sd_raw_card_type>
     d64:	98 2f       	mov	r25, r24
     d66:	93 70       	andi	r25, 0x03	; 3
     d68:	49 f1       	breq	.+82     	; 0xdbc <sd_raw_init+0xda>
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
     d6a:	81 ff       	sbrs	r24, 1
     d6c:	23 c0       	rjmp	.+70     	; 0xdb4 <sd_raw_init+0xd2>
                arg = 0x40000000;
     d6e:	c1 2c       	mov	r12, r1
     d70:	d1 2c       	mov	r13, r1
     d72:	e1 2c       	mov	r14, r1
     d74:	90 e4       	ldi	r25, 0x40	; 64
     d76:	f9 2e       	mov	r15, r25
            sd_raw_send_command(CMD_APP, 0);
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	50 e0       	ldi	r21, 0x00	; 0
     d7c:	ba 01       	movw	r22, r20
     d7e:	87 e3       	ldi	r24, 0x37	; 55
     d80:	86 de       	rcall	.-756    	; 0xa8e <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
     d82:	b7 01       	movw	r22, r14
     d84:	a6 01       	movw	r20, r12
     d86:	89 e2       	ldi	r24, 0x29	; 41
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
     d88:	82 de       	rcall	.-764    	; 0xa8e <sd_raw_send_command>
        if((response & (1 << R1_IDLE_STATE)) == 0)
     d8a:	80 ff       	sbrs	r24, 0
     d8c:	1c c0       	rjmp	.+56     	; 0xdc6 <sd_raw_init+0xe4>
     d8e:	21 97       	sbiw	r28, 0x01	; 1
        if(i == 0x7fff)
     d90:	39 f7       	brne	.-50     	; 0xd60 <sd_raw_init+0x7e>
     d92:	cb cf       	rjmp	.-106    	; 0xd2a <sd_raw_init+0x48>
        sd_raw_send_command(CMD_APP, 0);
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	50 e0       	ldi	r21, 0x00	; 0
     d98:	ba 01       	movw	r22, r20
     d9a:	87 e3       	ldi	r24, 0x37	; 55
     d9c:	78 de       	rcall	.-784    	; 0xa8e <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	50 e0       	ldi	r21, 0x00	; 0
     da2:	ba 01       	movw	r22, r20
     da4:	89 e2       	ldi	r24, 0x29	; 41
     da6:	73 de       	rcall	.-794    	; 0xa8e <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
     da8:	82 fd       	sbrc	r24, 2
     daa:	d8 cf       	rjmp	.-80     	; 0xd5c <sd_raw_init+0x7a>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
     dac:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <sd_raw_card_type>
     db0:	81 60       	ori	r24, 0x01	; 1
     db2:	d2 cf       	rjmp	.-92     	; 0xd58 <sd_raw_init+0x76>
            uint32_t arg = 0;
     db4:	c1 2c       	mov	r12, r1
     db6:	d1 2c       	mov	r13, r1
     db8:	76 01       	movw	r14, r12
     dba:	de cf       	rjmp	.-68     	; 0xd78 <sd_raw_init+0x96>
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	ba 01       	movw	r22, r20
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	e1 cf       	rjmp	.-62     	; 0xd88 <sd_raw_init+0xa6>
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
     dc6:	c0 91 95 02 	lds	r28, 0x0295	; 0x800295 <sd_raw_card_type>
     dca:	c1 ff       	sbrs	r28, 1
     dcc:	10 c0       	rjmp	.+32     	; 0xdee <sd_raw_init+0x10c>
        if(sd_raw_send_command(CMD_READ_OCR, 0))
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	ba 01       	movw	r22, r20
     dd4:	8a e3       	ldi	r24, 0x3A	; 58
     dd6:	5b de       	rcall	.-842    	; 0xa8e <sd_raw_send_command>
     dd8:	81 11       	cpse	r24, r1
     dda:	a7 cf       	rjmp	.-178    	; 0xd2a <sd_raw_init+0x48>
        if(sd_raw_rec_byte() & 0x40)
     ddc:	4e de       	rcall	.-868    	; 0xa7a <sd_raw_rec_byte>
     dde:	86 ff       	sbrs	r24, 6
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <sd_raw_init+0x106>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
     de2:	c4 60       	ori	r28, 0x04	; 4
     de4:	c0 93 95 02 	sts	0x0295, r28	; 0x800295 <sd_raw_card_type>
        sd_raw_rec_byte();
     de8:	48 de       	rcall	.-880    	; 0xa7a <sd_raw_rec_byte>
        sd_raw_rec_byte();
     dea:	47 de       	rcall	.-882    	; 0xa7a <sd_raw_rec_byte>
        sd_raw_rec_byte();
     dec:	46 de       	rcall	.-884    	; 0xa7a <sd_raw_rec_byte>
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	52 e0       	ldi	r21, 0x02	; 2
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 e1       	ldi	r24, 0x10	; 16
     df8:	4a de       	rcall	.-876    	; 0xa8e <sd_raw_send_command>
        unselect_card();
     dfa:	28 9a       	sbi	0x05, 0	; 5
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
     dfc:	81 11       	cpse	r24, r1
     dfe:	a4 cf       	rjmp	.-184    	; 0xd48 <sd_raw_init+0x66>
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
     e00:	8c b5       	in	r24, 0x2c	; 44
     e02:	8c 7f       	andi	r24, 0xFC	; 252
     e04:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
     e06:	8d b5       	in	r24, 0x2d	; 45
     e08:	81 60       	ori	r24, 0x01	; 1
     e0a:	8d bd       	out	0x2d, r24	; 45
    raw_block_address = (offset_t) -1;
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <raw_block_address>
     e12:	80 93 97 02 	sts	0x0297, r24	; 0x800297 <raw_block_address+0x1>
     e16:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <raw_block_address+0x2>
     e1a:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <raw_block_address+0x3>
     e1e:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <raw_block_address+0x4>
     e22:	80 93 9b 02 	sts	0x029B, r24	; 0x80029b <raw_block_address+0x5>
     e26:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <raw_block_address+0x6>
     e2a:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <raw_block_address+0x7>
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
     e2e:	e1 2c       	mov	r14, r1
     e30:	82 e0       	ldi	r24, 0x02	; 2
     e32:	f8 2e       	mov	r15, r24
     e34:	0e e9       	ldi	r16, 0x9E	; 158
     e36:	12 e0       	ldi	r17, 0x02	; 2
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	4e de       	rcall	.-868    	; 0xae6 <sd_raw_read>
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	88 23       	and	r24, r24
     e4e:	09 f4       	brne	.+2      	; 0xe52 <sd_raw_init+0x170>
     e50:	7b cf       	rjmp	.-266    	; 0xd48 <sd_raw_init+0x66>
}
     e52:	89 2f       	mov	r24, r25
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	08 95       	ret

00000e66 <Endpoint_Null_Stream>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     e66:	cf 92       	push	r12
     e68:	df 92       	push	r13
     e6a:	ff 92       	push	r15
     e6c:	0f 93       	push	r16
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	ec 01       	movw	r28, r24
     e76:	8b 01       	movw	r16, r22
     e78:	e2 d1       	rcall	.+964    	; 0x123e <Endpoint_WaitUntilReady>
     e7a:	f8 2e       	mov	r15, r24
     e7c:	81 11       	cpse	r24, r1
     e7e:	21 c0       	rjmp	.+66     	; 0xec2 <Endpoint_Null_Stream+0x5c>
     e80:	01 15       	cp	r16, r1
     e82:	11 05       	cpc	r17, r1
     e84:	29 f0       	breq	.+10     	; 0xe90 <Endpoint_Null_Stream+0x2a>
     e86:	f8 01       	movw	r30, r16
     e88:	80 81       	ld	r24, Z
     e8a:	91 81       	ldd	r25, Z+1	; 0x01
     e8c:	c8 1b       	sub	r28, r24
     e8e:	d9 0b       	sbc	r29, r25
     e90:	c1 2c       	mov	r12, r1
     e92:	d1 2c       	mov	r13, r1
     e94:	20 97       	sbiw	r28, 0x00	; 0
     e96:	a9 f0       	breq	.+42     	; 0xec2 <Endpoint_Null_Stream+0x5c>
     e98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e9c:	85 fd       	sbrc	r24, 5
     e9e:	1f c0       	rjmp	.+62     	; 0xede <Endpoint_Null_Stream+0x78>
     ea0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ea4:	8e 77       	andi	r24, 0x7E	; 126
     ea6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eaa:	01 15       	cp	r16, r1
     eac:	11 05       	cpc	r17, r1
     eae:	91 f0       	breq	.+36     	; 0xed4 <Endpoint_Null_Stream+0x6e>
     eb0:	f8 01       	movw	r30, r16
     eb2:	80 81       	ld	r24, Z
     eb4:	91 81       	ldd	r25, Z+1	; 0x01
     eb6:	c8 0e       	add	r12, r24
     eb8:	d9 1e       	adc	r13, r25
     eba:	d1 82       	std	Z+1, r13	; 0x01
     ebc:	c0 82       	st	Z, r12
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	f8 2e       	mov	r15, r24
     ec2:	8f 2d       	mov	r24, r15
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	08 95       	ret
     ed4:	b4 d1       	rcall	.+872    	; 0x123e <Endpoint_WaitUntilReady>
     ed6:	88 23       	and	r24, r24
     ed8:	e9 f2       	breq	.-70     	; 0xe94 <Endpoint_Null_Stream+0x2e>
     eda:	f8 2e       	mov	r15, r24
     edc:	f2 cf       	rjmp	.-28     	; 0xec2 <Endpoint_Null_Stream+0x5c>
     ede:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     ee2:	21 97       	sbiw	r28, 0x01	; 1
     ee4:	ff ef       	ldi	r31, 0xFF	; 255
     ee6:	cf 1a       	sub	r12, r31
     ee8:	df 0a       	sbc	r13, r31
     eea:	d4 cf       	rjmp	.-88     	; 0xe94 <Endpoint_Null_Stream+0x2e>

00000eec <Endpoint_Write_Stream_LE>:
     eec:	af 92       	push	r10
     eee:	bf 92       	push	r11
     ef0:	df 92       	push	r13
     ef2:	ef 92       	push	r14
     ef4:	ff 92       	push	r15
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	ec 01       	movw	r28, r24
     f00:	8b 01       	movw	r16, r22
     f02:	7a 01       	movw	r14, r20
     f04:	9c d1       	rcall	.+824    	; 0x123e <Endpoint_WaitUntilReady>
     f06:	d8 2e       	mov	r13, r24
     f08:	81 11       	cpse	r24, r1
     f0a:	24 c0       	rjmp	.+72     	; 0xf54 <Endpoint_Write_Stream_LE+0x68>
     f0c:	e1 14       	cp	r14, r1
     f0e:	f1 04       	cpc	r15, r1
     f10:	39 f0       	breq	.+14     	; 0xf20 <Endpoint_Write_Stream_LE+0x34>
     f12:	f7 01       	movw	r30, r14
     f14:	80 81       	ld	r24, Z
     f16:	91 81       	ldd	r25, Z+1	; 0x01
     f18:	08 1b       	sub	r16, r24
     f1a:	19 0b       	sbc	r17, r25
     f1c:	c8 0f       	add	r28, r24
     f1e:	d9 1f       	adc	r29, r25
     f20:	a1 2c       	mov	r10, r1
     f22:	b1 2c       	mov	r11, r1
     f24:	01 15       	cp	r16, r1
     f26:	11 05       	cpc	r17, r1
     f28:	a9 f0       	breq	.+42     	; 0xf54 <Endpoint_Write_Stream_LE+0x68>
     f2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f2e:	85 fd       	sbrc	r24, 5
     f30:	21 c0       	rjmp	.+66     	; 0xf74 <Endpoint_Write_Stream_LE+0x88>
     f32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f36:	8e 77       	andi	r24, 0x7E	; 126
     f38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f3c:	e1 14       	cp	r14, r1
     f3e:	f1 04       	cpc	r15, r1
     f40:	a1 f0       	breq	.+40     	; 0xf6a <Endpoint_Write_Stream_LE+0x7e>
     f42:	f7 01       	movw	r30, r14
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	a8 0e       	add	r10, r24
     f4a:	b9 1e       	adc	r11, r25
     f4c:	b1 82       	std	Z+1, r11	; 0x01
     f4e:	a0 82       	st	Z, r10
     f50:	85 e0       	ldi	r24, 0x05	; 5
     f52:	d8 2e       	mov	r13, r24
     f54:	8d 2d       	mov	r24, r13
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	bf 90       	pop	r11
     f66:	af 90       	pop	r10
     f68:	08 95       	ret
     f6a:	69 d1       	rcall	.+722    	; 0x123e <Endpoint_WaitUntilReady>
     f6c:	88 23       	and	r24, r24
     f6e:	d1 f2       	breq	.-76     	; 0xf24 <Endpoint_Write_Stream_LE+0x38>
     f70:	d8 2e       	mov	r13, r24
     f72:	f0 cf       	rjmp	.-32     	; 0xf54 <Endpoint_Write_Stream_LE+0x68>
     f74:	89 91       	ld	r24, Y+
     f76:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     f7a:	01 50       	subi	r16, 0x01	; 1
     f7c:	11 09       	sbc	r17, r1
     f7e:	ff ef       	ldi	r31, 0xFF	; 255
     f80:	af 1a       	sub	r10, r31
     f82:	bf 0a       	sbc	r11, r31
     f84:	cf cf       	rjmp	.-98     	; 0xf24 <Endpoint_Write_Stream_LE+0x38>

00000f86 <Endpoint_Read_Stream_LE>:
     f86:	af 92       	push	r10
     f88:	bf 92       	push	r11
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	df 93       	push	r29
     f98:	ec 01       	movw	r28, r24
     f9a:	8b 01       	movw	r16, r22
     f9c:	7a 01       	movw	r14, r20
     f9e:	4f d1       	rcall	.+670    	; 0x123e <Endpoint_WaitUntilReady>
     fa0:	d8 2e       	mov	r13, r24
     fa2:	81 11       	cpse	r24, r1
     fa4:	24 c0       	rjmp	.+72     	; 0xfee <Endpoint_Read_Stream_LE+0x68>
     fa6:	e1 14       	cp	r14, r1
     fa8:	f1 04       	cpc	r15, r1
     faa:	39 f0       	breq	.+14     	; 0xfba <Endpoint_Read_Stream_LE+0x34>
     fac:	f7 01       	movw	r30, r14
     fae:	80 81       	ld	r24, Z
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	08 1b       	sub	r16, r24
     fb4:	19 0b       	sbc	r17, r25
     fb6:	c8 0f       	add	r28, r24
     fb8:	d9 1f       	adc	r29, r25
     fba:	a1 2c       	mov	r10, r1
     fbc:	b1 2c       	mov	r11, r1
     fbe:	01 15       	cp	r16, r1
     fc0:	11 05       	cpc	r17, r1
     fc2:	a9 f0       	breq	.+42     	; 0xfee <Endpoint_Read_Stream_LE+0x68>
     fc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fc8:	85 fd       	sbrc	r24, 5
     fca:	21 c0       	rjmp	.+66     	; 0x100e <Endpoint_Read_Stream_LE+0x88>
     fcc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fd0:	8b 77       	andi	r24, 0x7B	; 123
     fd2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fd6:	e1 14       	cp	r14, r1
     fd8:	f1 04       	cpc	r15, r1
     fda:	a1 f0       	breq	.+40     	; 0x1004 <Endpoint_Read_Stream_LE+0x7e>
     fdc:	f7 01       	movw	r30, r14
     fde:	80 81       	ld	r24, Z
     fe0:	91 81       	ldd	r25, Z+1	; 0x01
     fe2:	a8 0e       	add	r10, r24
     fe4:	b9 1e       	adc	r11, r25
     fe6:	b1 82       	std	Z+1, r11	; 0x01
     fe8:	a0 82       	st	Z, r10
     fea:	85 e0       	ldi	r24, 0x05	; 5
     fec:	d8 2e       	mov	r13, r24
     fee:	8d 2d       	mov	r24, r13
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	bf 90       	pop	r11
    1000:	af 90       	pop	r10
    1002:	08 95       	ret
    1004:	1c d1       	rcall	.+568    	; 0x123e <Endpoint_WaitUntilReady>
    1006:	88 23       	and	r24, r24
    1008:	d1 f2       	breq	.-76     	; 0xfbe <Endpoint_Read_Stream_LE+0x38>
    100a:	d8 2e       	mov	r13, r24
    100c:	f0 cf       	rjmp	.-32     	; 0xfee <Endpoint_Read_Stream_LE+0x68>
    100e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1012:	89 93       	st	Y+, r24
    1014:	01 50       	subi	r16, 0x01	; 1
    1016:	11 09       	sbc	r17, r1
    1018:	ff ef       	ldi	r31, 0xFF	; 255
    101a:	af 1a       	sub	r10, r31
    101c:	bf 0a       	sbc	r11, r31
    101e:	cf cf       	rjmp	.-98     	; 0xfbe <Endpoint_Read_Stream_LE+0x38>

00001020 <Endpoint_Write_Control_Stream_LE>:
    1020:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <USB_ControlRequest+0x6>
    1024:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <USB_ControlRequest+0x7>
    1028:	26 17       	cp	r18, r22
    102a:	37 07       	cpc	r19, r23
    102c:	a8 f0       	brcs	.+42     	; 0x1058 <Endpoint_Write_Control_Stream_LE+0x38>
    102e:	61 15       	cp	r22, r1
    1030:	71 05       	cpc	r23, r1
    1032:	29 f4       	brne	.+10     	; 0x103e <Endpoint_Write_Control_Stream_LE+0x1e>
    1034:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1038:	2e 77       	andi	r18, 0x7E	; 126
    103a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    103e:	fc 01       	movw	r30, r24
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	61 15       	cp	r22, r1
    1044:	71 05       	cpc	r23, r1
    1046:	51 f4       	brne	.+20     	; 0x105c <Endpoint_Write_Control_Stream_LE+0x3c>
    1048:	21 11       	cpse	r18, r1
    104a:	08 c0       	rjmp	.+16     	; 0x105c <Endpoint_Write_Control_Stream_LE+0x3c>
    104c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1050:	82 ff       	sbrs	r24, 2
    1052:	33 c0       	rjmp	.+102    	; 0x10ba <Endpoint_Write_Control_Stream_LE+0x9a>
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	08 95       	ret
    1058:	b9 01       	movw	r22, r18
    105a:	f1 cf       	rjmp	.-30     	; 0x103e <Endpoint_Write_Control_Stream_LE+0x1e>
    105c:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <USB_DeviceState>
    1060:	88 23       	and	r24, r24
    1062:	b9 f1       	breq	.+110    	; 0x10d2 <Endpoint_Write_Control_Stream_LE+0xb2>
    1064:	85 30       	cpi	r24, 0x05	; 5
    1066:	b9 f1       	breq	.+110    	; 0x10d6 <Endpoint_Write_Control_Stream_LE+0xb6>
    1068:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    106c:	83 fd       	sbrc	r24, 3
    106e:	2f c0       	rjmp	.+94     	; 0x10ce <Endpoint_Write_Control_Stream_LE+0xae>
    1070:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1074:	82 fd       	sbrc	r24, 2
    1076:	ea cf       	rjmp	.-44     	; 0x104c <Endpoint_Write_Control_Stream_LE+0x2c>
    1078:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    107c:	80 ff       	sbrs	r24, 0
    107e:	e1 cf       	rjmp	.-62     	; 0x1042 <Endpoint_Write_Control_Stream_LE+0x22>
    1080:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1084:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	92 2b       	or	r25, r18
    108c:	61 15       	cp	r22, r1
    108e:	71 05       	cpc	r23, r1
    1090:	19 f0       	breq	.+6      	; 0x1098 <Endpoint_Write_Control_Stream_LE+0x78>
    1092:	88 30       	cpi	r24, 0x08	; 8
    1094:	91 05       	cpc	r25, r1
    1096:	50 f0       	brcs	.+20     	; 0x10ac <Endpoint_Write_Control_Stream_LE+0x8c>
    1098:	21 e0       	ldi	r18, 0x01	; 1
    109a:	08 97       	sbiw	r24, 0x08	; 8
    109c:	09 f0       	breq	.+2      	; 0x10a0 <Endpoint_Write_Control_Stream_LE+0x80>
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10a4:	8e 77       	andi	r24, 0x7E	; 126
    10a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10aa:	cb cf       	rjmp	.-106    	; 0x1042 <Endpoint_Write_Control_Stream_LE+0x22>
    10ac:	21 91       	ld	r18, Z+
    10ae:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    10b2:	61 50       	subi	r22, 0x01	; 1
    10b4:	71 09       	sbc	r23, r1
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	e9 cf       	rjmp	.-46     	; 0x108c <Endpoint_Write_Control_Stream_LE+0x6c>
    10ba:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <USB_DeviceState>
    10be:	88 23       	and	r24, r24
    10c0:	41 f0       	breq	.+16     	; 0x10d2 <Endpoint_Write_Control_Stream_LE+0xb2>
    10c2:	85 30       	cpi	r24, 0x05	; 5
    10c4:	41 f0       	breq	.+16     	; 0x10d6 <Endpoint_Write_Control_Stream_LE+0xb6>
    10c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ca:	83 ff       	sbrs	r24, 3
    10cc:	bf cf       	rjmp	.-130    	; 0x104c <Endpoint_Write_Control_Stream_LE+0x2c>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret
    10d2:	82 e0       	ldi	r24, 0x02	; 2
    10d4:	08 95       	ret
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	08 95       	ret

000010da <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    10da:	20 91 c8 04 	lds	r18, 0x04C8	; 0x8004c8 <USB_ControlRequest+0x6>
    10de:	30 91 c9 04 	lds	r19, 0x04C9	; 0x8004c9 <USB_ControlRequest+0x7>
    10e2:	26 17       	cp	r18, r22
    10e4:	37 07       	cpc	r19, r23
    10e6:	a8 f0       	brcs	.+42     	; 0x1112 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    10e8:	61 15       	cp	r22, r1
    10ea:	71 05       	cpc	r23, r1
    10ec:	29 f4       	brne	.+10     	; 0x10f8 <Endpoint_Write_Control_PStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ee:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10f2:	2e 77       	andi	r18, 0x7E	; 126
    10f4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10f8:	fc 01       	movw	r30, r24
    10fa:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    10fc:	61 15       	cp	r22, r1
    10fe:	71 05       	cpc	r23, r1
    1100:	51 f4       	brne	.+20     	; 0x1116 <Endpoint_Write_Control_PStream_LE+0x3c>
    1102:	21 11       	cpse	r18, r1
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1106:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    110a:	82 ff       	sbrs	r24, 2
    110c:	34 c0       	rjmp	.+104    	; 0x1176 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	08 95       	ret
    1112:	b9 01       	movw	r22, r18
    1114:	f1 cf       	rjmp	.-30     	; 0x10f8 <Endpoint_Write_Control_PStream_LE+0x1e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1116:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    111a:	88 23       	and	r24, r24
    111c:	c1 f1       	breq	.+112    	; 0x118e <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    111e:	85 30       	cpi	r24, 0x05	; 5
    1120:	c1 f1       	breq	.+112    	; 0x1192 <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1122:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1126:	83 fd       	sbrc	r24, 3
    1128:	30 c0       	rjmp	.+96     	; 0x118a <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    112a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    112e:	82 fd       	sbrc	r24, 2
    1130:	ea cf       	rjmp	.-44     	; 0x1106 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1132:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    1136:	80 ff       	sbrs	r24, 0
    1138:	e1 cf       	rjmp	.-62     	; 0x10fc <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    113a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    113e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	92 2b       	or	r25, r18
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1146:	61 15       	cp	r22, r1
    1148:	71 05       	cpc	r23, r1
    114a:	19 f0       	breq	.+6      	; 0x1152 <Endpoint_Write_Control_PStream_LE+0x78>
    114c:	88 30       	cpi	r24, 0x08	; 8
    114e:	91 05       	cpc	r25, r1
    1150:	50 f0       	brcs	.+20     	; 0x1166 <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1152:	21 e0       	ldi	r18, 0x01	; 1
    1154:	08 97       	sbiw	r24, 0x08	; 8
    1156:	09 f0       	breq	.+2      	; 0x115a <Endpoint_Write_Control_PStream_LE+0x80>
    1158:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    115a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    115e:	8e 77       	andi	r24, 0x7E	; 126
    1160:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1164:	cb cf       	rjmp	.-106    	; 0x10fc <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1166:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1168:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    116c:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    116e:	61 50       	subi	r22, 0x01	; 1
    1170:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1172:	01 96       	adiw	r24, 0x01	; 1
    1174:	e8 cf       	rjmp	.-48     	; 0x1146 <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1176:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    117a:	88 23       	and	r24, r24
    117c:	41 f0       	breq	.+16     	; 0x118e <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    117e:	85 30       	cpi	r24, 0x05	; 5
    1180:	41 f0       	breq	.+16     	; 0x1192 <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1182:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    1186:	83 ff       	sbrs	r24, 3
    1188:	be cf       	rjmp	.-132    	; 0x1106 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    118a:	81 e0       	ldi	r24, 0x01	; 1
}
    118c:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    118e:	82 e0       	ldi	r24, 0x02	; 2
    1190:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1192:	83 e0       	ldi	r24, 0x03	; 3
    1194:	08 95       	ret

00001196 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1196:	98 2f       	mov	r25, r24
    1198:	97 30       	cpi	r25, 0x07	; 7
    119a:	28 f0       	brcs	.+10     	; 0x11a6 <Endpoint_ConfigureEndpoint_Prv+0x10>
    119c:	8f 70       	andi	r24, 0x0F	; 15
    119e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	08 95       	ret
    11a6:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11aa:	98 17       	cp	r25, r24
    11ac:	51 f0       	breq	.+20     	; 0x11c2 <Endpoint_ConfigureEndpoint_Prv+0x2c>
    11ae:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    11b2:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    11b6:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    11ba:	21 fd       	sbrc	r18, 1
    11bc:	06 c0       	rjmp	.+12     	; 0x11ca <Endpoint_ConfigureEndpoint_Prv+0x34>
    11be:	9f 5f       	subi	r25, 0xFF	; 255
    11c0:	eb cf       	rjmp	.-42     	; 0x1198 <Endpoint_ConfigureEndpoint_Prv+0x2>
    11c2:	24 2f       	mov	r18, r20
    11c4:	76 2f       	mov	r23, r22
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	f8 cf       	rjmp	.-16     	; 0x11ba <Endpoint_ConfigureEndpoint_Prv+0x24>
    11ca:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11ce:	3e 7f       	andi	r19, 0xFE	; 254
    11d0:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11d4:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    11d8:	3d 7f       	andi	r19, 0xFD	; 253
    11da:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    11de:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11e2:	31 60       	ori	r19, 0x01	; 1
    11e4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    11e8:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    11ec:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    11f0:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    11f4:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    11f8:	27 fd       	sbrc	r18, 7
    11fa:	e1 cf       	rjmp	.-62     	; 0x11be <Endpoint_ConfigureEndpoint_Prv+0x28>
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	08 95       	ret

00001200 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1200:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <USB_ControlRequest>
    1204:	87 ff       	sbrs	r24, 7
    1206:	13 c0       	rjmp	.+38     	; 0x122e <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1208:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    120c:	82 ff       	sbrs	r24, 2
    120e:	06 c0       	rjmp	.+12     	; 0x121c <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1210:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1214:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1216:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    121c:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <USB_DeviceState>
    1220:	81 11       	cpse	r24, r1
    1222:	f2 cf       	rjmp	.-28     	; 0x1208 <Endpoint_ClearStatusStage+0x8>
    1224:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1226:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <USB_DeviceState>
    122a:	88 23       	and	r24, r24
    122c:	d9 f3       	breq	.-10     	; 0x1224 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    122e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    1232:	80 ff       	sbrs	r24, 0
    1234:	f8 cf       	rjmp	.-16     	; 0x1226 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1236:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    123a:	8e 77       	andi	r24, 0x7E	; 126
    123c:	ec cf       	rjmp	.-40     	; 0x1216 <Endpoint_ClearStatusStage+0x16>

0000123e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    123e:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1242:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    1246:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1248:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    124c:	90 fd       	sbrc	r25, 0
    124e:	20 c0       	rjmp	.+64     	; 0x1290 <Endpoint_WaitUntilReady+0x52>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1250:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1254:	92 fd       	sbrc	r25, 2
    1256:	20 c0       	rjmp	.+64     	; 0x1298 <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1258:	90 91 c1 04 	lds	r25, 0x04C1	; 0x8004c1 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    125c:	99 23       	and	r25, r25
    125e:	91 f0       	breq	.+36     	; 0x1284 <Endpoint_WaitUntilReady+0x46>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1260:	95 30       	cpi	r25, 0x05	; 5
    1262:	91 f0       	breq	.+36     	; 0x1288 <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1264:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1268:	95 fd       	sbrc	r25, 5
    126a:	10 c0       	rjmp	.+32     	; 0x128c <Endpoint_WaitUntilReady+0x4e>
    126c:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1270:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1274:	42 17       	cp	r20, r18
    1276:	53 07       	cpc	r21, r19
    1278:	39 f3       	breq	.-50     	; 0x1248 <Endpoint_WaitUntilReady+0xa>
    127a:	81 50       	subi	r24, 0x01	; 1
    127c:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    127e:	21 f7       	brne	.-56     	; 0x1248 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1280:	84 e0       	ldi	r24, 0x04	; 4
    1282:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1284:	82 e0       	ldi	r24, 0x02	; 2
    1286:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	08 95       	ret
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1290:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
    1294:	90 ff       	sbrs	r25, 0
    1296:	e0 cf       	rjmp	.-64     	; 0x1258 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	08 95       	ret

0000129c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    129c:	0f 93       	push	r16
    129e:	1f 93       	push	r17
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    12a4:	4b d0       	rcall	.+150    	; 0x133c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    12a6:	52 d0       	rcall	.+164    	; 0x134c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    12a8:	c8 ed       	ldi	r28, 0xD8	; 216
    12aa:	d0 e0       	ldi	r29, 0x00	; 0
    12ac:	88 81       	ld	r24, Y
    12ae:	8f 77       	andi	r24, 0x7F	; 127
    12b0:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    12b2:	88 81       	ld	r24, Y
    12b4:	80 68       	ori	r24, 0x80	; 128
    12b6:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    12b8:	88 81       	ld	r24, Y
    12ba:	8f 7d       	andi	r24, 0xDF	; 223
    12bc:	88 83       	st	Y, r24
				PLLCSR = 0;
    12be:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    12c0:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    12c4:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    12c8:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    12cc:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    12d0:	00 ee       	ldi	r16, 0xE0	; 224
    12d2:	10 e0       	ldi	r17, 0x00	; 0
    12d4:	f8 01       	movw	r30, r16
    12d6:	80 81       	ld	r24, Z
    12d8:	8b 7f       	andi	r24, 0xFB	; 251
    12da:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    12dc:	88 81       	ld	r24, Y
    12de:	81 60       	ori	r24, 0x01	; 1
    12e0:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    12e2:	42 e0       	ldi	r20, 0x02	; 2
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	56 df       	rcall	.-340    	; 0x1196 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    12ea:	e1 ee       	ldi	r30, 0xE1	; 225
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8e 7f       	andi	r24, 0xFE	; 254
    12f2:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    12f4:	e2 ee       	ldi	r30, 0xE2	; 226
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	81 60       	ori	r24, 0x01	; 1
    12fc:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    12fe:	80 81       	ld	r24, Z
    1300:	88 60       	ori	r24, 0x08	; 8
    1302:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    1304:	f8 01       	movw	r30, r16
    1306:	80 81       	ld	r24, Z
    1308:	8e 7f       	andi	r24, 0xFE	; 254
    130a:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    130c:	88 81       	ld	r24, Y
    130e:	80 61       	ori	r24, 0x10	; 16
    1310:	88 83       	st	Y, r24
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	08 95       	ret

0000131c <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    131c:	e8 ed       	ldi	r30, 0xD8	; 216
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8f 7e       	andi	r24, 0xEF	; 239
    1324:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1326:	e7 ed       	ldi	r30, 0xD7	; 215
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	81 60       	ori	r24, 0x01	; 1
    132e:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1330:	84 e0       	ldi	r24, 0x04	; 4
    1332:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <USB_IsInitialized>
	USB_ResetInterface();
    133a:	b0 cf       	rjmp	.-160    	; 0x129c <USB_ResetInterface>

0000133c <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    133c:	e8 ed       	ldi	r30, 0xD8	; 216
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	8e 7f       	andi	r24, 0xFE	; 254
    1344:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1346:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    134a:	08 95       	ret

0000134c <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    134c:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1350:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1354:	08 95       	ret

00001356 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1356:	1f 92       	push	r1
    1358:	0f 92       	push	r0
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	0f 92       	push	r0
    135e:	11 24       	eor	r1, r1
    1360:	2f 93       	push	r18
    1362:	3f 93       	push	r19
    1364:	4f 93       	push	r20
    1366:	5f 93       	push	r21
    1368:	6f 93       	push	r22
    136a:	7f 93       	push	r23
    136c:	8f 93       	push	r24
    136e:	9f 93       	push	r25
    1370:	af 93       	push	r26
    1372:	bf 93       	push	r27
    1374:	ef 93       	push	r30
    1376:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1378:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    137c:	82 ff       	sbrs	r24, 2
    137e:	0a c0       	rjmp	.+20     	; 0x1394 <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
    1380:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1384:	82 ff       	sbrs	r24, 2
    1386:	06 c0       	rjmp	.+12     	; 0x1394 <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
    1388:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    138c:	8b 7f       	andi	r24, 0xFB	; 251
    138e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1392:	41 d2       	rcall	.+1154   	; 0x1816 <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    1394:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1398:	80 ff       	sbrs	r24, 0
    139a:	19 c0       	rjmp	.+50     	; 0x13ce <__vector_10+0x78>
						return (USBCON & (1 << VBUSTE));
    139c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    13a0:	80 ff       	sbrs	r24, 0
    13a2:	15 c0       	rjmp	.+42     	; 0x13ce <__vector_10+0x78>
						USBINT &= ~(1 << VBUSTI);
    13a4:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    13a8:	8e 7f       	andi	r24, 0xFE	; 254
    13aa:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    13ae:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    13b2:	80 ff       	sbrs	r24, 0
    13b4:	90 c0       	rjmp	.+288    	; 0x14d6 <__vector_10+0x180>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    13b6:	80 e1       	ldi	r24, 0x10	; 16
    13b8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    13ba:	82 e1       	ldi	r24, 0x12	; 18
    13bc:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    13be:	09 b4       	in	r0, 0x29	; 41
    13c0:	00 fe       	sbrs	r0, 0
    13c2:	fd cf       	rjmp	.-6      	; 0x13be <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    13ca:	0e 94 de 00 	call	0x1bc	; 0x1bc <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    13ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    13d2:	80 ff       	sbrs	r24, 0
    13d4:	18 c0       	rjmp	.+48     	; 0x1406 <__vector_10+0xb0>
						return (UDIEN  & (1 << SUSPE));
    13d6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    13da:	80 ff       	sbrs	r24, 0
    13dc:	14 c0       	rjmp	.+40     	; 0x1406 <__vector_10+0xb0>
						UDIEN  &= ~(1 << SUSPE);
    13de:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    13e2:	8e 7f       	andi	r24, 0xFE	; 254
    13e4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    13e8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    13ec:	80 61       	ori	r24, 0x10	; 16
    13ee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    13f2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    13f6:	80 62       	ori	r24, 0x20	; 32
    13f8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    13fc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    13fe:	85 e0       	ldi	r24, 0x05	; 5
    1400:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1404:	08 d2       	rcall	.+1040   	; 0x1816 <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
    1406:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    140a:	84 ff       	sbrs	r24, 4
    140c:	28 c0       	rjmp	.+80     	; 0x145e <__vector_10+0x108>
						return (UDIEN  & (1 << WAKEUPE));
    140e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1412:	84 ff       	sbrs	r24, 4
    1414:	24 c0       	rjmp	.+72     	; 0x145e <__vector_10+0x108>
				PLLCSR = USB_PLL_PSC;
    1416:	80 e1       	ldi	r24, 0x10	; 16
    1418:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    141a:	82 e1       	ldi	r24, 0x12	; 18
    141c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    141e:	09 b4       	in	r0, 0x29	; 41
    1420:	00 fe       	sbrs	r0, 0
    1422:	fd cf       	rjmp	.-6      	; 0x141e <__vector_10+0xc8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1424:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1428:	8f 7d       	andi	r24, 0xDF	; 223
    142a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    142e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1432:	8f 7e       	andi	r24, 0xEF	; 239
    1434:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    1438:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    143c:	8f 7e       	andi	r24, 0xEF	; 239
    143e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1442:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    144c:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <USB_Device_ConfigurationNumber>
    1450:	88 23       	and	r24, r24
    1452:	09 f4       	brne	.+2      	; 0x1456 <__vector_10+0x100>
    1454:	46 c0       	rjmp	.+140    	; 0x14e2 <__vector_10+0x18c>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1456:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1458:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    145c:	dc d1       	rcall	.+952    	; 0x1816 <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
    145e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1462:	83 ff       	sbrs	r24, 3
    1464:	27 c0       	rjmp	.+78     	; 0x14b4 <__vector_10+0x15e>
						return (UDIEN  & (1 << EORSTE));
    1466:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    146a:	83 ff       	sbrs	r24, 3
    146c:	23 c0       	rjmp	.+70     	; 0x14b4 <__vector_10+0x15e>
						UDINT  &= ~(1 << EORSTI);
    146e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1472:	87 7f       	andi	r24, 0xF7	; 247
    1474:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    147e:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1482:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1486:	8e 7f       	andi	r24, 0xFE	; 254
    1488:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    148c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1490:	8e 7f       	andi	r24, 0xFE	; 254
    1492:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1496:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    149a:	80 61       	ori	r24, 0x10	; 16
    149c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    14a0:	42 e0       	ldi	r20, 0x02	; 2
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	77 de       	rcall	.-786    	; 0x1196 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    14a8:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    14ac:	88 60       	ori	r24, 0x08	; 8
    14ae:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    14b2:	b1 d1       	rcall	.+866    	; 0x1816 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	bf 91       	pop	r27
    14ba:	af 91       	pop	r26
    14bc:	9f 91       	pop	r25
    14be:	8f 91       	pop	r24
    14c0:	7f 91       	pop	r23
    14c2:	6f 91       	pop	r22
    14c4:	5f 91       	pop	r21
    14c6:	4f 91       	pop	r20
    14c8:	3f 91       	pop	r19
    14ca:	2f 91       	pop	r18
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti
				PLLCSR = 0;
    14d6:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    14d8:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    14dc:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <EVENT_USB_Device_Disconnect>
    14e0:	76 cf       	rjmp	.-276    	; 0x13ce <__vector_10+0x78>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    14e2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    14e6:	87 fd       	sbrc	r24, 7
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <__vector_10+0x198>
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	b5 cf       	rjmp	.-150    	; 0x1458 <__vector_10+0x102>
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	b3 cf       	rjmp	.-154    	; 0x1458 <__vector_10+0x102>

000014f2 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    14f2:	1f 92       	push	r1
    14f4:	0f 92       	push	r0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	0f 92       	push	r0
    14fa:	11 24       	eor	r1, r1
    14fc:	2f 93       	push	r18
    14fe:	3f 93       	push	r19
    1500:	4f 93       	push	r20
    1502:	5f 93       	push	r21
    1504:	6f 93       	push	r22
    1506:	7f 93       	push	r23
    1508:	8f 93       	push	r24
    150a:	9f 93       	push	r25
    150c:	af 93       	push	r26
    150e:	bf 93       	push	r27
    1510:	cf 93       	push	r28
    1512:	ef 93       	push	r30
    1514:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1516:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    151a:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    151c:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1520:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    1524:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1528:	87 7f       	andi	r24, 0xF7	; 247
    152a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    152e:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1530:	1b d0       	rcall	.+54     	; 0x1568 <USB_Device_ProcessControlRequest>
    1532:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    1536:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    153a:	88 60       	ori	r24, 0x08	; 8
    153c:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1540:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1544:	ff 91       	pop	r31
    1546:	ef 91       	pop	r30
    1548:	cf 91       	pop	r28
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	0f 90       	pop	r0
    1564:	1f 90       	pop	r1
    1566:	18 95       	reti

00001568 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
    1572:	aa 97       	sbiw	r28, 0x2a	; 42
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	e2 ec       	ldi	r30, 0xC2	; 194
    1580:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1582:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1586:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1588:	24 e0       	ldi	r18, 0x04	; 4
    158a:	ea 3c       	cpi	r30, 0xCA	; 202
    158c:	f2 07       	cpc	r31, r18
    158e:	c9 f7       	brne	.-14     	; 0x1582 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1590:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1594:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1598:	83 ff       	sbrs	r24, 3
    159a:	10 c0       	rjmp	.+32     	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    159c:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    15a0:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <USB_ControlRequest+0x1>
    15a4:	95 30       	cpi	r25, 0x05	; 5
    15a6:	09 f4       	brne	.+2      	; 0x15aa <USB_Device_ProcessControlRequest+0x42>
    15a8:	d2 c0       	rjmp	.+420    	; 0x174e <USB_Device_ProcessControlRequest+0x1e6>
    15aa:	00 f5       	brcc	.+64     	; 0x15ec <USB_Device_ProcessControlRequest+0x84>
    15ac:	91 30       	cpi	r25, 0x01	; 1
    15ae:	09 f4       	brne	.+2      	; 0x15b2 <USB_Device_ProcessControlRequest+0x4a>
    15b0:	88 c0       	rjmp	.+272    	; 0x16c2 <USB_Device_ProcessControlRequest+0x15a>
    15b2:	08 f4       	brcc	.+2      	; 0x15b6 <USB_Device_ProcessControlRequest+0x4e>
    15b4:	61 c0       	rjmp	.+194    	; 0x1678 <USB_Device_ProcessControlRequest+0x110>
    15b6:	93 30       	cpi	r25, 0x03	; 3
    15b8:	09 f4       	brne	.+2      	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
    15ba:	83 c0       	rjmp	.+262    	; 0x16c2 <USB_Device_ProcessControlRequest+0x15a>
    15bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    15c0:	83 ff       	sbrs	r24, 3
    15c2:	0a c0       	rjmp	.+20     	; 0x15d8 <USB_Device_ProcessControlRequest+0x70>
				UEINTX &= ~(1 << RXSTPI);
    15c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15c8:	87 7f       	andi	r24, 0xF7	; 247
    15ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    15ce:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    15d2:	80 62       	ori	r24, 0x20	; 32
    15d4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    15d8:	aa 96       	adiw	r28, 0x2a	; 42
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
    15ec:	98 30       	cpi	r25, 0x08	; 8
    15ee:	09 f4       	brne	.+2      	; 0x15f2 <USB_Device_ProcessControlRequest+0x8a>
    15f0:	e6 c0       	rjmp	.+460    	; 0x17be <USB_Device_ProcessControlRequest+0x256>
    15f2:	99 30       	cpi	r25, 0x09	; 9
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <USB_Device_ProcessControlRequest+0x90>
    15f6:	f0 c0       	rjmp	.+480    	; 0x17d8 <USB_Device_ProcessControlRequest+0x270>
    15f8:	96 30       	cpi	r25, 0x06	; 6
    15fa:	01 f7       	brne	.-64     	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    15fc:	80 58       	subi	r24, 0x80	; 128
    15fe:	82 30       	cpi	r24, 0x02	; 2
    1600:	e8 f6       	brcc	.-70     	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1602:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <USB_ControlRequest+0x2>
    1606:	90 91 c5 04 	lds	r25, 0x04C5	; 0x8004c5 <USB_ControlRequest+0x3>
    160a:	8c 3d       	cpi	r24, 0xDC	; 220
    160c:	23 e0       	ldi	r18, 0x03	; 3
    160e:	92 07       	cpc	r25, r18
    1610:	09 f0       	breq	.+2      	; 0x1614 <USB_Device_ProcessControlRequest+0xac>
    1612:	c1 c0       	rjmp	.+386    	; 0x1796 <USB_Device_ProcessControlRequest+0x22e>
	SignatureDescriptor.Header.Type = DTYPE_String;
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1618:	8a e2       	ldi	r24, 0x2A	; 42
    161a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    161c:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    161e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1620:	de 01       	movw	r26, r28
    1622:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1624:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1626:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1628:	51 e2       	ldi	r21, 0x21	; 33
    162a:	e3 2f       	mov	r30, r19
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1632:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1634:	20 ff       	sbrs	r18, 0
    1636:	03 c0       	rjmp	.+6      	; 0x163e <USB_Device_ProcessControlRequest+0xd6>
					{
						SerialByte >>= 4;
    1638:	e2 95       	swap	r30
    163a:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    163c:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    163e:	ef 70       	andi	r30, 0x0F	; 15
    1640:	8e 2f       	mov	r24, r30
    1642:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1644:	ea 30       	cpi	r30, 0x0A	; 10
    1646:	08 f4       	brcc	.+2      	; 0x164a <USB_Device_ProcessControlRequest+0xe2>
    1648:	a4 c0       	rjmp	.+328    	; 0x1792 <USB_Device_ProcessControlRequest+0x22a>
    164a:	c7 96       	adiw	r24, 0x37	; 55
    164c:	8d 93       	st	X+, r24
    164e:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1650:	2f 5f       	subi	r18, 0xFF	; 255
    1652:	24 31       	cpi	r18, 0x14	; 20
    1654:	51 f7       	brne	.-44     	; 0x162a <USB_Device_ProcessControlRequest+0xc2>
				SREG = GlobalIntState;
    1656:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    1658:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    165c:	87 7f       	andi	r24, 0xF7	; 247
    165e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1662:	6a e2       	ldi	r22, 0x2A	; 42
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	ce 01       	movw	r24, r28
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	da dc       	rcall	.-1612   	; 0x1020 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    166c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1670:	8b 77       	andi	r24, 0x7B	; 123
    1672:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1676:	a2 cf       	rjmp	.-188    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1678:	80 38       	cpi	r24, 0x80	; 128
    167a:	81 f0       	breq	.+32     	; 0x169c <USB_Device_ProcessControlRequest+0x134>
    167c:	82 38       	cpi	r24, 0x82	; 130
    167e:	09 f0       	breq	.+2      	; 0x1682 <USB_Device_ProcessControlRequest+0x11a>
    1680:	9d cf       	rjmp	.-198    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1682:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <USB_ControlRequest+0x4>
    1686:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1688:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    168c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1690:	85 fb       	bst	r24, 5
    1692:	88 27       	eor	r24, r24
    1694:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1696:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    169a:	06 c0       	rjmp	.+12     	; 0x16a8 <USB_Device_ProcessControlRequest+0x140>
	uint8_t CurrentStatus = 0;
    169c:	80 91 be 04 	lds	r24, 0x04BE	; 0x8004be <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    16a0:	90 91 bf 04 	lds	r25, 0x04BF	; 0x8004bf <USB_Device_RemoteWakeupEnabled>
    16a4:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    16a6:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    16a8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16ac:	97 7f       	andi	r25, 0xF7	; 247
    16ae:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    16b2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    16b6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16be:	8e 77       	andi	r24, 0x7E	; 126
    16c0:	2f c0       	rjmp	.+94     	; 0x1720 <USB_Device_ProcessControlRequest+0x1b8>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16c2:	28 2f       	mov	r18, r24
    16c4:	2d 7f       	andi	r18, 0xFD	; 253
    16c6:	09 f0       	breq	.+2      	; 0x16ca <USB_Device_ProcessControlRequest+0x162>
    16c8:	79 cf       	rjmp	.-270    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    16ca:	88 23       	and	r24, r24
    16cc:	d1 f0       	breq	.+52     	; 0x1702 <USB_Device_ProcessControlRequest+0x19a>
    16ce:	82 30       	cpi	r24, 0x02	; 2
    16d0:	09 f0       	breq	.+2      	; 0x16d4 <USB_Device_ProcessControlRequest+0x16c>
    16d2:	74 cf       	rjmp	.-280    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    16d4:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <USB_ControlRequest+0x2>
    16d8:	81 11       	cpse	r24, r1
    16da:	1d c0       	rjmp	.+58     	; 0x1716 <USB_Device_ProcessControlRequest+0x1ae>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    16dc:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <USB_ControlRequest+0x4>
    16e0:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <USB_Device_ProcessControlRequest+0x17e>
    16e4:	6b cf       	rjmp	.-298    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    16e6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    16ea:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    16ee:	20 ff       	sbrs	r18, 0
    16f0:	12 c0       	rjmp	.+36     	; 0x1716 <USB_Device_ProcessControlRequest+0x1ae>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    16f2:	93 30       	cpi	r25, 0x03	; 3
    16f4:	c9 f4       	brne	.+50     	; 0x1728 <USB_Device_ProcessControlRequest+0x1c0>
				UECONX |= (1 << STALLRQ);
    16f6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    16fa:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    16fc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1700:	0a c0       	rjmp	.+20     	; 0x1716 <USB_Device_ProcessControlRequest+0x1ae>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1702:	80 91 c4 04 	lds	r24, 0x04C4	; 0x8004c4 <USB_ControlRequest+0x2>
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	09 f0       	breq	.+2      	; 0x170c <USB_Device_ProcessControlRequest+0x1a4>
    170a:	58 cf       	rjmp	.-336    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    170c:	93 30       	cpi	r25, 0x03	; 3
    170e:	09 f0       	breq	.+2      	; 0x1712 <USB_Device_ProcessControlRequest+0x1aa>
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1716:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    171a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    171e:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1720:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1724:	6d dd       	rcall	.-1318   	; 0x1200 <Endpoint_ClearStatusStage>
    1726:	4a cf       	rjmp	.-364    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
				UECONX |= (1 << STALLRQC);
    1728:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    172c:	90 61       	ori	r25, 0x10	; 16
    172e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1732:	21 e0       	ldi	r18, 0x01	; 1
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	01 c0       	rjmp	.+2      	; 0x173a <USB_Device_ProcessControlRequest+0x1d2>
    1738:	22 0f       	add	r18, r18
    173a:	8a 95       	dec	r24
    173c:	ea f7       	brpl	.-6      	; 0x1738 <USB_Device_ProcessControlRequest+0x1d0>
    173e:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1742:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    1746:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    174a:	88 60       	ori	r24, 0x08	; 8
    174c:	d7 cf       	rjmp	.-82     	; 0x16fc <USB_Device_ProcessControlRequest+0x194>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    174e:	81 11       	cpse	r24, r1
    1750:	35 cf       	rjmp	.-406    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1752:	10 91 c4 04 	lds	r17, 0x04C4	; 0x8004c4 <USB_ControlRequest+0x2>
    1756:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1758:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    175c:	80 78       	andi	r24, 0x80	; 128
    175e:	81 2b       	or	r24, r17
    1760:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    1764:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1768:	87 7f       	andi	r24, 0xF7	; 247
    176a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    176e:	48 dd       	rcall	.-1392   	; 0x1200 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1770:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    1774:	80 ff       	sbrs	r24, 0
    1776:	fc cf       	rjmp	.-8      	; 0x1770 <USB_Device_ProcessControlRequest+0x208>
				UDADDR |= (1 << ADDEN);
    1778:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    177c:	80 68       	ori	r24, 0x80	; 128
    177e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1782:	11 11       	cpse	r17, r1
    1784:	04 c0       	rjmp	.+8      	; 0x178e <USB_Device_ProcessControlRequest+0x226>
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <USB_DeviceState>
    178c:	17 cf       	rjmp	.-466    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
    178e:	83 e0       	ldi	r24, 0x03	; 3
    1790:	fb cf       	rjmp	.-10     	; 0x1788 <USB_Device_ProcessControlRequest+0x220>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1792:	c0 96       	adiw	r24, 0x30	; 48
    1794:	5b cf       	rjmp	.-330    	; 0x164c <USB_Device_ProcessControlRequest+0xe4>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1796:	ae 01       	movw	r20, r28
    1798:	4f 5f       	subi	r20, 0xFF	; 255
    179a:	5f 4f       	sbci	r21, 0xFF	; 255
    179c:	60 91 c6 04 	lds	r22, 0x04C6	; 0x8004c6 <USB_ControlRequest+0x4>
    17a0:	0e 94 2d 02 	call	0x45a	; 0x45a <CALLBACK_USB_GetDescriptor>
    17a4:	bc 01       	movw	r22, r24
    17a6:	89 2b       	or	r24, r25
    17a8:	09 f4       	brne	.+2      	; 0x17ac <USB_Device_ProcessControlRequest+0x244>
    17aa:	08 cf       	rjmp	.-496    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    17ac:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17b0:	97 7f       	andi	r25, 0xF7	; 247
    17b2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ba:	8f dc       	rcall	.-1762   	; 0x10da <Endpoint_Write_Control_PStream_LE>
    17bc:	57 cf       	rjmp	.-338    	; 0x166c <USB_Device_ProcessControlRequest+0x104>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    17be:	80 38       	cpi	r24, 0x80	; 128
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <USB_Device_ProcessControlRequest+0x25c>
    17c2:	fc ce       	rjmp	.-520    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
    17c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17c8:	87 7f       	andi	r24, 0xF7	; 247
    17ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    17ce:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    17d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    17d6:	71 cf       	rjmp	.-286    	; 0x16ba <USB_Device_ProcessControlRequest+0x152>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    17d8:	81 11       	cpse	r24, r1
    17da:	f0 ce       	rjmp	.-544    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    17dc:	90 91 c4 04 	lds	r25, 0x04C4	; 0x8004c4 <USB_ControlRequest+0x2>
    17e0:	92 30       	cpi	r25, 0x02	; 2
    17e2:	08 f0       	brcs	.+2      	; 0x17e6 <USB_Device_ProcessControlRequest+0x27e>
    17e4:	eb ce       	rjmp	.-554    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    17e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17ea:	87 7f       	andi	r24, 0xF7	; 247
    17ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    17f0:	90 93 bd 04 	sts	0x04BD, r25	; 0x8004bd <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    17f4:	05 dd       	rcall	.-1526   	; 0x1200 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    17f6:	80 91 bd 04 	lds	r24, 0x04BD	; 0x8004bd <USB_Device_ConfigurationNumber>
    17fa:	88 23       	and	r24, r24
    17fc:	11 f0       	breq	.+4      	; 0x1802 <USB_Device_ProcessControlRequest+0x29a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    17fe:	84 e0       	ldi	r24, 0x04	; 4
    1800:	05 c0       	rjmp	.+10     	; 0x180c <USB_Device_ProcessControlRequest+0x2a4>
				return (UDADDR & (1 << ADDEN));
    1802:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1806:	87 fd       	sbrc	r24, 7
    1808:	fa cf       	rjmp	.-12     	; 0x17fe <USB_Device_ProcessControlRequest+0x296>
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	80 93 c1 04 	sts	0x04C1, r24	; 0x8004c1 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1810:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EVENT_USB_Device_ConfigurationChanged>
    1814:	d3 ce       	rjmp	.-602    	; 0x15bc <USB_Device_ProcessControlRequest+0x54>

00001816 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    1816:	08 95       	ret

00001818 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1818:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    181a:	80 91 c1 04 	lds	r24, 0x04C1	; 0x8004c1 <USB_DeviceState>
    181e:	88 23       	and	r24, r24
    1820:	91 f0       	breq	.+36     	; 0x1846 <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1822:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1826:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1828:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    182c:	80 fd       	sbrc	r24, 0
    182e:	0d c0       	rjmp	.+26     	; 0x184a <USB_USBTask+0x32>
    1830:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1832:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1834:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1838:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    183c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    183e:	94 de       	rcall	.-728    	; 0x1568 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1840:	cf 70       	andi	r28, 0x0F	; 15
    1842:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    1846:	cf 91       	pop	r28
    1848:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    184a:	80 e8       	ldi	r24, 0x80	; 128
    184c:	f2 cf       	rjmp	.-28     	; 0x1832 <USB_USBTask+0x1a>

0000184e <__ashrdi3>:
    184e:	97 fb       	bst	r25, 7
    1850:	10 f8       	bld	r1, 0

00001852 <__lshrdi3>:
    1852:	16 94       	lsr	r1
    1854:	00 08       	sbc	r0, r0
    1856:	0f 93       	push	r16
    1858:	08 30       	cpi	r16, 0x08	; 8
    185a:	98 f0       	brcs	.+38     	; 0x1882 <__lshrdi3+0x30>
    185c:	08 50       	subi	r16, 0x08	; 8
    185e:	23 2f       	mov	r18, r19
    1860:	34 2f       	mov	r19, r20
    1862:	45 2f       	mov	r20, r21
    1864:	56 2f       	mov	r21, r22
    1866:	67 2f       	mov	r22, r23
    1868:	78 2f       	mov	r23, r24
    186a:	89 2f       	mov	r24, r25
    186c:	90 2d       	mov	r25, r0
    186e:	f4 cf       	rjmp	.-24     	; 0x1858 <__lshrdi3+0x6>
    1870:	05 94       	asr	r0
    1872:	97 95       	ror	r25
    1874:	87 95       	ror	r24
    1876:	77 95       	ror	r23
    1878:	67 95       	ror	r22
    187a:	57 95       	ror	r21
    187c:	47 95       	ror	r20
    187e:	37 95       	ror	r19
    1880:	27 95       	ror	r18
    1882:	0a 95       	dec	r16
    1884:	aa f7       	brpl	.-22     	; 0x1870 <__lshrdi3+0x1e>
    1886:	0f 91       	pop	r16
    1888:	08 95       	ret

0000188a <__adddi3>:
    188a:	2a 0d       	add	r18, r10
    188c:	3b 1d       	adc	r19, r11
    188e:	4c 1d       	adc	r20, r12
    1890:	5d 1d       	adc	r21, r13
    1892:	6e 1d       	adc	r22, r14
    1894:	7f 1d       	adc	r23, r15
    1896:	80 1f       	adc	r24, r16
    1898:	91 1f       	adc	r25, r17
    189a:	08 95       	ret

0000189c <__adddi3_s8>:
    189c:	00 24       	eor	r0, r0
    189e:	a7 fd       	sbrc	r26, 7
    18a0:	00 94       	com	r0
    18a2:	2a 0f       	add	r18, r26
    18a4:	30 1d       	adc	r19, r0
    18a6:	40 1d       	adc	r20, r0
    18a8:	50 1d       	adc	r21, r0
    18aa:	60 1d       	adc	r22, r0
    18ac:	70 1d       	adc	r23, r0
    18ae:	80 1d       	adc	r24, r0
    18b0:	90 1d       	adc	r25, r0
    18b2:	08 95       	ret

000018b4 <__subdi3>:
    18b4:	2a 19       	sub	r18, r10
    18b6:	3b 09       	sbc	r19, r11
    18b8:	4c 09       	sbc	r20, r12
    18ba:	5d 09       	sbc	r21, r13
    18bc:	6e 09       	sbc	r22, r14
    18be:	7f 09       	sbc	r23, r15
    18c0:	80 0b       	sbc	r24, r16
    18c2:	91 0b       	sbc	r25, r17
    18c4:	08 95       	ret

000018c6 <__cmpdi2>:
    18c6:	2a 15       	cp	r18, r10
    18c8:	3b 05       	cpc	r19, r11
    18ca:	4c 05       	cpc	r20, r12
    18cc:	5d 05       	cpc	r21, r13
    18ce:	6e 05       	cpc	r22, r14
    18d0:	7f 05       	cpc	r23, r15
    18d2:	80 07       	cpc	r24, r16
    18d4:	91 07       	cpc	r25, r17
    18d6:	08 95       	ret

000018d8 <memcpy>:
    18d8:	fb 01       	movw	r30, r22
    18da:	dc 01       	movw	r26, r24
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <memcpy+0xa>
    18de:	01 90       	ld	r0, Z+
    18e0:	0d 92       	st	X+, r0
    18e2:	41 50       	subi	r20, 0x01	; 1
    18e4:	50 40       	sbci	r21, 0x00	; 0
    18e6:	d8 f7       	brcc	.-10     	; 0x18de <memcpy+0x6>
    18e8:	08 95       	ret

000018ea <_exit>:
    18ea:	f8 94       	cli

000018ec <__stop_program>:
    18ec:	ff cf       	rjmp	.-2      	; 0x18ec <__stop_program>
