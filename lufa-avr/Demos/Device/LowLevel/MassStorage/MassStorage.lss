
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015c  00800100  0000121c  000012b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000121c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  0080025c  0080025c  0000140c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000140c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b08  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002120  00000000  00000000  00008220  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000363f  00000000  00000000  0000a340  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ec  00000000  00000000  0000d980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002517  00000000  00000000  0000e16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000394c  00000000  00000000  00010683  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000638  00000000  00000000  00013fcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8d c0       	rjmp	.+282    	; 0x11c <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	7f c6       	rjmp	.+3326   	; 0xd28 <__vector_10>
      2a:	00 00       	nop
      2c:	49 c7       	rjmp	.+3730   	; 0xec0 <__vector_11>
      2e:	00 00       	nop
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop
      98:	5d c0       	rjmp	.+186    	; 0x154 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5b c0       	rjmp	.+182    	; 0x154 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	59 c0       	rjmp	.+178    	; 0x154 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	57 c0       	rjmp	.+174    	; 0x154 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	55 c0       	rjmp	.+170    	; 0x154 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	2c 03 53 00 70 00 75 00 72 00 20 00 4d 00 75 00     ,.S.p.u.r. .M.u.
      bc:	6c 00 74 00 69 00 62 00 6f 00 6f 00 74 00 20 00     l.t.i.b.o.o.t. .
      cc:	44 00 65 00 76 00 69 00 63 00 65 00 00 00           D.e.v.i.c.e...

000000da <ManufacturerString>:
      da:	0a 03 53 00 70 00 75 00 72 00 00 00                 ..S.p.u.r...

000000e6 <LanguageString>:
      e6:	04 03 09 04                                         ....

000000ea <ConfigurationDescriptor>:
      ea:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      fa:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

0000010a <DeviceDescriptor>:
     10a:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     11a:	dc 01                                               ..

0000011c <__ctors_end>:
     11c:	11 24       	eor	r1, r1
     11e:	1f be       	out	0x3f, r1	; 63
     120:	cf ef       	ldi	r28, 0xFF	; 255
     122:	da e0       	ldi	r29, 0x0A	; 10
     124:	de bf       	out	0x3e, r29	; 62
     126:	cd bf       	out	0x3d, r28	; 61

00000128 <__do_copy_data>:
     128:	12 e0       	ldi	r17, 0x02	; 2
     12a:	a0 e0       	ldi	r26, 0x00	; 0
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	ec e1       	ldi	r30, 0x1C	; 28
     130:	f2 e1       	ldi	r31, 0x12	; 18
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x10>
     134:	05 90       	lpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	ac 35       	cpi	r26, 0x5C	; 92
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0xc>

0000013e <__do_clear_bss>:
     13e:	22 e0       	ldi	r18, 0x02	; 2
     140:	ac e5       	ldi	r26, 0x5C	; 92
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a9 38       	cpi	r26, 0x89	; 137
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	70 d1       	rcall	.+736    	; 0x430 <main>
     150:	0c 94 0c 09 	jmp	0x1218	; 0x1218 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <LEDs_SetAllLEDs>:
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
     156:	25 b1       	in	r18, 0x05	; 5
     158:	98 2f       	mov	r25, r24
     15a:	91 70       	andi	r25, 0x01	; 1
     15c:	90 95       	com	r25
     15e:	21 60       	ori	r18, 0x01	; 1
     160:	92 23       	and	r25, r18
     162:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
     164:	2b b1       	in	r18, 0x0b	; 11
     166:	98 2f       	mov	r25, r24
     168:	90 72       	andi	r25, 0x20	; 32
     16a:	90 95       	com	r25
     16c:	20 62       	ori	r18, 0x20	; 32
     16e:	92 23       	and	r25, r18
     170:	9b b9       	out	0x0b, r25	; 11
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
     172:	98 b1       	in	r25, 0x08	; 8
     174:	9f 77       	andi	r25, 0x7F	; 127
     176:	80 78       	andi	r24, 0x80	; 128
     178:	89 2b       	or	r24, r25
     17a:	88 b9       	out	0x08, r24	; 8
     17c:	08 95       	ret

0000017e <SetupHardware>:

void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     17e:	84 b7       	in	r24, 0x34	; 52
     180:	87 7f       	andi	r24, 0xF7	; 247
     182:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	a8 95       	wdr
     18a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     18e:	88 61       	ori	r24, 0x18	; 24
     190:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     194:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     198:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	80 e8       	ldi	r24, 0x80	; 128
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1aa:	0f be       	out	0x3f, r0	; 63
				DDRB  |=  LEDS_PORTB_LEDS;
     1ac:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     1ae:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     1b0:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     1b2:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     1b4:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     1b6:	47 98       	cbi	0x08, 7	; 8
#endif

	/* Hardware Initialization */
	LEDs_Init();
	//Dataflash_Init();
	USB_Init();
     1b8:	9a c5       	rjmp	.+2868   	; 0xcee <USB_Init>

000001ba <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1ba:	80 ea       	ldi	r24, 0xA0	; 160
     1bc:	cc df       	rcall	.-104    	; 0x156 <LEDs_SetAllLEDs>

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     1be:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <__data_end>
     1c2:	08 95       	ret

000001c4 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	c7 cf       	rjmp	.-114    	; 0x156 <LEDs_SetAllLEDs>

000001c8 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     1c8:	cf 93       	push	r28
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     1ca:	42 e3       	ldi	r20, 0x32	; 50
     1cc:	61 e8       	ldi	r22, 0x81	; 129
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	cb d4       	rcall	.+2454   	; 0xb68 <Endpoint_ConfigureEndpoint_Prv>
     1d2:	c8 2f       	mov	r28, r24
     1d4:	42 e3       	ldi	r20, 0x32	; 50
     1d6:	60 e8       	ldi	r22, 0x80	; 128
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	c6 d4       	rcall	.+2444   	; 0xb68 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1dc:	88 23       	and	r24, r24
     1de:	11 f0       	breq	.+4      	; 0x1e4 <EVENT_USB_Device_ConfigurationChanged+0x1c>
     1e0:	c1 11       	cpse	r28, r1
     1e2:	03 c0       	rjmp	.+6      	; 0x1ea <EVENT_USB_Device_ConfigurationChanged+0x22>
     1e4:	81 e8       	ldi	r24, 0x81	; 129
}
     1e6:	cf 91       	pop	r28
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1e8:	b6 cf       	rjmp	.-148    	; 0x156 <LEDs_SetAllLEDs>
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	fc cf       	rjmp	.-8      	; 0x1e6 <EVENT_USB_Device_ConfigurationChanged+0x1e>

000001ee <EVENT_USB_Device_ControlRequest>:
	serialWrite(' ');
	serialWrite('\n');
	serialWrite('\r');*/

	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     1ee:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <USB_ControlRequest+0x1>
     1f2:	8e 3f       	cpi	r24, 0xFE	; 254
     1f4:	81 f0       	breq	.+32     	; 0x216 <EVENT_USB_Device_ControlRequest+0x28>
     1f6:	8f 3f       	cpi	r24, 0xFF	; 255
     1f8:	f9 f4       	brne	.+62     	; 0x238 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     1fa:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <USB_ControlRequest>
     1fe:	81 32       	cpi	r24, 0x21	; 33
     200:	d9 f4       	brne	.+54     	; 0x238 <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     202:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     206:	87 7f       	andi	r24, 0xF7	; 247
     208:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     20c:	e2 d4       	rcall	.+2500   	; 0xbd2 <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <__data_end>
     214:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     216:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <USB_ControlRequest>
     21a:	81 3a       	cpi	r24, 0xA1	; 161
     21c:	69 f4       	brne	.+26     	; 0x238 <EVENT_USB_Device_ControlRequest+0x4a>
     21e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     222:	87 7f       	andi	r24, 0xF7	; 247
     224:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     228:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     22c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     230:	8e 77       	andi	r24, 0x7E	; 126
     232:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     236:	cd c4       	rjmp	.+2458   	; 0xbd2 <Endpoint_ClearStatusStage>
     238:	08 95       	ret

0000023a <MassStorage_Task>:

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	00 d0       	rcall	.+0      	; 0x240 <MassStorage_Task+0x6>
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     244:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <USB_DeviceState>
     248:	84 30       	cpi	r24, 0x04	; 4
     24a:	09 f0       	breq	.+2      	; 0x24e <MassStorage_Task+0x14>
     24c:	69 c0       	rjmp	.+210    	; 0x320 <MassStorage_Task+0xe6>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     24e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     252:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     256:	82 ff       	sbrs	r24, 2
     258:	39 c0       	rjmp	.+114    	; 0x2cc <MassStorage_Task+0x92>
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
     25a:	1a 82       	std	Y+2, r1	; 0x02
     25c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     25e:	ae 01       	movw	r20, r28
     260:	4f 5f       	subi	r20, 0xFF	; 255
     262:	5f 4f       	sbci	r21, 0xFF	; 255
     264:	6f e0       	ldi	r22, 0x0F	; 15
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	8d e5       	ldi	r24, 0x5D	; 93
     26a:	92 e0       	ldi	r25, 0x02	; 2
     26c:	75 d3       	rcall	.+1770   	; 0x958 <Endpoint_Read_Stream_LE>
     26e:	85 30       	cpi	r24, 0x05	; 5
     270:	49 f1       	breq	.+82     	; 0x2c4 <MassStorage_Task+0x8a>
		if (IsMassStoreReset)
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     272:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <CommandBlock>
     276:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <CommandBlock+0x1>
     27a:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <CommandBlock+0x2>
     27e:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <CommandBlock+0x3>
     282:	85 35       	cpi	r24, 0x55	; 85
     284:	93 45       	sbci	r25, 0x53	; 83
     286:	a2 44       	sbci	r26, 0x42	; 66
     288:	b3 44       	sbci	r27, 0x43	; 67
     28a:	71 f4       	brne	.+28     	; 0x2a8 <MassStorage_Task+0x6e>
     28c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <CommandBlock+0xd>
     290:	81 11       	cpse	r24, r1
     292:	0a c0       	rjmp	.+20     	; 0x2a8 <MassStorage_Task+0x6e>
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
     294:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <CommandBlock+0xc>
     298:	8f 71       	andi	r24, 0x1F	; 31
     29a:	31 f4       	brne	.+12     	; 0x2a8 <MassStorage_Task+0x6e>
		(CommandBlock.Flags              & 0x1F)             ||
     29c:	80 91 6b 02 	lds	r24, 0x026B	; 0x80026b <CommandBlock+0xe>
     2a0:	81 50       	subi	r24, 0x01	; 1
     2a2:	80 31       	cpi	r24, 0x10	; 16
     2a4:	08 f4       	brcc	.+2      	; 0x2a8 <MassStorage_Task+0x6e>
     2a6:	41 c0       	rjmp	.+130    	; 0x32a <MassStorage_Task+0xf0>
				UECONX |= (1 << STALLRQ);
     2a8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2ac:	80 62       	ori	r24, 0x20	; 32
     2ae:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQ);
     2b8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2bc:	80 62       	ori	r24, 0x20	; 32
     2be:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     2c4:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     2c8:	88 23       	and	r24, r24
     2ca:	49 f2       	breq	.-110    	; 0x25e <MassStorage_Task+0x24>
	if (IsMassStoreReset)
     2cc:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     2d0:	88 23       	and	r24, r24
     2d2:	31 f1       	breq	.+76     	; 0x320 <MassStorage_Task+0xe6>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2d4:	80 e1       	ldi	r24, 0x10	; 16
     2d6:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     2da:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2de:	88 e0       	ldi	r24, 0x08	; 8
     2e0:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     2e4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2e8:	84 e0       	ldi	r24, 0x04	; 4
     2ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     2ee:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2f2:	80 61       	ori	r24, 0x10	; 16
     2f4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     2f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2fc:	88 60       	ori	r24, 0x08	; 8
     2fe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     302:	83 e0       	ldi	r24, 0x03	; 3
     304:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     308:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     30c:	80 61       	ori	r24, 0x10	; 16
     30e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     312:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     316:	88 60       	ori	r24, 0x08	; 8
     318:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		IsMassStoreReset = false;
     31c:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <__data_end>
}
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret
	}

	//serialWriteArray(msg, 21);

	/* Read in command block command data */
	BytesTransferred = 0;
     32a:	1a 82       	std	Y+2, r1	; 0x02
     32c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     32e:	60 91 6b 02 	lds	r22, 0x026B	; 0x80026b <CommandBlock+0xe>
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	ae 01       	movw	r20, r28
     336:	4f 5f       	subi	r20, 0xFF	; 255
     338:	5f 4f       	sbci	r21, 0xFF	; 255
     33a:	8c e6       	ldi	r24, 0x6C	; 108
     33c:	92 e0       	ldi	r25, 0x02	; 2
     33e:	0c d3       	rcall	.+1560   	; 0x958 <Endpoint_Read_Stream_LE>
     340:	85 30       	cpi	r24, 0x05	; 5
     342:	09 f4       	brne	.+2      	; 0x346 <MassStorage_Task+0x10c>
     344:	5e c0       	rjmp	.+188    	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     346:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     34a:	8b 77       	andi	r24, 0x7B	; 123
     34c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     350:	80 e2       	ldi	r24, 0x20	; 32
     352:	01 df       	rcall	.-510    	; 0x156 <LEDs_SetAllLEDs>
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     354:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <CommandBlock+0xc>
     358:	87 ff       	sbrs	r24, 7
     35a:	03 c0       	rjmp	.+6      	; 0x362 <MassStorage_Task+0x128>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     362:	f4 d0       	rcall	.+488    	; 0x54c <SCSI_DecodeSCSICommand>
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	89 27       	eor	r24, r25
     368:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <CommandStatus+0xc>
		CommandStatus.Tag = CommandBlock.Tag;
     36c:	40 91 61 02 	lds	r20, 0x0261	; 0x800261 <CommandBlock+0x4>
     370:	50 91 62 02 	lds	r21, 0x0262	; 0x800262 <CommandBlock+0x5>
     374:	60 91 63 02 	lds	r22, 0x0263	; 0x800263 <CommandBlock+0x6>
     378:	70 91 64 02 	lds	r23, 0x0264	; 0x800264 <CommandBlock+0x7>
     37c:	40 93 2c 01 	sts	0x012C, r20	; 0x80012c <CommandStatus+0x4>
     380:	50 93 2d 01 	sts	0x012D, r21	; 0x80012d <CommandStatus+0x5>
     384:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <CommandStatus+0x6>
     388:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <CommandStatus+0x7>
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     38c:	40 91 65 02 	lds	r20, 0x0265	; 0x800265 <CommandBlock+0x8>
     390:	50 91 66 02 	lds	r21, 0x0266	; 0x800266 <CommandBlock+0x9>
     394:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <CommandBlock+0xa>
     398:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <CommandBlock+0xb>
     39c:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <CommandStatus+0x8>
     3a0:	50 93 31 01 	sts	0x0131, r21	; 0x800131 <CommandStatus+0x9>
     3a4:	60 93 32 01 	sts	0x0132, r22	; 0x800132 <CommandStatus+0xa>
     3a8:	70 93 33 01 	sts	0x0133, r23	; 0x800133 <CommandStatus+0xb>
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     3ac:	88 23       	and	r24, r24
     3ae:	49 f0       	breq	.+18     	; 0x3c2 <MassStorage_Task+0x188>
     3b0:	45 2b       	or	r20, r21
     3b2:	46 2b       	or	r20, r22
     3b4:	47 2b       	or	r20, r23
     3b6:	29 f0       	breq	.+10     	; 0x3c2 <MassStorage_Task+0x188>
				UECONX |= (1 << STALLRQ);
     3b8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     3bc:	80 62       	ori	r24, 0x20	; 32
     3be:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3c2:	84 e0       	ldi	r24, 0x04	; 4
     3c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3c8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3cc:	85 fd       	sbrc	r24, 5
     3ce:	1f c0       	rjmp	.+62     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3d6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3da:	85 fd       	sbrc	r24, 5
     3dc:	1f c0       	rjmp	.+62     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
     3de:	1a 82       	std	Y+2, r1	; 0x02
     3e0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     3e2:	ae 01       	movw	r20, r28
     3e4:	4f 5f       	subi	r20, 0xFF	; 255
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	6d e0       	ldi	r22, 0x0D	; 13
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	88 e2       	ldi	r24, 0x28	; 40
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	66 d2       	rcall	.+1228   	; 0x8be <Endpoint_Write_Stream_LE>
     3f2:	85 30       	cpi	r24, 0x05	; 5
     3f4:	c1 f0       	breq	.+48     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3fa:	8e 77       	andi	r24, 0x7E	; 126
     3fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     400:	0a c0       	rjmp	.+20     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
		if (IsMassStoreReset)
     402:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     406:	88 23       	and	r24, r24
     408:	09 f4       	brne	.+2      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
     40a:	91 cf       	rjmp	.-222    	; 0x32e <MassStorage_Task+0xf4>
     40c:	5f cf       	rjmp	.-322    	; 0x2cc <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     40e:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     412:	88 23       	and	r24, r24
     414:	c9 f2       	breq	.-78     	; 0x3c8 <MassStorage_Task+0x18e>
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     416:	80 e2       	ldi	r24, 0x20	; 32
     418:	9e de       	rcall	.-708    	; 0x156 <LEDs_SetAllLEDs>
     41a:	58 cf       	rjmp	.-336    	; 0x2cc <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     41c:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     420:	88 23       	and	r24, r24
     422:	c9 f2       	breq	.-78     	; 0x3d6 <MassStorage_Task+0x19c>
     424:	f8 cf       	rjmp	.-16     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     426:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     42a:	88 23       	and	r24, r24
     42c:	d1 f2       	breq	.-76     	; 0x3e2 <MassStorage_Task+0x1a8>
     42e:	f3 cf       	rjmp	.-26     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>

00000430 <main>:
	serialBegin();
     430:	37 d0       	rcall	.+110    	; 0x4a0 <serialBegin>
	SetupHardware();
     432:	a5 de       	rcall	.-694    	; 0x17e <SetupHardware>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	8f de       	rcall	.-738    	; 0x156 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     438:	78 94       	sei
		MassStorage_Task();
     43a:	ff de       	rcall	.-514    	; 0x23a <MassStorage_Task>
		USB_USBTask();
     43c:	d2 d6       	rcall	.+3492   	; 0x11e2 <USB_USBTask>
     43e:	fd cf       	rjmp	.-6      	; 0x43a <main+0xa>

00000440 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     440:	29 2f       	mov	r18, r25
     442:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     444:	22 30       	cpi	r18, 0x02	; 2
     446:	31 05       	cpc	r19, r1
     448:	71 f0       	breq	.+28     	; 0x466 <CALLBACK_USB_GetDescriptor+0x26>
     44a:	23 30       	cpi	r18, 0x03	; 3
     44c:	31 05       	cpc	r19, r1
     44e:	81 f0       	breq	.+32     	; 0x470 <CALLBACK_USB_GetDescriptor+0x30>
     450:	21 30       	cpi	r18, 0x01	; 1
     452:	31 05       	cpc	r19, r1
     454:	a1 f4       	brne	.+40     	; 0x47e <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     456:	82 e1       	ldi	r24, 0x12	; 18
     458:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     45a:	2a e0       	ldi	r18, 0x0A	; 10
     45c:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     45e:	fa 01       	movw	r30, r20
     460:	31 83       	std	Z+1, r19	; 0x01
     462:	20 83       	st	Z, r18
	return Size;
}
     464:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
     466:	80 e2       	ldi	r24, 0x20	; 32
     468:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     46a:	2a ee       	ldi	r18, 0xEA	; 234
     46c:	30 e0       	ldi	r19, 0x00	; 0
			break;
     46e:	f7 cf       	rjmp	.-18     	; 0x45e <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
     470:	99 27       	eor	r25, r25
     472:	81 30       	cpi	r24, 0x01	; 1
     474:	91 05       	cpc	r25, r1
     476:	71 f0       	breq	.+28     	; 0x494 <CALLBACK_USB_GetDescriptor+0x54>
     478:	38 f0       	brcs	.+14     	; 0x488 <CALLBACK_USB_GetDescriptor+0x48>
     47a:	02 97       	sbiw	r24, 0x02	; 2
     47c:	71 f0       	breq	.+28     	; 0x49a <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
	const void* Address = NULL;
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e0       	ldi	r19, 0x00	; 0
     486:	eb cf       	rjmp	.-42     	; 0x45e <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     488:	e6 ee       	ldi	r30, 0xE6	; 230
     48a:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     48c:	84 91       	lpm	r24, Z
     48e:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     490:	9f 01       	movw	r18, r30
					break;
     492:	e5 cf       	rjmp	.-54     	; 0x45e <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     494:	ea ed       	ldi	r30, 0xDA	; 218
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	f9 cf       	rjmp	.-14     	; 0x48c <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     49a:	ec ea       	ldi	r30, 0xAC	; 172
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	f6 cf       	rjmp	.-20     	; 0x48c <CALLBACK_USB_GetDescriptor+0x4c>

000004a0 <serialBegin>:

// initialize the hardware uart: 57600 baud, 8 bits, no parity, 2 stop bits
void serialBegin()
{
	const unsigned int baud = 57600;
	UBRR1 = (F_CPU / 4 / baud - 1) / 2;
     4a0:	82 e2       	ldi	r24, 0x22	; 34
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     4a8:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1A = (1<<U2X1);		// set double transmission speed
     4ac:	82 e0       	ldi	r24, 0x02	; 2
     4ae:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
     4b2:	88 e9       	ldi	r24, 0x98	; 152
     4b4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);
     4b8:	8e e0       	ldi	r24, 0x0E	; 14
     4ba:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     4be:	08 95       	ret

000004c0 <serialWrite>:

// output a single byte to uart
void serialWrite( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
     4c0:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     4c4:	95 ff       	sbrs	r25, 5
     4c6:	fc cf       	rjmp	.-8      	; 0x4c0 <serialWrite>
	;
	/* Put data into buffer, sends the data */
	UDR1 = (uint8_t)data;
     4c8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     4cc:	08 95       	ret

000004ce <serialWriteArray>:
}

// output a string to uart
void serialWriteArray( unsigned char data[], unsigned int len)
{
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	ec 01       	movw	r28, r24
     4d8:	8c 01       	movw	r16, r24
     4da:	06 0f       	add	r16, r22
     4dc:	17 1f       	adc	r17, r23
	for(int i = 0; i < len; i++)
     4de:	c0 17       	cp	r28, r16
     4e0:	d1 07       	cpc	r29, r17
     4e2:	29 f4       	brne	.+10     	; 0x4ee <serialWriteArray+0x20>
	{
		serialWrite(*(data + i));
	}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	08 95       	ret
		serialWrite(*(data + i));
     4ee:	89 91       	ld	r24, Y+
     4f0:	e7 df       	rcall	.-50     	; 0x4c0 <serialWrite>
     4f2:	f5 cf       	rjmp	.-22     	; 0x4de <serialWriteArray+0x10>

000004f4 <readData>:
#include "data.h"

void readData(const uint32_t BlockAddress, uint16_t TotalBlocks)
{
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	ea 01       	movw	r28, r20
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     4fc:	89 d3       	rcall	.+1810   	; 0xc10 <Endpoint_WaitUntilReady>
     4fe:	88 23       	and	r24, r24
     500:	81 f0       	breq	.+32     	; 0x522 <readData+0x2e>
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	08 95       	ret
     50a:	10 e2       	ldi	r17, 0x20	; 32
				return ((UEINTX & (1 << RWAL)) ? true : false);
     50c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (!(Endpoint_IsReadWriteAllowed()))
     510:	85 ff       	sbrs	r24, 5
     512:	13 c0       	rjmp	.+38     	; 0x53a <readData+0x46>
			if (IsMassStoreReset)
     514:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     518:	81 11       	cpse	r24, r1
     51a:	f3 cf       	rjmp	.-26     	; 0x502 <readData+0xe>
     51c:	11 50       	subi	r17, 0x01	; 1
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     51e:	b1 f7       	brne	.-20     	; 0x50c <readData+0x18>
		TotalBlocks--;
     520:	21 97       	sbiw	r28, 0x01	; 1
	while (TotalBlocks)
     522:	20 97       	sbiw	r28, 0x00	; 0
     524:	91 f7       	brne	.-28     	; 0x50a <readData+0x16>
     526:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsReadWriteAllowed()))
     52a:	85 fd       	sbrc	r24, 5
     52c:	ea cf       	rjmp	.-44     	; 0x502 <readData+0xe>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     52e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     532:	8e 77       	andi	r24, 0x7E	; 126
     534:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     538:	e4 cf       	rjmp	.-56     	; 0x502 <readData+0xe>
     53a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     53e:	8e 77       	andi	r24, 0x7E	; 126
     540:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				if (Endpoint_WaitUntilReady())
     544:	65 d3       	rcall	.+1738   	; 0xc10 <Endpoint_WaitUntilReady>
     546:	88 23       	and	r24, r24
     548:	29 f3       	breq	.-54     	; 0x514 <readData+0x20>
     54a:	db cf       	rjmp	.-74     	; 0x502 <readData+0xe>

0000054c <SCSI_DecodeSCSICommand>:
 *  a command failure due to a ILLEGAL REQUEST.
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(void)
{
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     554:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <CommandBlock+0xf>
     558:	8d 31       	cpi	r24, 0x1D	; 29
     55a:	09 f4       	brne	.+2      	; 0x55e <SCSI_DecodeSCSICommand+0x12>
     55c:	e3 c0       	rjmp	.+454    	; 0x724 <SCSI_DecodeSCSICommand+0x1d8>
     55e:	e0 f4       	brcc	.+56     	; 0x598 <SCSI_DecodeSCSICommand+0x4c>
     560:	82 31       	cpi	r24, 0x12	; 18
     562:	09 f4       	brne	.+2      	; 0x566 <SCSI_DecodeSCSICommand+0x1a>
     564:	59 c0       	rjmp	.+178    	; 0x618 <SCSI_DecodeSCSICommand+0xcc>
     566:	70 f4       	brcc	.+28     	; 0x584 <SCSI_DecodeSCSICommand+0x38>
     568:	88 23       	and	r24, r24
     56a:	09 f4       	brne	.+2      	; 0x56e <SCSI_DecodeSCSICommand+0x22>
     56c:	5b c1       	rjmp	.+694    	; 0x824 <SCSI_DecodeSCSICommand+0x2d8>
     56e:	83 30       	cpi	r24, 0x03	; 3
     570:	09 f4       	brne	.+2      	; 0x574 <SCSI_DecodeSCSICommand+0x28>
     572:	ac c0       	rjmp	.+344    	; 0x6cc <SCSI_DecodeSCSICommand+0x180>
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     574:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <SenseData+0x2>
     578:	80 7f       	andi	r24, 0xF0	; 240
     57a:	85 60       	ori	r24, 0x05	; 5
     57c:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <SenseData+0x2>
     580:	80 e2       	ldi	r24, 0x20	; 32
     582:	64 c0       	rjmp	.+200    	; 0x64c <SCSI_DecodeSCSICommand+0x100>
	switch (CommandBlock.SCSICommandData[0])
     584:	8a 31       	cpi	r24, 0x1A	; 26
     586:	09 f4       	brne	.+2      	; 0x58a <SCSI_DecodeSCSICommand+0x3e>
     588:	2e c1       	rjmp	.+604    	; 0x7e6 <SCSI_DecodeSCSICommand+0x29a>
     58a:	8b 31       	cpi	r24, 0x1B	; 27
     58c:	99 f7       	brne	.-26     	; 0x574 <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(startstopmsg, 20);
     58e:	64 e1       	ldi	r22, 0x14	; 20
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	8a e9       	ldi	r24, 0x9A	; 154
     594:	91 e0       	ldi	r25, 0x01	; 1
     596:	ca c0       	rjmp	.+404    	; 0x72c <SCSI_DecodeSCSICommand+0x1e0>
	switch (CommandBlock.SCSICommandData[0])
     598:	88 32       	cpi	r24, 0x28	; 40
     59a:	09 f4       	brne	.+2      	; 0x59e <SCSI_DecodeSCSICommand+0x52>
     59c:	de c0       	rjmp	.+444    	; 0x75a <SCSI_DecodeSCSICommand+0x20e>
     59e:	88 f5       	brcc	.+98     	; 0x602 <SCSI_DecodeSCSICommand+0xb6>
     5a0:	8e 31       	cpi	r24, 0x1E	; 30
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <SCSI_DecodeSCSICommand+0x5a>
     5a4:	44 c1       	rjmp	.+648    	; 0x82e <SCSI_DecodeSCSICommand+0x2e2>
     5a6:	85 32       	cpi	r24, 0x25	; 37
     5a8:	29 f7       	brne	.-54     	; 0x574 <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(readcapacitymsg, 23);
     5aa:	67 e1       	ldi	r22, 0x17	; 23
     5ac:	70 e0       	ldi	r23, 0x00	; 0
     5ae:	88 ef       	ldi	r24, 0xF8	; 248
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	8d df       	rcall	.-230    	; 0x4ce <serialWriteArray>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     5b4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     5b8:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     5bc:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     5c0:	8a e0       	ldi	r24, 0x0A	; 10
     5c2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
     5c6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     5ca:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     5d4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	/* Send the logical block size of the device (must be 512 bytes) */
	//Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);
	Endpoint_Write_32_BE(1024);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     5d8:	80 91 5c 02 	lds	r24, 0x025C	; 0x80025c <__data_end>
     5dc:	81 11       	cpse	r24, r1
     5de:	3a c0       	rjmp	.+116    	; 0x654 <SCSI_DecodeSCSICommand+0x108>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5e4:	8e 77       	andi	r24, 0x7E	; 126
     5e6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     5ea:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <CommandBlock+0x8>
     5ee:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <CommandBlock+0x9>
     5f2:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <CommandBlock+0xa>
     5f6:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <CommandBlock+0xb>
     5fa:	08 97       	sbiw	r24, 0x08	; 8
     5fc:	a1 09       	sbc	r26, r1
     5fe:	b1 09       	sbc	r27, r1
     600:	52 c0       	rjmp	.+164    	; 0x6a6 <SCSI_DecodeSCSICommand+0x15a>
	switch (CommandBlock.SCSICommandData[0])
     602:	8a 32       	cpi	r24, 0x2A	; 42
     604:	09 f4       	brne	.+2      	; 0x608 <SCSI_DecodeSCSICommand+0xbc>
     606:	9c c0       	rjmp	.+312    	; 0x740 <SCSI_DecodeSCSICommand+0x1f4>
     608:	8f 32       	cpi	r24, 0x2F	; 47
     60a:	09 f0       	breq	.+2      	; 0x60e <SCSI_DecodeSCSICommand+0xc2>
     60c:	b3 cf       	rjmp	.-154    	; 0x574 <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(verifymsg, 16);
     60e:	60 e1       	ldi	r22, 0x10	; 16
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	88 e5       	ldi	r24, 0x58	; 88
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	8a c0       	rjmp	.+276    	; 0x72c <SCSI_DecodeSCSICommand+0x1e0>
			serialWriteArray(inquirymsg, 17);
     618:	61 e1       	ldi	r22, 0x11	; 17
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	86 e2       	ldi	r24, 0x26	; 38
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	56 df       	rcall	.-340    	; 0x4ce <serialWriteArray>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     622:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <CommandBlock+0x13>
     626:	c2 2f       	mov	r28, r18
     628:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <CommandBlock+0x12>
     62c:	d8 2f       	mov	r29, r24
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     62e:	80 91 6d 02 	lds	r24, 0x026D	; 0x80026d <CommandBlock+0x10>
     632:	83 70       	andi	r24, 0x03	; 3
     634:	21 f4       	brne	.+8      	; 0x63e <SCSI_DecodeSCSICommand+0xf2>
     636:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <CommandBlock+0x11>
     63a:	88 23       	and	r24, r24
     63c:	89 f0       	breq	.+34     	; 0x660 <SCSI_DecodeSCSICommand+0x114>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     63e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <SenseData+0x2>
     642:	80 7f       	andi	r24, 0xF0	; 240
     644:	85 60       	ori	r24, 0x05	; 5
     646:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <SenseData+0x2>
     64a:	84 e2       	ldi	r24, 0x24	; 36
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     64c:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <SenseData+0xc>
     650:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <SenseData+0xd>
	return false;
     654:	80 e0       	ldi	r24, 0x00	; 0
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     660:	8e 01       	movw	r16, r28
     662:	c5 32       	cpi	r28, 0x25	; 37
     664:	d1 05       	cpc	r29, r1
     666:	10 f0       	brcs	.+4      	; 0x66c <SCSI_DecodeSCSICommand+0x120>
     668:	04 e2       	ldi	r16, 0x24	; 36
     66a:	10 e0       	ldi	r17, 0x00	; 0
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	b8 01       	movw	r22, r16
     672:	87 e3       	ldi	r24, 0x37	; 55
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	23 d1       	rcall	.+582    	; 0x8be <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	ce 01       	movw	r24, r28
     67e:	80 1b       	sub	r24, r16
     680:	91 0b       	sbc	r25, r17
     682:	da d0       	rcall	.+436    	; 0x838 <Endpoint_Null_Stream>
     684:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     688:	8e 77       	andi	r24, 0x7E	; 126
     68a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     68e:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <CommandBlock+0x8>
     692:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <CommandBlock+0x9>
     696:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <CommandBlock+0xa>
     69a:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <CommandBlock+0xb>
     69e:	80 1b       	sub	r24, r16
     6a0:	91 0b       	sbc	r25, r17
     6a2:	a1 09       	sbc	r26, r1
     6a4:	b1 09       	sbc	r27, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     6a6:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <CommandBlock+0x8>
     6aa:	90 93 66 02 	sts	0x0266, r25	; 0x800266 <CommandBlock+0x9>
     6ae:	a0 93 67 02 	sts	0x0267, r26	; 0x800267 <CommandBlock+0xa>
     6b2:	b0 93 68 02 	sts	0x0268, r27	; 0x800268 <CommandBlock+0xb>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     6b6:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <SenseData+0x2>
     6ba:	80 7f       	andi	r24, 0xF0	; 240
     6bc:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <SenseData+0x2>
     6c0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <SenseData+0xc>
     6c4:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <SenseData+0xd>
		return true;
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	c5 cf       	rjmp	.-118    	; 0x656 <SCSI_DecodeSCSICommand+0x10a>
			serialWriteArray(requestsensemsg, 23);
     6cc:	67 e1       	ldi	r22, 0x17	; 23
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	8f e0       	ldi	r24, 0x0F	; 15
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	fc de       	rcall	.-520    	; 0x4ce <serialWriteArray>
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     6d6:	c0 91 70 02 	lds	r28, 0x0270	; 0x800270 <CommandBlock+0x13>
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     6da:	dc 2f       	mov	r29, r28
     6dc:	c3 31       	cpi	r28, 0x13	; 19
     6de:	08 f0       	brcs	.+2      	; 0x6e2 <SCSI_DecodeSCSICommand+0x196>
     6e0:	d2 e1       	ldi	r29, 0x12	; 18
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     6e2:	0d 2f       	mov	r16, r29
     6e4:	10 e0       	ldi	r17, 0x00	; 0
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	b8 01       	movw	r22, r16
     6ec:	85 e3       	ldi	r24, 0x35	; 53
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	e6 d0       	rcall	.+460    	; 0x8be <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     6f2:	8c 2f       	mov	r24, r28
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	80 1b       	sub	r24, r16
     6fc:	91 0b       	sbc	r25, r17
     6fe:	9c d0       	rcall	.+312    	; 0x838 <Endpoint_Null_Stream>
     700:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     704:	8e 77       	andi	r24, 0x7E	; 126
     706:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     70a:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <CommandBlock+0x8>
     70e:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <CommandBlock+0x9>
     712:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <CommandBlock+0xa>
     716:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <CommandBlock+0xb>
     71a:	8d 1b       	sub	r24, r29
     71c:	91 09       	sbc	r25, r1
     71e:	a1 09       	sbc	r26, r1
     720:	b1 09       	sbc	r27, r1
     722:	c1 cf       	rjmp	.-126    	; 0x6a6 <SCSI_DecodeSCSICommand+0x15a>
			serialWriteArray(senddiagnosticmsg, 25);
     724:	69 e1       	ldi	r22, 0x19	; 25
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	8f ed       	ldi	r24, 0xDF	; 223
     72a:	91 e0       	ldi	r25, 0x01	; 1
			serialWriteArray(preventallowmediumremovalmsg, 31);
     72c:	d0 de       	rcall	.-608    	; 0x4ce <serialWriteArray>
			CommandBlock.DataTransferLength = 0;
     72e:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <CommandBlock+0x8>
     732:	10 92 66 02 	sts	0x0266, r1	; 0x800266 <CommandBlock+0x9>
     736:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <CommandBlock+0xa>
     73a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <CommandBlock+0xb>
			break;
     73e:	bb cf       	rjmp	.-138    	; 0x6b6 <SCSI_DecodeSCSICommand+0x16a>
			serialWriteArray(writemsg, 15);
     740:	6f e0       	ldi	r22, 0x0F	; 15
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	80 ed       	ldi	r24, 0xD0	; 208
     746:	91 e0       	ldi	r25, 0x01	; 1
     748:	c2 de       	rcall	.-636    	; 0x4ce <serialWriteArray>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_DATA_PROTECT,
     74a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <SenseData+0x2>
     74e:	80 7f       	andi	r24, 0xF0	; 240
     750:	87 60       	ori	r24, 0x07	; 7
     752:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <SenseData+0x2>
     756:	87 e2       	ldi	r24, 0x27	; 39
     758:	79 cf       	rjmp	.-270    	; 0x64c <SCSI_DecodeSCSICommand+0x100>
			serialWriteArray(readmsg, 14);
     75a:	6e e0       	ldi	r22, 0x0E	; 14
     75c:	70 e0       	ldi	r23, 0x00	; 0
     75e:	82 ec       	ldi	r24, 0xC2	; 194
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	b5 de       	rcall	.-662    	; 0x4ce <serialWriteArray>

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     764:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <CommandBlock+0x14>
     768:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <CommandBlock+0x13>
     76c:	a0 91 6f 02 	lds	r26, 0x026F	; 0x80026f <CommandBlock+0x12>
     770:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <CommandBlock+0x11>
				return Data.Word;
     774:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <CommandBlock+0x17>
     778:	c2 2f       	mov	r28, r18
     77a:	20 91 73 02 	lds	r18, 0x0273	; 0x800273 <CommandBlock+0x16>
     77e:	d2 2f       	mov	r29, r18
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     780:	89 2b       	or	r24, r25
     782:	8a 2b       	or	r24, r26
     784:	8b 2b       	or	r24, r27
     786:	41 f0       	breq	.+16     	; 0x798 <SCSI_DecodeSCSICommand+0x24c>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     788:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <SenseData+0x2>
     78c:	80 7f       	andi	r24, 0xF0	; 240
     78e:	85 60       	ori	r24, 0x05	; 5
     790:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <SenseData+0x2>
     794:	81 e2       	ldi	r24, 0x21	; 33
     796:	5a cf       	rjmp	.-332    	; 0x64c <SCSI_DecodeSCSICommand+0x100>
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     798:	01 e2       	ldi	r16, 0x21	; 33
     79a:	10 e0       	ldi	r17, 0x00	; 0
			serialWrite('0');
     79c:	80 e3       	ldi	r24, 0x30	; 48
     79e:	90 de       	rcall	.-736    	; 0x4c0 <serialWrite>
     7a0:	01 50       	subi	r16, 0x01	; 1
     7a2:	11 09       	sbc	r17, r1
	for(int i = 32; i >= 0; i--)
     7a4:	d9 f7       	brne	.-10     	; 0x79c <SCSI_DecodeSCSICommand+0x250>
	serialWrite('\n');
     7a6:	8a e0       	ldi	r24, 0x0A	; 10
     7a8:	8b de       	rcall	.-746    	; 0x4c0 <serialWrite>
	serialWrite('\r');
     7aa:	8d e0       	ldi	r24, 0x0D	; 13
     7ac:	89 de       	rcall	.-750    	; 0x4c0 <serialWrite>
	readData(BlockAddress, TotalBlocks);
     7ae:	ae 01       	movw	r20, r28
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	cb 01       	movw	r24, r22
     7b6:	9e de       	rcall	.-708    	; 0x4f4 <readData>
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     7b8:	ae 01       	movw	r20, r28
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	70 e0       	ldi	r23, 0x00	; 0
     7be:	89 e0       	ldi	r24, 0x09	; 9
     7c0:	44 0f       	add	r20, r20
     7c2:	55 1f       	adc	r21, r21
     7c4:	66 1f       	adc	r22, r22
     7c6:	77 1f       	adc	r23, r23
     7c8:	8a 95       	dec	r24
     7ca:	d1 f7       	brne	.-12     	; 0x7c0 <SCSI_DecodeSCSICommand+0x274>
     7cc:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <CommandBlock+0x8>
     7d0:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <CommandBlock+0x9>
     7d4:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <CommandBlock+0xa>
     7d8:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <CommandBlock+0xb>
     7dc:	84 1b       	sub	r24, r20
     7de:	95 0b       	sbc	r25, r21
     7e0:	a6 0b       	sbc	r26, r22
     7e2:	b7 0b       	sbc	r27, r23
     7e4:	60 cf       	rjmp	.-320    	; 0x6a6 <SCSI_DecodeSCSICommand+0x15a>
			serialWriteArray(modesensemsg, 20);
     7e6:	64 e1       	ldi	r22, 0x14	; 20
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	8e ea       	ldi	r24, 0xAE	; 174
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	6f de       	rcall	.-802    	; 0x4ce <serialWriteArray>
				UEDATX = Data;
     7f0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7f4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7f8:	80 e8       	ldi	r24, 0x80	; 128
     7fa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     7fe:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     802:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     806:	8e 77       	andi	r24, 0x7E	; 126
     808:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= 4;
     80c:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <CommandBlock+0x8>
     810:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <CommandBlock+0x9>
     814:	a0 91 67 02 	lds	r26, 0x0267	; 0x800267 <CommandBlock+0xa>
     818:	b0 91 68 02 	lds	r27, 0x0268	; 0x800268 <CommandBlock+0xb>
     81c:	04 97       	sbiw	r24, 0x04	; 4
     81e:	a1 09       	sbc	r26, r1
     820:	b1 09       	sbc	r27, r1
     822:	41 cf       	rjmp	.-382    	; 0x6a6 <SCSI_DecodeSCSICommand+0x15a>
			serialWriteArray(testunitmsg, 19);
     824:	63 e1       	ldi	r22, 0x13	; 19
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	87 e8       	ldi	r24, 0x87	; 135
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	7f cf       	rjmp	.-258    	; 0x72c <SCSI_DecodeSCSICommand+0x1e0>
			serialWriteArray(preventallowmediumremovalmsg, 31);
     82e:	6f e1       	ldi	r22, 0x1F	; 31
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	88 e6       	ldi	r24, 0x68	; 104
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	7a cf       	rjmp	.-268    	; 0x72c <SCSI_DecodeSCSICommand+0x1e0>

00000838 <Endpoint_Null_Stream>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ff 92       	push	r15
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	ec 01       	movw	r28, r24
     848:	8b 01       	movw	r16, r22
     84a:	e2 d1       	rcall	.+964    	; 0xc10 <Endpoint_WaitUntilReady>
     84c:	f8 2e       	mov	r15, r24
     84e:	81 11       	cpse	r24, r1
     850:	21 c0       	rjmp	.+66     	; 0x894 <Endpoint_Null_Stream+0x5c>
     852:	01 15       	cp	r16, r1
     854:	11 05       	cpc	r17, r1
     856:	29 f0       	breq	.+10     	; 0x862 <Endpoint_Null_Stream+0x2a>
     858:	f8 01       	movw	r30, r16
     85a:	80 81       	ld	r24, Z
     85c:	91 81       	ldd	r25, Z+1	; 0x01
     85e:	c8 1b       	sub	r28, r24
     860:	d9 0b       	sbc	r29, r25
     862:	c1 2c       	mov	r12, r1
     864:	d1 2c       	mov	r13, r1
     866:	20 97       	sbiw	r28, 0x00	; 0
     868:	a9 f0       	breq	.+42     	; 0x894 <Endpoint_Null_Stream+0x5c>
     86a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     86e:	85 fd       	sbrc	r24, 5
     870:	1f c0       	rjmp	.+62     	; 0x8b0 <Endpoint_Null_Stream+0x78>
     872:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     876:	8e 77       	andi	r24, 0x7E	; 126
     878:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     87c:	01 15       	cp	r16, r1
     87e:	11 05       	cpc	r17, r1
     880:	91 f0       	breq	.+36     	; 0x8a6 <Endpoint_Null_Stream+0x6e>
     882:	f8 01       	movw	r30, r16
     884:	80 81       	ld	r24, Z
     886:	91 81       	ldd	r25, Z+1	; 0x01
     888:	c8 0e       	add	r12, r24
     88a:	d9 1e       	adc	r13, r25
     88c:	d1 82       	std	Z+1, r13	; 0x01
     88e:	c0 82       	st	Z, r12
     890:	85 e0       	ldi	r24, 0x05	; 5
     892:	f8 2e       	mov	r15, r24
     894:	8f 2d       	mov	r24, r15
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	ff 90       	pop	r15
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret
     8a6:	b4 d1       	rcall	.+872    	; 0xc10 <Endpoint_WaitUntilReady>
     8a8:	88 23       	and	r24, r24
     8aa:	e9 f2       	breq	.-70     	; 0x866 <Endpoint_Null_Stream+0x2e>
     8ac:	f8 2e       	mov	r15, r24
     8ae:	f2 cf       	rjmp	.-28     	; 0x894 <Endpoint_Null_Stream+0x5c>
     8b0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8b4:	21 97       	sbiw	r28, 0x01	; 1
     8b6:	ff ef       	ldi	r31, 0xFF	; 255
     8b8:	cf 1a       	sub	r12, r31
     8ba:	df 0a       	sbc	r13, r31
     8bc:	d4 cf       	rjmp	.-88     	; 0x866 <Endpoint_Null_Stream+0x2e>

000008be <Endpoint_Write_Stream_LE>:
     8be:	af 92       	push	r10
     8c0:	bf 92       	push	r11
     8c2:	df 92       	push	r13
     8c4:	ef 92       	push	r14
     8c6:	ff 92       	push	r15
     8c8:	0f 93       	push	r16
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	ec 01       	movw	r28, r24
     8d2:	8b 01       	movw	r16, r22
     8d4:	7a 01       	movw	r14, r20
     8d6:	9c d1       	rcall	.+824    	; 0xc10 <Endpoint_WaitUntilReady>
     8d8:	d8 2e       	mov	r13, r24
     8da:	81 11       	cpse	r24, r1
     8dc:	24 c0       	rjmp	.+72     	; 0x926 <Endpoint_Write_Stream_LE+0x68>
     8de:	e1 14       	cp	r14, r1
     8e0:	f1 04       	cpc	r15, r1
     8e2:	39 f0       	breq	.+14     	; 0x8f2 <Endpoint_Write_Stream_LE+0x34>
     8e4:	f7 01       	movw	r30, r14
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	08 1b       	sub	r16, r24
     8ec:	19 0b       	sbc	r17, r25
     8ee:	c8 0f       	add	r28, r24
     8f0:	d9 1f       	adc	r29, r25
     8f2:	a1 2c       	mov	r10, r1
     8f4:	b1 2c       	mov	r11, r1
     8f6:	01 15       	cp	r16, r1
     8f8:	11 05       	cpc	r17, r1
     8fa:	a9 f0       	breq	.+42     	; 0x926 <Endpoint_Write_Stream_LE+0x68>
     8fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     900:	85 fd       	sbrc	r24, 5
     902:	21 c0       	rjmp	.+66     	; 0x946 <Endpoint_Write_Stream_LE+0x88>
     904:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     908:	8e 77       	andi	r24, 0x7E	; 126
     90a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     90e:	e1 14       	cp	r14, r1
     910:	f1 04       	cpc	r15, r1
     912:	a1 f0       	breq	.+40     	; 0x93c <Endpoint_Write_Stream_LE+0x7e>
     914:	f7 01       	movw	r30, r14
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	a8 0e       	add	r10, r24
     91c:	b9 1e       	adc	r11, r25
     91e:	b1 82       	std	Z+1, r11	; 0x01
     920:	a0 82       	st	Z, r10
     922:	85 e0       	ldi	r24, 0x05	; 5
     924:	d8 2e       	mov	r13, r24
     926:	8d 2d       	mov	r24, r13
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	bf 90       	pop	r11
     938:	af 90       	pop	r10
     93a:	08 95       	ret
     93c:	69 d1       	rcall	.+722    	; 0xc10 <Endpoint_WaitUntilReady>
     93e:	88 23       	and	r24, r24
     940:	d1 f2       	breq	.-76     	; 0x8f6 <Endpoint_Write_Stream_LE+0x38>
     942:	d8 2e       	mov	r13, r24
     944:	f0 cf       	rjmp	.-32     	; 0x926 <Endpoint_Write_Stream_LE+0x68>
     946:	89 91       	ld	r24, Y+
     948:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     94c:	01 50       	subi	r16, 0x01	; 1
     94e:	11 09       	sbc	r17, r1
     950:	ff ef       	ldi	r31, 0xFF	; 255
     952:	af 1a       	sub	r10, r31
     954:	bf 0a       	sbc	r11, r31
     956:	cf cf       	rjmp	.-98     	; 0x8f6 <Endpoint_Write_Stream_LE+0x38>

00000958 <Endpoint_Read_Stream_LE>:
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	df 92       	push	r13
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	df 93       	push	r29
     96a:	ec 01       	movw	r28, r24
     96c:	8b 01       	movw	r16, r22
     96e:	7a 01       	movw	r14, r20
     970:	4f d1       	rcall	.+670    	; 0xc10 <Endpoint_WaitUntilReady>
     972:	d8 2e       	mov	r13, r24
     974:	81 11       	cpse	r24, r1
     976:	24 c0       	rjmp	.+72     	; 0x9c0 <Endpoint_Read_Stream_LE+0x68>
     978:	e1 14       	cp	r14, r1
     97a:	f1 04       	cpc	r15, r1
     97c:	39 f0       	breq	.+14     	; 0x98c <Endpoint_Read_Stream_LE+0x34>
     97e:	f7 01       	movw	r30, r14
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	08 1b       	sub	r16, r24
     986:	19 0b       	sbc	r17, r25
     988:	c8 0f       	add	r28, r24
     98a:	d9 1f       	adc	r29, r25
     98c:	a1 2c       	mov	r10, r1
     98e:	b1 2c       	mov	r11, r1
     990:	01 15       	cp	r16, r1
     992:	11 05       	cpc	r17, r1
     994:	a9 f0       	breq	.+42     	; 0x9c0 <Endpoint_Read_Stream_LE+0x68>
     996:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     99a:	85 fd       	sbrc	r24, 5
     99c:	21 c0       	rjmp	.+66     	; 0x9e0 <Endpoint_Read_Stream_LE+0x88>
     99e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9a2:	8b 77       	andi	r24, 0x7B	; 123
     9a4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9a8:	e1 14       	cp	r14, r1
     9aa:	f1 04       	cpc	r15, r1
     9ac:	a1 f0       	breq	.+40     	; 0x9d6 <Endpoint_Read_Stream_LE+0x7e>
     9ae:	f7 01       	movw	r30, r14
     9b0:	80 81       	ld	r24, Z
     9b2:	91 81       	ldd	r25, Z+1	; 0x01
     9b4:	a8 0e       	add	r10, r24
     9b6:	b9 1e       	adc	r11, r25
     9b8:	b1 82       	std	Z+1, r11	; 0x01
     9ba:	a0 82       	st	Z, r10
     9bc:	85 e0       	ldi	r24, 0x05	; 5
     9be:	d8 2e       	mov	r13, r24
     9c0:	8d 2d       	mov	r24, r13
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	df 90       	pop	r13
     9d0:	bf 90       	pop	r11
     9d2:	af 90       	pop	r10
     9d4:	08 95       	ret
     9d6:	1c d1       	rcall	.+568    	; 0xc10 <Endpoint_WaitUntilReady>
     9d8:	88 23       	and	r24, r24
     9da:	d1 f2       	breq	.-76     	; 0x990 <Endpoint_Read_Stream_LE+0x38>
     9dc:	d8 2e       	mov	r13, r24
     9de:	f0 cf       	rjmp	.-32     	; 0x9c0 <Endpoint_Read_Stream_LE+0x68>
     9e0:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     9e4:	89 93       	st	Y+, r24
     9e6:	01 50       	subi	r16, 0x01	; 1
     9e8:	11 09       	sbc	r17, r1
     9ea:	ff ef       	ldi	r31, 0xFF	; 255
     9ec:	af 1a       	sub	r10, r31
     9ee:	bf 0a       	sbc	r11, r31
     9f0:	cf cf       	rjmp	.-98     	; 0x990 <Endpoint_Read_Stream_LE+0x38>

000009f2 <Endpoint_Write_Control_Stream_LE>:
     9f2:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <USB_ControlRequest+0x6>
     9f6:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <USB_ControlRequest+0x7>
     9fa:	26 17       	cp	r18, r22
     9fc:	37 07       	cpc	r19, r23
     9fe:	a8 f0       	brcs	.+42     	; 0xa2a <Endpoint_Write_Control_Stream_LE+0x38>
     a00:	61 15       	cp	r22, r1
     a02:	71 05       	cpc	r23, r1
     a04:	29 f4       	brne	.+10     	; 0xa10 <Endpoint_Write_Control_Stream_LE+0x1e>
     a06:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a0a:	2e 77       	andi	r18, 0x7E	; 126
     a0c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a10:	fc 01       	movw	r30, r24
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	61 15       	cp	r22, r1
     a16:	71 05       	cpc	r23, r1
     a18:	51 f4       	brne	.+20     	; 0xa2e <Endpoint_Write_Control_Stream_LE+0x3c>
     a1a:	21 11       	cpse	r18, r1
     a1c:	08 c0       	rjmp	.+16     	; 0xa2e <Endpoint_Write_Control_Stream_LE+0x3c>
     a1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a22:	82 ff       	sbrs	r24, 2
     a24:	33 c0       	rjmp	.+102    	; 0xa8c <Endpoint_Write_Control_Stream_LE+0x9a>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	08 95       	ret
     a2a:	b9 01       	movw	r22, r18
     a2c:	f1 cf       	rjmp	.-30     	; 0xa10 <Endpoint_Write_Control_Stream_LE+0x1e>
     a2e:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <USB_DeviceState>
     a32:	88 23       	and	r24, r24
     a34:	b9 f1       	breq	.+110    	; 0xaa4 <Endpoint_Write_Control_Stream_LE+0xb2>
     a36:	85 30       	cpi	r24, 0x05	; 5
     a38:	b9 f1       	breq	.+110    	; 0xaa8 <Endpoint_Write_Control_Stream_LE+0xb6>
     a3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a3e:	83 fd       	sbrc	r24, 3
     a40:	2f c0       	rjmp	.+94     	; 0xaa0 <Endpoint_Write_Control_Stream_LE+0xae>
     a42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a46:	82 fd       	sbrc	r24, 2
     a48:	ea cf       	rjmp	.-44     	; 0xa1e <Endpoint_Write_Control_Stream_LE+0x2c>
     a4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a4e:	80 ff       	sbrs	r24, 0
     a50:	e1 cf       	rjmp	.-62     	; 0xa14 <Endpoint_Write_Control_Stream_LE+0x22>
     a52:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     a56:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	92 2b       	or	r25, r18
     a5e:	61 15       	cp	r22, r1
     a60:	71 05       	cpc	r23, r1
     a62:	19 f0       	breq	.+6      	; 0xa6a <Endpoint_Write_Control_Stream_LE+0x78>
     a64:	88 30       	cpi	r24, 0x08	; 8
     a66:	91 05       	cpc	r25, r1
     a68:	50 f0       	brcs	.+20     	; 0xa7e <Endpoint_Write_Control_Stream_LE+0x8c>
     a6a:	21 e0       	ldi	r18, 0x01	; 1
     a6c:	08 97       	sbiw	r24, 0x08	; 8
     a6e:	09 f0       	breq	.+2      	; 0xa72 <Endpoint_Write_Control_Stream_LE+0x80>
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a76:	8e 77       	andi	r24, 0x7E	; 126
     a78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a7c:	cb cf       	rjmp	.-106    	; 0xa14 <Endpoint_Write_Control_Stream_LE+0x22>
     a7e:	21 91       	ld	r18, Z+
     a80:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     a84:	61 50       	subi	r22, 0x01	; 1
     a86:	71 09       	sbc	r23, r1
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	e9 cf       	rjmp	.-46     	; 0xa5e <Endpoint_Write_Control_Stream_LE+0x6c>
     a8c:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <USB_DeviceState>
     a90:	88 23       	and	r24, r24
     a92:	41 f0       	breq	.+16     	; 0xaa4 <Endpoint_Write_Control_Stream_LE+0xb2>
     a94:	85 30       	cpi	r24, 0x05	; 5
     a96:	41 f0       	breq	.+16     	; 0xaa8 <Endpoint_Write_Control_Stream_LE+0xb6>
     a98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a9c:	83 ff       	sbrs	r24, 3
     a9e:	bf cf       	rjmp	.-130    	; 0xa1e <Endpoint_Write_Control_Stream_LE+0x2c>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	08 95       	ret
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	08 95       	ret
     aa8:	83 e0       	ldi	r24, 0x03	; 3
     aaa:	08 95       	ret

00000aac <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     aac:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <USB_ControlRequest+0x6>
     ab0:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <USB_ControlRequest+0x7>
     ab4:	26 17       	cp	r18, r22
     ab6:	37 07       	cpc	r19, r23
     ab8:	a8 f0       	brcs	.+42     	; 0xae4 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     aba:	61 15       	cp	r22, r1
     abc:	71 05       	cpc	r23, r1
     abe:	29 f4       	brne	.+10     	; 0xaca <Endpoint_Write_Control_PStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ac0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ac4:	2e 77       	andi	r18, 0x7E	; 126
     ac6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     aca:	fc 01       	movw	r30, r24
     acc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     ace:	61 15       	cp	r22, r1
     ad0:	71 05       	cpc	r23, r1
     ad2:	51 f4       	brne	.+20     	; 0xae8 <Endpoint_Write_Control_PStream_LE+0x3c>
     ad4:	21 11       	cpse	r18, r1
     ad6:	08 c0       	rjmp	.+16     	; 0xae8 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ad8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     adc:	82 ff       	sbrs	r24, 2
     ade:	34 c0       	rjmp	.+104    	; 0xb48 <__stack+0x49>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	08 95       	ret
     ae4:	b9 01       	movw	r22, r18
     ae6:	f1 cf       	rjmp	.-30     	; 0xaca <Endpoint_Write_Control_PStream_LE+0x1e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ae8:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     aec:	88 23       	and	r24, r24
     aee:	c1 f1       	breq	.+112    	; 0xb60 <__stack+0x61>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     af0:	85 30       	cpi	r24, 0x05	; 5
     af2:	c1 f1       	breq	.+112    	; 0xb64 <__stack+0x65>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     af4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     af8:	83 fd       	sbrc	r24, 3
     afa:	30 c0       	rjmp	.+96     	; 0xb5c <__stack+0x5d>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     afc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
     b00:	82 fd       	sbrc	r24, 2
     b02:	ea cf       	rjmp	.-44     	; 0xad8 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
     b08:	80 ff       	sbrs	r24, 0
     b0a:	e1 cf       	rjmp	.-62     	; 0xace <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     b0c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     b10:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	92 2b       	or	r25, r18
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b18:	61 15       	cp	r22, r1
     b1a:	71 05       	cpc	r23, r1
     b1c:	19 f0       	breq	.+6      	; 0xb24 <__stack+0x25>
     b1e:	88 30       	cpi	r24, 0x08	; 8
     b20:	91 05       	cpc	r25, r1
     b22:	50 f0       	brcs	.+20     	; 0xb38 <__stack+0x39>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b24:	21 e0       	ldi	r18, 0x01	; 1
     b26:	08 97       	sbiw	r24, 0x08	; 8
     b28:	09 f0       	breq	.+2      	; 0xb2c <__stack+0x2d>
     b2a:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b30:	8e 77       	andi	r24, 0x7E	; 126
     b32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b36:	cb cf       	rjmp	.-106    	; 0xace <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b38:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b3a:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     b3e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     b40:	61 50       	subi	r22, 0x01	; 1
     b42:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	e8 cf       	rjmp	.-48     	; 0xb18 <__stack+0x19>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b48:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b4c:	88 23       	and	r24, r24
     b4e:	41 f0       	breq	.+16     	; 0xb60 <__stack+0x61>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b50:	85 30       	cpi	r24, 0x05	; 5
     b52:	41 f0       	breq	.+16     	; 0xb64 <__stack+0x65>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     b58:	83 ff       	sbrs	r24, 3
     b5a:	be cf       	rjmp	.-132    	; 0xad8 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
}
     b5e:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	08 95       	ret

00000b68 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     b68:	98 2f       	mov	r25, r24
     b6a:	97 30       	cpi	r25, 0x07	; 7
     b6c:	28 f0       	brcs	.+10     	; 0xb78 <Endpoint_ConfigureEndpoint_Prv+0x10>
     b6e:	8f 70       	andi	r24, 0x0F	; 15
     b70:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 95       	ret
     b78:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     b7c:	98 17       	cp	r25, r24
     b7e:	51 f0       	breq	.+20     	; 0xb94 <Endpoint_ConfigureEndpoint_Prv+0x2c>
     b80:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     b84:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     b88:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     b8c:	21 fd       	sbrc	r18, 1
     b8e:	06 c0       	rjmp	.+12     	; 0xb9c <Endpoint_ConfigureEndpoint_Prv+0x34>
     b90:	9f 5f       	subi	r25, 0xFF	; 255
     b92:	eb cf       	rjmp	.-42     	; 0xb6a <Endpoint_ConfigureEndpoint_Prv+0x2>
     b94:	24 2f       	mov	r18, r20
     b96:	76 2f       	mov	r23, r22
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	f8 cf       	rjmp	.-16     	; 0xb8c <Endpoint_ConfigureEndpoint_Prv+0x24>
     b9c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ba0:	3e 7f       	andi	r19, 0xFE	; 254
     ba2:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     ba6:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     baa:	3d 7f       	andi	r19, 0xFD	; 253
     bac:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     bb0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     bb4:	31 60       	ori	r19, 0x01	; 1
     bb6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     bba:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     bbe:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     bc2:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     bc6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     bca:	27 fd       	sbrc	r18, 7
     bcc:	e1 cf       	rjmp	.-62     	; 0xb90 <Endpoint_ConfigureEndpoint_Prv+0x28>
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	08 95       	ret

00000bd2 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     bd2:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <USB_ControlRequest>
     bd6:	87 ff       	sbrs	r24, 7
     bd8:	13 c0       	rjmp	.+38     	; 0xc00 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     bde:	82 ff       	sbrs	r24, 2
     be0:	06 c0       	rjmp	.+12     	; 0xbee <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     be2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     be6:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     be8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bee:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <USB_DeviceState>
     bf2:	81 11       	cpse	r24, r1
     bf4:	f2 cf       	rjmp	.-28     	; 0xbda <Endpoint_ClearStatusStage+0x8>
     bf6:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bf8:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <USB_DeviceState>
     bfc:	88 23       	and	r24, r24
     bfe:	d9 f3       	breq	.-10     	; 0xbf6 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
     c04:	80 ff       	sbrs	r24, 0
     c06:	f8 cf       	rjmp	.-16     	; 0xbf8 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c0c:	8e 77       	andi	r24, 0x7E	; 126
     c0e:	ec cf       	rjmp	.-40     	; 0xbe8 <Endpoint_ClearStatusStage+0x16>

00000c10 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     c10:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     c14:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     c18:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c1a:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     c1e:	90 fd       	sbrc	r25, 0
     c20:	20 c0       	rjmp	.+64     	; 0xc62 <Endpoint_WaitUntilReady+0x52>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c22:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c26:	92 fd       	sbrc	r25, 2
     c28:	20 c0       	rjmp	.+64     	; 0xc6a <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c2a:	90 91 80 02 	lds	r25, 0x0280	; 0x800280 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c2e:	99 23       	and	r25, r25
     c30:	91 f0       	breq	.+36     	; 0xc56 <Endpoint_WaitUntilReady+0x46>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c32:	95 30       	cpi	r25, 0x05	; 5
     c34:	91 f0       	breq	.+36     	; 0xc5a <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c36:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     c3a:	95 fd       	sbrc	r25, 5
     c3c:	10 c0       	rjmp	.+32     	; 0xc5e <Endpoint_WaitUntilReady+0x4e>
     c3e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     c42:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c46:	42 17       	cp	r20, r18
     c48:	53 07       	cpc	r21, r19
     c4a:	39 f3       	breq	.-50     	; 0xc1a <Endpoint_WaitUntilReady+0xa>
     c4c:	81 50       	subi	r24, 0x01	; 1
     c4e:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c50:	21 f7       	brne	.-56     	; 0xc1a <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     c52:	84 e0       	ldi	r24, 0x04	; 4
     c54:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
     c5a:	83 e0       	ldi	r24, 0x03	; 3
     c5c:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	08 95       	ret
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c62:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
     c66:	90 ff       	sbrs	r25, 0
     c68:	e0 cf       	rjmp	.-64     	; 0xc2a <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	08 95       	ret

00000c6e <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c76:	4b d0       	rcall	.+150    	; 0xd0e <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c78:	52 d0       	rcall	.+164    	; 0xd1e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c7a:	c8 ed       	ldi	r28, 0xD8	; 216
     c7c:	d0 e0       	ldi	r29, 0x00	; 0
     c7e:	88 81       	ld	r24, Y
     c80:	8f 77       	andi	r24, 0x7F	; 127
     c82:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     c84:	88 81       	ld	r24, Y
     c86:	80 68       	ori	r24, 0x80	; 128
     c88:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
     c8a:	88 81       	ld	r24, Y
     c8c:	8f 7d       	andi	r24, 0xDF	; 223
     c8e:	88 83       	st	Y, r24
				PLLCSR = 0;
     c90:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     c92:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
     c96:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     c9a:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     c9e:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     ca2:	00 ee       	ldi	r16, 0xE0	; 224
     ca4:	10 e0       	ldi	r17, 0x00	; 0
     ca6:	f8 01       	movw	r30, r16
     ca8:	80 81       	ld	r24, Z
     caa:	8b 7f       	andi	r24, 0xFB	; 251
     cac:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     cae:	88 81       	ld	r24, Y
     cb0:	81 60       	ori	r24, 0x01	; 1
     cb2:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
     cb4:	42 e0       	ldi	r20, 0x02	; 2
     cb6:	60 e0       	ldi	r22, 0x00	; 0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	56 df       	rcall	.-340    	; 0xb68 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     cbc:	e1 ee       	ldi	r30, 0xE1	; 225
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
     cc6:	e2 ee       	ldi	r30, 0xE2	; 226
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	81 60       	ori	r24, 0x01	; 1
     cce:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
     cd0:	80 81       	ld	r24, Z
     cd2:	88 60       	ori	r24, 0x08	; 8
     cd4:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
     cd6:	f8 01       	movw	r30, r16
     cd8:	80 81       	ld	r24, Z
     cda:	8e 7f       	andi	r24, 0xFE	; 254
     cdc:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
     cde:	88 81       	ld	r24, Y
     ce0:	80 61       	ori	r24, 0x10	; 16
     ce2:	88 83       	st	Y, r24
}
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	1f 91       	pop	r17
     cea:	0f 91       	pop	r16
     cec:	08 95       	ret

00000cee <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
     cee:	e8 ed       	ldi	r30, 0xD8	; 216
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8f 7e       	andi	r24, 0xEF	; 239
     cf6:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
     cf8:	e7 ed       	ldi	r30, 0xD7	; 215
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	81 60       	ori	r24, 0x01	; 1
     d00:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <USB_IsInitialized>
	USB_ResetInterface();
     d0c:	b0 cf       	rjmp	.-160    	; 0xc6e <USB_ResetInterface>

00000d0e <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     d0e:	e8 ed       	ldi	r30, 0xD8	; 216
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8e 7f       	andi	r24, 0xFE	; 254
     d16:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d18:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d1c:	08 95       	ret

00000d1e <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     d1e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d22:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     d26:	08 95       	ret

00000d28 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     d4a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     d4e:	82 ff       	sbrs	r24, 2
     d50:	0a c0       	rjmp	.+20     	; 0xd66 <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
     d52:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     d56:	82 ff       	sbrs	r24, 2
     d58:	06 c0       	rjmp	.+12     	; 0xd66 <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
     d5a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     d5e:	8b 7f       	andi	r24, 0xFB	; 251
     d60:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     d64:	3d d2       	rcall	.+1146   	; 0x11e0 <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
     d66:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     d6a:	80 ff       	sbrs	r24, 0
     d6c:	18 c0       	rjmp	.+48     	; 0xd9e <__vector_10+0x76>
						return (USBCON & (1 << VBUSTE));
     d6e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     d72:	80 ff       	sbrs	r24, 0
     d74:	14 c0       	rjmp	.+40     	; 0xd9e <__vector_10+0x76>
						USBINT &= ~(1 << VBUSTI);
     d76:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     d7a:	8e 7f       	andi	r24, 0xFE	; 254
     d7c:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     d80:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     d84:	80 ff       	sbrs	r24, 0
     d86:	8f c0       	rjmp	.+286    	; 0xea6 <__vector_10+0x17e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d88:	80 e1       	ldi	r24, 0x10	; 16
     d8a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d8c:	82 e1       	ldi	r24, 0x12	; 18
     d8e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     d90:	09 b4       	in	r0, 0x29	; 41
     d92:	00 fe       	sbrs	r0, 0
     d94:	fd cf       	rjmp	.-6      	; 0xd90 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <USB_DeviceState>
			EVENT_USB_Device_Connect();
     d9c:	0e da       	rcall	.-3044   	; 0x1ba <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
     d9e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     da2:	80 ff       	sbrs	r24, 0
     da4:	18 c0       	rjmp	.+48     	; 0xdd6 <__vector_10+0xae>
						return (UDIEN  & (1 << SUSPE));
     da6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     daa:	80 ff       	sbrs	r24, 0
     dac:	14 c0       	rjmp	.+40     	; 0xdd6 <__vector_10+0xae>
						UDIEN  &= ~(1 << SUSPE);
     dae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     db2:	8e 7f       	andi	r24, 0xFE	; 254
     db4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
     db8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     dbc:	80 61       	ori	r24, 0x10	; 16
     dbe:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     dc2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     dc6:	80 62       	ori	r24, 0x20	; 32
     dc8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
     dcc:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     dce:	85 e0       	ldi	r24, 0x05	; 5
     dd0:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     dd4:	05 d2       	rcall	.+1034   	; 0x11e0 <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
     dd6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     dda:	84 ff       	sbrs	r24, 4
     ddc:	28 c0       	rjmp	.+80     	; 0xe2e <__vector_10+0x106>
						return (UDIEN  & (1 << WAKEUPE));
     dde:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     de2:	84 ff       	sbrs	r24, 4
     de4:	24 c0       	rjmp	.+72     	; 0xe2e <__vector_10+0x106>
				PLLCSR = USB_PLL_PSC;
     de6:	80 e1       	ldi	r24, 0x10	; 16
     de8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     dea:	82 e1       	ldi	r24, 0x12	; 18
     dec:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     dee:	09 b4       	in	r0, 0x29	; 41
     df0:	00 fe       	sbrs	r0, 0
     df2:	fd cf       	rjmp	.-6      	; 0xdee <__vector_10+0xc6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     df4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     df8:	8f 7d       	andi	r24, 0xDF	; 223
     dfa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
     dfe:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e02:	8f 7e       	andi	r24, 0xEF	; 239
     e04:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
     e08:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e0c:	8f 7e       	andi	r24, 0xEF	; 239
     e0e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
     e12:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e16:	81 60       	ori	r24, 0x01	; 1
     e18:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     e1c:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <USB_Device_ConfigurationNumber>
     e20:	88 23       	and	r24, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <__vector_10+0xfe>
     e24:	45 c0       	rjmp	.+138    	; 0xeb0 <__vector_10+0x188>
		  USB_DeviceState = DEVICE_STATE_Configured;
     e26:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     e28:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     e2c:	d9 d1       	rcall	.+946    	; 0x11e0 <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
     e2e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     e32:	83 ff       	sbrs	r24, 3
     e34:	27 c0       	rjmp	.+78     	; 0xe84 <__vector_10+0x15c>
						return (UDIEN  & (1 << EORSTE));
     e36:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e3a:	83 ff       	sbrs	r24, 3
     e3c:	23 c0       	rjmp	.+70     	; 0xe84 <__vector_10+0x15c>
						UDINT  &= ~(1 << EORSTI);
     e3e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e42:	87 7f       	andi	r24, 0xF7	; 247
     e44:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     e4e:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
     e52:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     e56:	8e 7f       	andi	r24, 0xFE	; 254
     e58:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
     e5c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e60:	8e 7f       	andi	r24, 0xFE	; 254
     e62:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
     e66:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     e6a:	80 61       	ori	r24, 0x10	; 16
     e6c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e70:	42 e0       	ldi	r20, 0x02	; 2
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	78 de       	rcall	.-784    	; 0xb68 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
     e78:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     e7c:	88 60       	ori	r24, 0x08	; 8
     e7e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     e82:	ae d1       	rcall	.+860    	; 0x11e0 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e84:	ff 91       	pop	r31
     e86:	ef 91       	pop	r30
     e88:	bf 91       	pop	r27
     e8a:	af 91       	pop	r26
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	7f 91       	pop	r23
     e92:	6f 91       	pop	r22
     e94:	5f 91       	pop	r21
     e96:	4f 91       	pop	r20
     e98:	3f 91       	pop	r19
     e9a:	2f 91       	pop	r18
     e9c:	0f 90       	pop	r0
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	0f 90       	pop	r0
     ea2:	1f 90       	pop	r1
     ea4:	18 95       	reti
				PLLCSR = 0;
     ea6:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
     ea8:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     eac:	8b d9       	rcall	.-3306   	; 0x1c4 <EVENT_USB_Device_Disconnect>
     eae:	77 cf       	rjmp	.-274    	; 0xd9e <__vector_10+0x76>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     eb0:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     eb4:	87 fd       	sbrc	r24, 7
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <__vector_10+0x194>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	b6 cf       	rjmp	.-148    	; 0xe28 <__vector_10+0x100>
     ebc:	83 e0       	ldi	r24, 0x03	; 3
     ebe:	b4 cf       	rjmp	.-152    	; 0xe28 <__vector_10+0x100>

00000ec0 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     ec0:	1f 92       	push	r1
     ec2:	0f 92       	push	r0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	cf 93       	push	r28
     ee0:	ef 93       	push	r30
     ee2:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ee4:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     ee8:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     eea:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eee:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
     ef2:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     ef6:	87 7f       	andi	r24, 0xF7	; 247
     ef8:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     efc:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     efe:	1b d0       	rcall	.+54     	; 0xf36 <USB_Device_ProcessControlRequest>
     f00:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
     f04:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     f08:	88 60       	ori	r24, 0x08	; 8
     f0a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     f0e:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     f12:	ff 91       	pop	r31
     f14:	ef 91       	pop	r30
     f16:	cf 91       	pop	r28
     f18:	bf 91       	pop	r27
     f1a:	af 91       	pop	r26
     f1c:	9f 91       	pop	r25
     f1e:	8f 91       	pop	r24
     f20:	7f 91       	pop	r23
     f22:	6f 91       	pop	r22
     f24:	5f 91       	pop	r21
     f26:	4f 91       	pop	r20
     f28:	3f 91       	pop	r19
     f2a:	2f 91       	pop	r18
     f2c:	0f 90       	pop	r0
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	0f 90       	pop	r0
     f32:	1f 90       	pop	r1
     f34:	18 95       	reti

00000f36 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	aa 97       	sbiw	r28, 0x2a	; 42
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	e1 e8       	ldi	r30, 0x81	; 129
     f4e:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     f50:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     f54:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     f56:	22 e0       	ldi	r18, 0x02	; 2
     f58:	e9 38       	cpi	r30, 0x89	; 137
     f5a:	f2 07       	cpc	r31, r18
     f5c:	c9 f7       	brne	.-14     	; 0xf50 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
     f5e:	47 d9       	rcall	.-3442   	; 0x1ee <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     f64:	83 ff       	sbrs	r24, 3
     f66:	10 c0       	rjmp	.+32     	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     f68:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     f6c:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <USB_ControlRequest+0x1>
     f70:	95 30       	cpi	r25, 0x05	; 5
     f72:	09 f4       	brne	.+2      	; 0xf76 <USB_Device_ProcessControlRequest+0x40>
     f74:	d2 c0       	rjmp	.+420    	; 0x111a <USB_Device_ProcessControlRequest+0x1e4>
     f76:	00 f5       	brcc	.+64     	; 0xfb8 <USB_Device_ProcessControlRequest+0x82>
     f78:	91 30       	cpi	r25, 0x01	; 1
     f7a:	09 f4       	brne	.+2      	; 0xf7e <USB_Device_ProcessControlRequest+0x48>
     f7c:	88 c0       	rjmp	.+272    	; 0x108e <USB_Device_ProcessControlRequest+0x158>
     f7e:	08 f4       	brcc	.+2      	; 0xf82 <USB_Device_ProcessControlRequest+0x4c>
     f80:	61 c0       	rjmp	.+194    	; 0x1044 <USB_Device_ProcessControlRequest+0x10e>
     f82:	93 30       	cpi	r25, 0x03	; 3
     f84:	09 f4       	brne	.+2      	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
     f86:	83 c0       	rjmp	.+262    	; 0x108e <USB_Device_ProcessControlRequest+0x158>
     f88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     f8c:	83 ff       	sbrs	r24, 3
     f8e:	0a c0       	rjmp	.+20     	; 0xfa4 <USB_Device_ProcessControlRequest+0x6e>
				UEINTX &= ~(1 << RXSTPI);
     f90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f94:	87 7f       	andi	r24, 0xF7	; 247
     f96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
     f9a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     f9e:	80 62       	ori	r24, 0x20	; 32
     fa0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     fa4:	aa 96       	adiw	r28, 0x2a	; 42
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
     fb8:	98 30       	cpi	r25, 0x08	; 8
     fba:	09 f4       	brne	.+2      	; 0xfbe <USB_Device_ProcessControlRequest+0x88>
     fbc:	e5 c0       	rjmp	.+458    	; 0x1188 <USB_Device_ProcessControlRequest+0x252>
     fbe:	99 30       	cpi	r25, 0x09	; 9
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <USB_Device_ProcessControlRequest+0x8e>
     fc2:	ef c0       	rjmp	.+478    	; 0x11a2 <USB_Device_ProcessControlRequest+0x26c>
     fc4:	96 30       	cpi	r25, 0x06	; 6
     fc6:	01 f7       	brne	.-64     	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     fc8:	80 58       	subi	r24, 0x80	; 128
     fca:	82 30       	cpi	r24, 0x02	; 2
     fcc:	e8 f6       	brcc	.-70     	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     fce:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <USB_ControlRequest+0x2>
     fd2:	90 91 84 02 	lds	r25, 0x0284	; 0x800284 <USB_ControlRequest+0x3>
     fd6:	8c 3d       	cpi	r24, 0xDC	; 220
     fd8:	23 e0       	ldi	r18, 0x03	; 3
     fda:	92 07       	cpc	r25, r18
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <USB_Device_ProcessControlRequest+0xaa>
     fde:	c1 c0       	rjmp	.+386    	; 0x1162 <USB_Device_ProcessControlRequest+0x22c>
	SignatureDescriptor.Header.Type = DTYPE_String;
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     fe4:	8a e2       	ldi	r24, 0x2A	; 42
     fe6:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     fe8:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     fea:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     fec:	de 01       	movw	r26, r28
     fee:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     ff0:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     ff2:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     ff4:	51 e2       	ldi	r21, 0x21	; 33
     ff6:	e3 2f       	mov	r30, r19
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     ffe:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1000:	20 ff       	sbrs	r18, 0
    1002:	03 c0       	rjmp	.+6      	; 0x100a <USB_Device_ProcessControlRequest+0xd4>
					{
						SerialByte >>= 4;
    1004:	e2 95       	swap	r30
    1006:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1008:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    100a:	ef 70       	andi	r30, 0x0F	; 15
    100c:	8e 2f       	mov	r24, r30
    100e:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1010:	ea 30       	cpi	r30, 0x0A	; 10
    1012:	08 f4       	brcc	.+2      	; 0x1016 <USB_Device_ProcessControlRequest+0xe0>
    1014:	a4 c0       	rjmp	.+328    	; 0x115e <USB_Device_ProcessControlRequest+0x228>
    1016:	c7 96       	adiw	r24, 0x37	; 55
    1018:	8d 93       	st	X+, r24
    101a:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	24 31       	cpi	r18, 0x14	; 20
    1020:	51 f7       	brne	.-44     	; 0xff6 <USB_Device_ProcessControlRequest+0xc0>
				SREG = GlobalIntState;
    1022:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    1024:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1028:	87 7f       	andi	r24, 0xF7	; 247
    102a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    102e:	6a e2       	ldi	r22, 0x2A	; 42
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	ce 01       	movw	r24, r28
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	dd dc       	rcall	.-1606   	; 0x9f2 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1038:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    103c:	8b 77       	andi	r24, 0x7B	; 123
    103e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1042:	a2 cf       	rjmp	.-188    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1044:	80 38       	cpi	r24, 0x80	; 128
    1046:	81 f0       	breq	.+32     	; 0x1068 <USB_Device_ProcessControlRequest+0x132>
    1048:	82 38       	cpi	r24, 0x82	; 130
    104a:	09 f0       	breq	.+2      	; 0x104e <USB_Device_ProcessControlRequest+0x118>
    104c:	9d cf       	rjmp	.-198    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    104e:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <USB_ControlRequest+0x4>
    1052:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1054:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1058:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    105c:	85 fb       	bst	r24, 5
    105e:	88 27       	eor	r24, r24
    1060:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1062:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1066:	06 c0       	rjmp	.+12     	; 0x1074 <USB_Device_ProcessControlRequest+0x13e>
	uint8_t CurrentStatus = 0;
    1068:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    106c:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <USB_Device_RemoteWakeupEnabled>
    1070:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1072:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    1074:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1078:	97 7f       	andi	r25, 0xF7	; 247
    107a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    107e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    1082:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1086:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    108a:	8e 77       	andi	r24, 0x7E	; 126
    108c:	2f c0       	rjmp	.+94     	; 0x10ec <USB_Device_ProcessControlRequest+0x1b6>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    108e:	28 2f       	mov	r18, r24
    1090:	2d 7f       	andi	r18, 0xFD	; 253
    1092:	09 f0       	breq	.+2      	; 0x1096 <USB_Device_ProcessControlRequest+0x160>
    1094:	79 cf       	rjmp	.-270    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1096:	88 23       	and	r24, r24
    1098:	d1 f0       	breq	.+52     	; 0x10ce <USB_Device_ProcessControlRequest+0x198>
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	09 f0       	breq	.+2      	; 0x10a0 <USB_Device_ProcessControlRequest+0x16a>
    109e:	74 cf       	rjmp	.-280    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    10a0:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <USB_ControlRequest+0x2>
    10a4:	81 11       	cpse	r24, r1
    10a6:	1d c0       	rjmp	.+58     	; 0x10e2 <USB_Device_ProcessControlRequest+0x1ac>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    10a8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <USB_ControlRequest+0x4>
    10ac:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <USB_Device_ProcessControlRequest+0x17c>
    10b0:	6b cf       	rjmp	.-298    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10b2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    10b6:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    10ba:	20 ff       	sbrs	r18, 0
    10bc:	12 c0       	rjmp	.+36     	; 0x10e2 <USB_Device_ProcessControlRequest+0x1ac>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    10be:	93 30       	cpi	r25, 0x03	; 3
    10c0:	c9 f4       	brne	.+50     	; 0x10f4 <USB_Device_ProcessControlRequest+0x1be>
				UECONX |= (1 << STALLRQ);
    10c2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    10c6:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    10c8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    10cc:	0a c0       	rjmp	.+20     	; 0x10e2 <USB_Device_ProcessControlRequest+0x1ac>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    10ce:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <USB_ControlRequest+0x2>
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <USB_Device_ProcessControlRequest+0x1a2>
    10d6:	58 cf       	rjmp	.-336    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    10d8:	93 30       	cpi	r25, 0x03	; 3
    10da:	09 f0       	breq	.+2      	; 0x10de <USB_Device_ProcessControlRequest+0x1a8>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    10e2:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    10e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ea:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    10f0:	70 dd       	rcall	.-1312   	; 0xbd2 <Endpoint_ClearStatusStage>
    10f2:	4a cf       	rjmp	.-364    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
				UECONX |= (1 << STALLRQC);
    10f4:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    10f8:	90 61       	ori	r25, 0x10	; 16
    10fa:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    10fe:	21 e0       	ldi	r18, 0x01	; 1
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <USB_Device_ProcessControlRequest+0x1d0>
    1104:	22 0f       	add	r18, r18
    1106:	8a 95       	dec	r24
    1108:	ea f7       	brpl	.-6      	; 0x1104 <USB_Device_ProcessControlRequest+0x1ce>
    110a:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    110e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    1112:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1116:	88 60       	ori	r24, 0x08	; 8
    1118:	d7 cf       	rjmp	.-82     	; 0x10c8 <USB_Device_ProcessControlRequest+0x192>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    111a:	81 11       	cpse	r24, r1
    111c:	35 cf       	rjmp	.-406    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    111e:	10 91 83 02 	lds	r17, 0x0283	; 0x800283 <USB_ControlRequest+0x2>
    1122:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1124:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1128:	80 78       	andi	r24, 0x80	; 128
    112a:	81 2b       	or	r24, r17
    112c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    1130:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1134:	87 7f       	andi	r24, 0xF7	; 247
    1136:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    113a:	4b dd       	rcall	.-1386   	; 0xbd2 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    113c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    1140:	80 ff       	sbrs	r24, 0
    1142:	fc cf       	rjmp	.-8      	; 0x113c <USB_Device_ProcessControlRequest+0x206>
				UDADDR |= (1 << ADDEN);
    1144:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1148:	80 68       	ori	r24, 0x80	; 128
    114a:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    114e:	11 11       	cpse	r17, r1
    1150:	04 c0       	rjmp	.+8      	; 0x115a <USB_Device_ProcessControlRequest+0x224>
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <USB_DeviceState>
    1158:	17 cf       	rjmp	.-466    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	fb cf       	rjmp	.-10     	; 0x1154 <USB_Device_ProcessControlRequest+0x21e>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    115e:	c0 96       	adiw	r24, 0x30	; 48
    1160:	5b cf       	rjmp	.-330    	; 0x1018 <USB_Device_ProcessControlRequest+0xe2>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1162:	ae 01       	movw	r20, r28
    1164:	4f 5f       	subi	r20, 0xFF	; 255
    1166:	5f 4f       	sbci	r21, 0xFF	; 255
    1168:	60 91 85 02 	lds	r22, 0x0285	; 0x800285 <USB_ControlRequest+0x4>
    116c:	69 d9       	rcall	.-3374   	; 0x440 <CALLBACK_USB_GetDescriptor>
    116e:	bc 01       	movw	r22, r24
    1170:	89 2b       	or	r24, r25
    1172:	09 f4       	brne	.+2      	; 0x1176 <USB_Device_ProcessControlRequest+0x240>
    1174:	09 cf       	rjmp	.-494    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
    1176:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    117a:	97 7f       	andi	r25, 0xF7	; 247
    117c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	9a 81       	ldd	r25, Y+2	; 0x02
    1184:	93 dc       	rcall	.-1754   	; 0xaac <Endpoint_Write_Control_PStream_LE>
    1186:	58 cf       	rjmp	.-336    	; 0x1038 <USB_Device_ProcessControlRequest+0x102>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1188:	80 38       	cpi	r24, 0x80	; 128
    118a:	09 f0       	breq	.+2      	; 0x118e <USB_Device_ProcessControlRequest+0x258>
    118c:	fd ce       	rjmp	.-518    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
    118e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1192:	87 7f       	andi	r24, 0xF7	; 247
    1194:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1198:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    119c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    11a0:	72 cf       	rjmp	.-284    	; 0x1086 <USB_Device_ProcessControlRequest+0x150>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    11a2:	81 11       	cpse	r24, r1
    11a4:	f1 ce       	rjmp	.-542    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    11a6:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <USB_ControlRequest+0x2>
    11aa:	92 30       	cpi	r25, 0x02	; 2
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <USB_Device_ProcessControlRequest+0x27a>
    11ae:	ec ce       	rjmp	.-552    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
    11b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11b4:	87 7f       	andi	r24, 0xF7	; 247
    11b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    11ba:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    11be:	09 dd       	rcall	.-1518   	; 0xbd2 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    11c0:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <USB_Device_ConfigurationNumber>
    11c4:	88 23       	and	r24, r24
    11c6:	11 f0       	breq	.+4      	; 0x11cc <USB_Device_ProcessControlRequest+0x296>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    11c8:	84 e0       	ldi	r24, 0x04	; 4
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <USB_Device_ProcessControlRequest+0x2a0>
				return (UDADDR & (1 << ADDEN));
    11cc:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    11d0:	87 fd       	sbrc	r24, 7
    11d2:	fa cf       	rjmp	.-12     	; 0x11c8 <USB_Device_ProcessControlRequest+0x292>
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    11da:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <EVENT_USB_Device_ConfigurationChanged>
    11de:	d4 ce       	rjmp	.-600    	; 0xf88 <USB_Device_ProcessControlRequest+0x52>

000011e0 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    11e0:	08 95       	ret

000011e2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    11e2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    11e4:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <USB_DeviceState>
    11e8:	88 23       	and	r24, r24
    11ea:	91 f0       	breq	.+36     	; 0x1210 <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11ec:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    11f0:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11f2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    11f6:	80 fd       	sbrc	r24, 0
    11f8:	0d c0       	rjmp	.+26     	; 0x1214 <USB_USBTask+0x32>
    11fa:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11fc:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11fe:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1202:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1206:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1208:	96 de       	rcall	.-724    	; 0xf36 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    120a:	cf 70       	andi	r28, 0x0F	; 15
    120c:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    1210:	cf 91       	pop	r28
    1212:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1214:	80 e8       	ldi	r24, 0x80	; 128
    1216:	f2 cf       	rjmp	.-28     	; 0x11fc <USB_USBTask+0x1a>

00001218 <_exit>:
    1218:	f8 94       	cli

0000121a <__stop_program>:
    121a:	ff cf       	rjmp	.-2      	; 0x121a <__stop_program>
