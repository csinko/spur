
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000d22  00000db6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002d  00800112  00800112  00000dc8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056f5  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b98  00000000  00000000  00006771  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f6e  00000000  00000000  00008309  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000076c  00000000  00000000  0000b278  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002140  00000000  00000000  0000b9e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003637  00000000  00000000  0000db24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a0  00000000  00000000  0001115b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	95 c0       	rjmp	.+298    	; 0x12c <__ctors_end>
   2:	00 00       	nop
   4:	ae c0       	rjmp	.+348    	; 0x162 <__bad_interrupt>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__bad_interrupt>
   a:	00 00       	nop
   c:	aa c0       	rjmp	.+340    	; 0x162 <__bad_interrupt>
   e:	00 00       	nop
  10:	a8 c0       	rjmp	.+336    	; 0x162 <__bad_interrupt>
  12:	00 00       	nop
  14:	a6 c0       	rjmp	.+332    	; 0x162 <__bad_interrupt>
  16:	00 00       	nop
  18:	a4 c0       	rjmp	.+328    	; 0x162 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a2 c0       	rjmp	.+324    	; 0x162 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a0 c0       	rjmp	.+320    	; 0x162 <__bad_interrupt>
  22:	00 00       	nop
  24:	9e c0       	rjmp	.+316    	; 0x162 <__bad_interrupt>
  26:	00 00       	nop
  28:	03 c4       	rjmp	.+2054   	; 0x830 <__vector_10>
  2a:	00 00       	nop
  2c:	cd c4       	rjmp	.+2458   	; 0x9c8 <__vector_11>
  2e:	00 00       	nop
  30:	98 c0       	rjmp	.+304    	; 0x162 <__bad_interrupt>
  32:	00 00       	nop
  34:	96 c0       	rjmp	.+300    	; 0x162 <__bad_interrupt>
  36:	00 00       	nop
  38:	94 c0       	rjmp	.+296    	; 0x162 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	92 c0       	rjmp	.+292    	; 0x162 <__bad_interrupt>
  3e:	00 00       	nop
  40:	90 c0       	rjmp	.+288    	; 0x162 <__bad_interrupt>
  42:	00 00       	nop
  44:	8e c0       	rjmp	.+284    	; 0x162 <__bad_interrupt>
  46:	00 00       	nop
  48:	8c c0       	rjmp	.+280    	; 0x162 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	8a c0       	rjmp	.+276    	; 0x162 <__bad_interrupt>
  4e:	00 00       	nop
  50:	88 c0       	rjmp	.+272    	; 0x162 <__bad_interrupt>
  52:	00 00       	nop
  54:	86 c0       	rjmp	.+268    	; 0x162 <__bad_interrupt>
  56:	00 00       	nop
  58:	84 c0       	rjmp	.+264    	; 0x162 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	82 c0       	rjmp	.+260    	; 0x162 <__bad_interrupt>
  5e:	00 00       	nop
  60:	80 c0       	rjmp	.+256    	; 0x162 <__bad_interrupt>
  62:	00 00       	nop
  64:	7e c0       	rjmp	.+252    	; 0x162 <__bad_interrupt>
  66:	00 00       	nop
  68:	7c c0       	rjmp	.+248    	; 0x162 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	7a c0       	rjmp	.+244    	; 0x162 <__bad_interrupt>
  6e:	00 00       	nop
  70:	78 c0       	rjmp	.+240    	; 0x162 <__bad_interrupt>
  72:	00 00       	nop
  74:	76 c0       	rjmp	.+236    	; 0x162 <__bad_interrupt>
  76:	00 00       	nop
  78:	74 c0       	rjmp	.+232    	; 0x162 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	72 c0       	rjmp	.+228    	; 0x162 <__bad_interrupt>
  7e:	00 00       	nop
  80:	70 c0       	rjmp	.+224    	; 0x162 <__bad_interrupt>
  82:	00 00       	nop
  84:	6e c0       	rjmp	.+220    	; 0x162 <__bad_interrupt>
  86:	00 00       	nop
  88:	6c c0       	rjmp	.+216    	; 0x162 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6a c0       	rjmp	.+212    	; 0x162 <__bad_interrupt>
  8e:	00 00       	nop
  90:	68 c0       	rjmp	.+208    	; 0x162 <__bad_interrupt>
  92:	00 00       	nop
  94:	66 c0       	rjmp	.+204    	; 0x162 <__bad_interrupt>
  96:	00 00       	nop
  98:	64 c0       	rjmp	.+200    	; 0x162 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	62 c0       	rjmp	.+196    	; 0x162 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	60 c0       	rjmp	.+192    	; 0x162 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	5e c0       	rjmp	.+188    	; 0x162 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	5c c0       	rjmp	.+184    	; 0x162 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
  bc:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
  cc:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000dc <ManufacturerString>:
  dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
  ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
  f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
  fa:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
 10a:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

0000011a <DeviceDescriptor>:
 11a:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
 12a:	dc 01                                               ..

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf ef       	ldi	r28, 0xFF	; 255
 132:	da e0       	ldi	r29, 0x0A	; 10
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61

00000138 <__do_copy_data>:
 138:	11 e0       	ldi	r17, 0x01	; 1
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	b1 e0       	ldi	r27, 0x01	; 1
 13e:	e2 e2       	ldi	r30, 0x22	; 34
 140:	fd e0       	ldi	r31, 0x0D	; 13
 142:	02 c0       	rjmp	.+4      	; 0x148 <__do_copy_data+0x10>
 144:	05 90       	lpm	r0, Z+
 146:	0d 92       	st	X+, r0
 148:	a2 31       	cpi	r26, 0x12	; 18
 14a:	b1 07       	cpc	r27, r17
 14c:	d9 f7       	brne	.-10     	; 0x144 <__do_copy_data+0xc>

0000014e <__do_clear_bss>:
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	a2 e1       	ldi	r26, 0x12	; 18
 152:	b1 e0       	ldi	r27, 0x01	; 1
 154:	01 c0       	rjmp	.+2      	; 0x158 <.do_clear_bss_start>

00000156 <.do_clear_bss_loop>:
 156:	1d 92       	st	X+, r1

00000158 <.do_clear_bss_start>:
 158:	af 33       	cpi	r26, 0x3F	; 63
 15a:	b2 07       	cpc	r27, r18
 15c:	e1 f7       	brne	.-8      	; 0x156 <.do_clear_bss_loop>
 15e:	43 d1       	rcall	.+646    	; 0x3e6 <main>
 160:	de c5       	rjmp	.+3004   	; 0xd1e <_exit>

00000162 <__bad_interrupt>:
 162:	4e cf       	rjmp	.-356    	; 0x0 <__vectors>

00000164 <LEDs_SetAllLEDs>:
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
 164:	25 b1       	in	r18, 0x05	; 5
 166:	98 2f       	mov	r25, r24
 168:	91 70       	andi	r25, 0x01	; 1
 16a:	90 95       	com	r25
 16c:	21 60       	ori	r18, 0x01	; 1
 16e:	92 23       	and	r25, r18
 170:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
 172:	2b b1       	in	r18, 0x0b	; 11
 174:	98 2f       	mov	r25, r24
 176:	90 72       	andi	r25, 0x20	; 32
 178:	90 95       	com	r25
 17a:	20 62       	ori	r18, 0x20	; 32
 17c:	92 23       	and	r25, r18
 17e:	9b b9       	out	0x0b, r25	; 11
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
 180:	98 b1       	in	r25, 0x08	; 8
 182:	9f 77       	andi	r25, 0x7F	; 127
 184:	80 78       	andi	r24, 0x80	; 128
 186:	89 2b       	or	r24, r25
 188:	88 b9       	out	0x08, r24	; 8
 18a:	08 95       	ret

0000018c <serialBegin>:
unsigned char serialmsg[] = {'T', 'e', 's', 't'};

void serialBegin()
{
	const unsigned int baud = 57600;
	UBRR1 = (F_CPU / 4 / baud - 1) / 2;
 18c:	82 e2       	ldi	r24, 0x22	; 34
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 194:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1A = (1<<U2X1);
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
 19e:	88 e9       	ldi	r24, 0x98	; 152
 1a0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);
 1a4:	8e e0       	ldi	r24, 0x0E	; 14
 1a6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
 1aa:	08 95       	ret

000001ac <serialWrite>:
}

void serialWrite( unsigned char* data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
 1ac:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1b0:	25 ff       	sbrs	r18, 5
 1b2:	fc cf       	rjmp	.-8      	; 0x1ac <serialWrite>
	;
	/* Put data into buffer, sends the data */
	UDR1 = (uint8_t)*data;
 1b4:	fc 01       	movw	r30, r24
 1b6:	80 81       	ld	r24, Z
 1b8:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 1bc:	08 95       	ret

000001be <serialWriteArray>:
}

void serialWriteArray( unsigned char data[], unsigned int len)
{
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
 1c8:	8c 01       	movw	r16, r24
 1ca:	06 0f       	add	r16, r22
 1cc:	17 1f       	adc	r17, r23
	for(int i = 0; i < len; i++)
 1ce:	c0 17       	cp	r28, r16
 1d0:	d1 07       	cpc	r29, r17
 1d2:	29 f4       	brne	.+10     	; 0x1de <serialWriteArray+0x20>
	{
		serialWrite(data + i);
	}
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret
		serialWrite(data + i);
 1de:	ce 01       	movw	r24, r28
 1e0:	e5 df       	rcall	.-54     	; 0x1ac <serialWrite>
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	f4 cf       	rjmp	.-24     	; 0x1ce <serialWriteArray+0x10>

000001e6 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1e6:	84 b7       	in	r24, 0x34	; 52
 1e8:	87 7f       	andi	r24, 0xF7	; 247
 1ea:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	a8 95       	wdr
 1f2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1f6:	88 61       	ori	r24, 0x18	; 24
 1f8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 1fc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
 200:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 20e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
 212:	0f be       	out	0x3f, r0	; 63
				DDRB  |=  LEDS_PORTB_LEDS;
 214:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
 216:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
 218:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
 21a:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
 21c:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
 21e:	47 98       	cbi	0x08, 7	; 8
#endif

	/* Hardware Initialization */
	LEDs_Init();
	//Dataflash_Init();
	USB_Init();
 220:	ea c2       	rjmp	.+1492   	; 0x7f6 <USB_Init>

00000222 <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 222:	80 ea       	ldi	r24, 0xA0	; 160
 224:	9f df       	rcall	.-194    	; 0x164 <LEDs_SetAllLEDs>

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
 226:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 22a:	08 95       	ret

0000022c <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	9a cf       	rjmp	.-204    	; 0x164 <LEDs_SetAllLEDs>

00000230 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 230:	cf 93       	push	r28
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 232:	42 e3       	ldi	r20, 0x32	; 50
 234:	61 e8       	ldi	r22, 0x81	; 129
 236:	83 e0       	ldi	r24, 0x03	; 3
 238:	1b d2       	rcall	.+1078   	; 0x670 <Endpoint_ConfigureEndpoint_Prv>
 23a:	c8 2f       	mov	r28, r24
 23c:	42 e3       	ldi	r20, 0x32	; 50
 23e:	60 e8       	ldi	r22, 0x80	; 128
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	16 d2       	rcall	.+1068   	; 0x670 <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 244:	88 23       	and	r24, r24
 246:	11 f0       	breq	.+4      	; 0x24c <EVENT_USB_Device_ConfigurationChanged+0x1c>
 248:	c1 11       	cpse	r28, r1
 24a:	03 c0       	rjmp	.+6      	; 0x252 <EVENT_USB_Device_ConfigurationChanged+0x22>
 24c:	81 e8       	ldi	r24, 0x81	; 129
}
 24e:	cf 91       	pop	r28
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 250:	89 cf       	rjmp	.-238    	; 0x164 <LEDs_SetAllLEDs>
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	fc cf       	rjmp	.-8      	; 0x24e <EVENT_USB_Device_ConfigurationChanged+0x1e>

00000256 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
 256:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <USB_ControlRequest+0x1>
 25a:	8e 3f       	cpi	r24, 0xFE	; 254
 25c:	81 f0       	breq	.+32     	; 0x27e <EVENT_USB_Device_ControlRequest+0x28>
 25e:	8f 3f       	cpi	r24, 0xFF	; 255
 260:	f9 f4       	brne	.+62     	; 0x2a0 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 262:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_ControlRequest>
 266:	81 32       	cpi	r24, 0x21	; 33
 268:	d9 f4       	brne	.+54     	; 0x2a0 <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 26a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 26e:	87 7f       	andi	r24, 0xF7	; 247
 270:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 274:	32 d2       	rcall	.+1124   	; 0x6da <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 27c:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 27e:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_ControlRequest>
 282:	81 3a       	cpi	r24, 0xA1	; 161
 284:	69 f4       	brne	.+26     	; 0x2a0 <EVENT_USB_Device_ControlRequest+0x4a>
 286:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 28a:	87 7f       	andi	r24, 0xF7	; 247
 28c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 290:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 294:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 298:	8e 77       	andi	r24, 0x7E	; 126
 29a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 29e:	1d c2       	rjmp	.+1082   	; 0x6da <Endpoint_ClearStatusStage>
 2a0:	08 95       	ret

000002a2 <MassStorage_Task>:

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <MassStorage_Task+0x6>
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 2ac:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_DeviceState>
 2b0:	84 30       	cpi	r24, 0x04	; 4
 2b2:	09 f0       	breq	.+2      	; 0x2b6 <MassStorage_Task+0x14>
 2b4:	87 c0       	rjmp	.+270    	; 0x3c4 <MassStorage_Task+0x122>

	/* Process sent command block from the host if one has been sent */
	if (ReadInCommandBlock())
	{
		/* Indicate busy */
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
 2b6:	80 e2       	ldi	r24, 0x20	; 32
 2b8:	55 df       	rcall	.-342    	; 0x164 <LEDs_SetAllLEDs>

		/* Check direction of command, select Data IN endpoint if data is from the device */
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
 2ba:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <CommandBlock+0xc>
 2be:	87 ff       	sbrs	r24, 7
 2c0:	03 c0       	rjmp	.+6      	; 0x2c8 <MassStorage_Task+0x26>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

		/* Decode the received SCSI command, set returned status code */
		//CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;

		/* Load in the CBW tag into the CSW to link them together */
		CommandStatus.Tag = CommandBlock.Tag;
 2c8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <CommandBlock+0x4>
 2cc:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <CommandBlock+0x5>
 2d0:	a0 91 19 01 	lds	r26, 0x0119	; 0x800119 <CommandBlock+0x6>
 2d4:	b0 91 1a 01 	lds	r27, 0x011A	; 0x80011a <CommandBlock+0x7>
 2d8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <CommandStatus+0x4>
 2dc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <CommandStatus+0x5>
 2e0:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <CommandStatus+0x6>
 2e4:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <CommandStatus+0x7>

		/* Load in the data residue counter into the CSW */
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
 2e8:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <CommandBlock+0x8>
 2ec:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <CommandBlock+0x9>
 2f0:	a0 91 1d 01 	lds	r26, 0x011D	; 0x80011d <CommandBlock+0xa>
 2f4:	b0 91 1e 01 	lds	r27, 0x011E	; 0x80011e <CommandBlock+0xb>
 2f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <CommandStatus+0x8>
 2fc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <CommandStatus+0x9>
 300:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <CommandStatus+0xa>
 304:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <CommandStatus+0xb>

		/* Stall the selected data pipe if command failed (if data is still to be transferred) */
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
 308:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <CommandStatus+0xc>
 30c:	21 30       	cpi	r18, 0x01	; 1
 30e:	49 f4       	brne	.+18     	; 0x322 <MassStorage_Task+0x80>
 310:	89 2b       	or	r24, r25
 312:	8a 2b       	or	r24, r26
 314:	8b 2b       	or	r24, r27
 316:	29 f0       	breq	.+10     	; 0x322 <MassStorage_Task+0x80>
				UECONX |= (1 << STALLRQ);
 318:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 31c:	80 62       	ori	r24, 0x20	; 32
 31e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 322:	84 e0       	ldi	r24, 0x04	; 4
 324:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 328:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
 32c:	85 fd       	sbrc	r24, 5
 32e:	1a c0       	rjmp	.+52     	; 0x364 <MassStorage_Task+0xc2>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 330:	83 e0       	ldi	r24, 0x03	; 3
 332:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 336:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
 33a:	85 fd       	sbrc	r24, 5
 33c:	48 c0       	rjmp	.+144    	; 0x3ce <MassStorage_Task+0x12c>
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
 33e:	1a 82       	std	Y+2, r1	; 0x02
 340:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
 342:	ae 01       	movw	r20, r28
 344:	4f 5f       	subi	r20, 0xFF	; 255
 346:	5f 4f       	sbci	r21, 0xFF	; 255
 348:	6d e0       	ldi	r22, 0x0D	; 13
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	84 e0       	ldi	r24, 0x04	; 4
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	87 d0       	rcall	.+270    	; 0x460 <Endpoint_Write_Stream_LE>
 352:	85 30       	cpi	r24, 0x05	; 5
 354:	09 f4       	brne	.+2      	; 0x358 <MassStorage_Task+0xb6>
 356:	41 c0       	rjmp	.+130    	; 0x3da <MassStorage_Task+0x138>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 358:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 35c:	8e 77       	andi	r24, 0x7E	; 126
 35e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 362:	04 c0       	rjmp	.+8      	; 0x36c <MassStorage_Task+0xca>
		if (IsMassStoreReset)
 364:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 368:	88 23       	and	r24, r24
 36a:	f1 f2       	breq	.-68     	; 0x328 <MassStorage_Task+0x86>
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
 36c:	80 e2       	ldi	r24, 0x20	; 32
 36e:	fa de       	rcall	.-524    	; 0x164 <LEDs_SetAllLEDs>
	if (IsMassStoreReset)
 370:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 374:	88 23       	and	r24, r24
 376:	31 f1       	breq	.+76     	; 0x3c4 <MassStorage_Task+0x122>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 378:	80 e1       	ldi	r24, 0x10	; 16
 37a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 37e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 382:	88 e0       	ldi	r24, 0x08	; 8
 384:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 388:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 38c:	84 e0       	ldi	r24, 0x04	; 4
 38e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
 392:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 396:	80 61       	ori	r24, 0x10	; 16
 398:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
 39c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3a0:	88 60       	ori	r24, 0x08	; 8
 3a2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
 3ac:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3b0:	80 61       	ori	r24, 0x10	; 16
 3b2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
 3b6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 3ba:	88 60       	ori	r24, 0x08	; 8
 3bc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		IsMassStoreReset = false;
 3c0:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
}
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret
		if (IsMassStoreReset)
 3ce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 3d2:	88 23       	and	r24, r24
 3d4:	09 f4       	brne	.+2      	; 0x3d8 <MassStorage_Task+0x136>
 3d6:	af cf       	rjmp	.-162    	; 0x336 <MassStorage_Task+0x94>
 3d8:	c9 cf       	rjmp	.-110    	; 0x36c <MassStorage_Task+0xca>
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
 3da:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 3de:	88 23       	and	r24, r24
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <MassStorage_Task+0x142>
 3e2:	af cf       	rjmp	.-162    	; 0x342 <MassStorage_Task+0xa0>
 3e4:	c3 cf       	rjmp	.-122    	; 0x36c <MassStorage_Task+0xca>

000003e6 <main>:
	SetupHardware();
 3e6:	ff de       	rcall	.-514    	; 0x1e6 <SetupHardware>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	bc de       	rcall	.-648    	; 0x164 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 3ec:	78 94       	sei
	serialBegin();
 3ee:	ce de       	rcall	.-612    	; 0x18c <serialBegin>
		MassStorage_Task();
 3f0:	58 df       	rcall	.-336    	; 0x2a2 <MassStorage_Task>
		USB_USBTask();
 3f2:	7a d4       	rcall	.+2292   	; 0xce8 <USB_USBTask>
		serialWriteArray(serialmsg, 4);
 3f4:	64 e0       	ldi	r22, 0x04	; 4
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	91 e0       	ldi	r25, 0x01	; 1
 3fc:	e0 de       	rcall	.-576    	; 0x1be <serialWriteArray>
 3fe:	f8 cf       	rjmp	.-16     	; 0x3f0 <main+0xa>

00000400 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 400:	29 2f       	mov	r18, r25
 402:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 404:	22 30       	cpi	r18, 0x02	; 2
 406:	31 05       	cpc	r19, r1
 408:	71 f0       	breq	.+28     	; 0x426 <CALLBACK_USB_GetDescriptor+0x26>
 40a:	23 30       	cpi	r18, 0x03	; 3
 40c:	31 05       	cpc	r19, r1
 40e:	81 f0       	breq	.+32     	; 0x430 <CALLBACK_USB_GetDescriptor+0x30>
 410:	21 30       	cpi	r18, 0x01	; 1
 412:	31 05       	cpc	r19, r1
 414:	a1 f4       	brne	.+40     	; 0x43e <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 416:	82 e1       	ldi	r24, 0x12	; 18
 418:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
 41a:	2a e1       	ldi	r18, 0x1A	; 26
 41c:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
 41e:	fa 01       	movw	r30, r20
 420:	31 83       	std	Z+1, r19	; 0x01
 422:	20 83       	st	Z, r18
	return Size;
}
 424:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
 426:	80 e2       	ldi	r24, 0x20	; 32
 428:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
 42a:	2a ef       	ldi	r18, 0xFA	; 250
 42c:	30 e0       	ldi	r19, 0x00	; 0
			break;
 42e:	f7 cf       	rjmp	.-18     	; 0x41e <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
 430:	99 27       	eor	r25, r25
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	91 05       	cpc	r25, r1
 436:	71 f0       	breq	.+28     	; 0x454 <CALLBACK_USB_GetDescriptor+0x54>
 438:	38 f0       	brcs	.+14     	; 0x448 <CALLBACK_USB_GetDescriptor+0x48>
 43a:	02 97       	sbiw	r24, 0x02	; 2
 43c:	71 f0       	breq	.+28     	; 0x45a <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
	const void* Address = NULL;
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	eb cf       	rjmp	.-42     	; 0x41e <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 448:	e6 ef       	ldi	r30, 0xF6	; 246
 44a:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
 44c:	84 91       	lpm	r24, Z
 44e:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
 450:	9f 01       	movw	r18, r30
					break;
 452:	e5 cf       	rjmp	.-54     	; 0x41e <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 454:	ec ed       	ldi	r30, 0xDC	; 220
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	f9 cf       	rjmp	.-14     	; 0x44c <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
 45a:	ec ea       	ldi	r30, 0xAC	; 172
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	f6 cf       	rjmp	.-20     	; 0x44c <CALLBACK_USB_GetDescriptor+0x4c>

00000460 <Endpoint_Write_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 460:	af 92       	push	r10
 462:	bf 92       	push	r11
 464:	df 92       	push	r13
 466:	ef 92       	push	r14
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	ec 01       	movw	r28, r24
 474:	8b 01       	movw	r16, r22
 476:	7a 01       	movw	r14, r20
 478:	4f d1       	rcall	.+670    	; 0x718 <Endpoint_WaitUntilReady>
 47a:	d8 2e       	mov	r13, r24
 47c:	81 11       	cpse	r24, r1
 47e:	24 c0       	rjmp	.+72     	; 0x4c8 <Endpoint_Write_Stream_LE+0x68>
 480:	e1 14       	cp	r14, r1
 482:	f1 04       	cpc	r15, r1
 484:	39 f0       	breq	.+14     	; 0x494 <Endpoint_Write_Stream_LE+0x34>
 486:	f7 01       	movw	r30, r14
 488:	80 81       	ld	r24, Z
 48a:	91 81       	ldd	r25, Z+1	; 0x01
 48c:	08 1b       	sub	r16, r24
 48e:	19 0b       	sbc	r17, r25
 490:	c8 0f       	add	r28, r24
 492:	d9 1f       	adc	r29, r25
 494:	a1 2c       	mov	r10, r1
 496:	b1 2c       	mov	r11, r1
 498:	01 15       	cp	r16, r1
 49a:	11 05       	cpc	r17, r1
 49c:	a9 f0       	breq	.+42     	; 0x4c8 <Endpoint_Write_Stream_LE+0x68>
 49e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4a2:	85 fd       	sbrc	r24, 5
 4a4:	21 c0       	rjmp	.+66     	; 0x4e8 <Endpoint_Write_Stream_LE+0x88>
 4a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4aa:	8e 77       	andi	r24, 0x7E	; 126
 4ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 4b0:	e1 14       	cp	r14, r1
 4b2:	f1 04       	cpc	r15, r1
 4b4:	a1 f0       	breq	.+40     	; 0x4de <Endpoint_Write_Stream_LE+0x7e>
 4b6:	f7 01       	movw	r30, r14
 4b8:	80 81       	ld	r24, Z
 4ba:	91 81       	ldd	r25, Z+1	; 0x01
 4bc:	a8 0e       	add	r10, r24
 4be:	b9 1e       	adc	r11, r25
 4c0:	b1 82       	std	Z+1, r11	; 0x01
 4c2:	a0 82       	st	Z, r10
 4c4:	85 e0       	ldi	r24, 0x05	; 5
 4c6:	d8 2e       	mov	r13, r24
 4c8:	8d 2d       	mov	r24, r13
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	bf 90       	pop	r11
 4da:	af 90       	pop	r10
 4dc:	08 95       	ret
 4de:	1c d1       	rcall	.+568    	; 0x718 <Endpoint_WaitUntilReady>
 4e0:	88 23       	and	r24, r24
 4e2:	d1 f2       	breq	.-76     	; 0x498 <Endpoint_Write_Stream_LE+0x38>
 4e4:	d8 2e       	mov	r13, r24
 4e6:	f0 cf       	rjmp	.-32     	; 0x4c8 <Endpoint_Write_Stream_LE+0x68>
 4e8:	89 91       	ld	r24, Y+
 4ea:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 4ee:	01 50       	subi	r16, 0x01	; 1
 4f0:	11 09       	sbc	r17, r1
 4f2:	ff ef       	ldi	r31, 0xFF	; 255
 4f4:	af 1a       	sub	r10, r31
 4f6:	bf 0a       	sbc	r11, r31
 4f8:	cf cf       	rjmp	.-98     	; 0x498 <Endpoint_Write_Stream_LE+0x38>

000004fa <Endpoint_Write_Control_Stream_LE>:
 4fa:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <USB_ControlRequest+0x6>
 4fe:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <USB_ControlRequest+0x7>
 502:	26 17       	cp	r18, r22
 504:	37 07       	cpc	r19, r23
 506:	a8 f0       	brcs	.+42     	; 0x532 <Endpoint_Write_Control_Stream_LE+0x38>
 508:	61 15       	cp	r22, r1
 50a:	71 05       	cpc	r23, r1
 50c:	29 f4       	brne	.+10     	; 0x518 <Endpoint_Write_Control_Stream_LE+0x1e>
 50e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 512:	2e 77       	andi	r18, 0x7E	; 126
 514:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 518:	fc 01       	movw	r30, r24
 51a:	20 e0       	ldi	r18, 0x00	; 0
 51c:	61 15       	cp	r22, r1
 51e:	71 05       	cpc	r23, r1
 520:	51 f4       	brne	.+20     	; 0x536 <Endpoint_Write_Control_Stream_LE+0x3c>
 522:	21 11       	cpse	r18, r1
 524:	08 c0       	rjmp	.+16     	; 0x536 <Endpoint_Write_Control_Stream_LE+0x3c>
 526:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 52a:	82 ff       	sbrs	r24, 2
 52c:	33 c0       	rjmp	.+102    	; 0x594 <Endpoint_Write_Control_Stream_LE+0x9a>
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
 532:	b9 01       	movw	r22, r18
 534:	f1 cf       	rjmp	.-30     	; 0x518 <Endpoint_Write_Control_Stream_LE+0x1e>
 536:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_DeviceState>
 53a:	88 23       	and	r24, r24
 53c:	b9 f1       	breq	.+110    	; 0x5ac <Endpoint_Write_Control_Stream_LE+0xb2>
 53e:	85 30       	cpi	r24, 0x05	; 5
 540:	b9 f1       	breq	.+110    	; 0x5b0 <Endpoint_Write_Control_Stream_LE+0xb6>
 542:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 546:	83 fd       	sbrc	r24, 3
 548:	2f c0       	rjmp	.+94     	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0xae>
 54a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 54e:	82 fd       	sbrc	r24, 2
 550:	ea cf       	rjmp	.-44     	; 0x526 <Endpoint_Write_Control_Stream_LE+0x2c>
 552:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 556:	80 ff       	sbrs	r24, 0
 558:	e1 cf       	rjmp	.-62     	; 0x51c <Endpoint_Write_Control_Stream_LE+0x22>
 55a:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 55e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	92 2b       	or	r25, r18
 566:	61 15       	cp	r22, r1
 568:	71 05       	cpc	r23, r1
 56a:	19 f0       	breq	.+6      	; 0x572 <Endpoint_Write_Control_Stream_LE+0x78>
 56c:	88 30       	cpi	r24, 0x08	; 8
 56e:	91 05       	cpc	r25, r1
 570:	50 f0       	brcs	.+20     	; 0x586 <Endpoint_Write_Control_Stream_LE+0x8c>
 572:	21 e0       	ldi	r18, 0x01	; 1
 574:	08 97       	sbiw	r24, 0x08	; 8
 576:	09 f0       	breq	.+2      	; 0x57a <Endpoint_Write_Control_Stream_LE+0x80>
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 57e:	8e 77       	andi	r24, 0x7E	; 126
 580:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 584:	cb cf       	rjmp	.-106    	; 0x51c <Endpoint_Write_Control_Stream_LE+0x22>
 586:	21 91       	ld	r18, Z+
 588:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 58c:	61 50       	subi	r22, 0x01	; 1
 58e:	71 09       	sbc	r23, r1
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	e9 cf       	rjmp	.-46     	; 0x566 <Endpoint_Write_Control_Stream_LE+0x6c>
 594:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_DeviceState>
 598:	88 23       	and	r24, r24
 59a:	41 f0       	breq	.+16     	; 0x5ac <Endpoint_Write_Control_Stream_LE+0xb2>
 59c:	85 30       	cpi	r24, 0x05	; 5
 59e:	41 f0       	breq	.+16     	; 0x5b0 <Endpoint_Write_Control_Stream_LE+0xb6>
 5a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5a4:	83 ff       	sbrs	r24, 3
 5a6:	bf cf       	rjmp	.-130    	; 0x526 <Endpoint_Write_Control_Stream_LE+0x2c>
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	08 95       	ret
 5ac:	82 e0       	ldi	r24, 0x02	; 2
 5ae:	08 95       	ret
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	08 95       	ret

000005b4 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 5b4:	20 91 3d 01 	lds	r18, 0x013D	; 0x80013d <USB_ControlRequest+0x6>
 5b8:	30 91 3e 01 	lds	r19, 0x013E	; 0x80013e <USB_ControlRequest+0x7>
 5bc:	26 17       	cp	r18, r22
 5be:	37 07       	cpc	r19, r23
 5c0:	a8 f0       	brcs	.+42     	; 0x5ec <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5c2:	61 15       	cp	r22, r1
 5c4:	71 05       	cpc	r23, r1
 5c6:	29 f4       	brne	.+10     	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5c8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5cc:	2e 77       	andi	r18, 0x7E	; 126
 5ce:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 5d2:	fc 01       	movw	r30, r24
 5d4:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 5d6:	61 15       	cp	r22, r1
 5d8:	71 05       	cpc	r23, r1
 5da:	51 f4       	brne	.+20     	; 0x5f0 <Endpoint_Write_Control_PStream_LE+0x3c>
 5dc:	21 11       	cpse	r18, r1
 5de:	08 c0       	rjmp	.+16     	; 0x5f0 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 5e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 5e4:	82 ff       	sbrs	r24, 2
 5e6:	34 c0       	rjmp	.+104    	; 0x650 <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	08 95       	ret
 5ec:	b9 01       	movw	r22, r18
 5ee:	f1 cf       	rjmp	.-30     	; 0x5d2 <Endpoint_Write_Control_PStream_LE+0x1e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 5f0:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5f4:	88 23       	and	r24, r24
 5f6:	c1 f1       	breq	.+112    	; 0x668 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5f8:	85 30       	cpi	r24, 0x05	; 5
 5fa:	c1 f1       	breq	.+112    	; 0x66c <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 5fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
 600:	83 fd       	sbrc	r24, 3
 602:	30 c0       	rjmp	.+96     	; 0x664 <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 604:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
 608:	82 fd       	sbrc	r24, 2
 60a:	ea cf       	rjmp	.-44     	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 60c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
 610:	80 ff       	sbrs	r24, 0
 612:	e1 cf       	rjmp	.-62     	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 614:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
 618:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	92 2b       	or	r25, r18
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 620:	61 15       	cp	r22, r1
 622:	71 05       	cpc	r23, r1
 624:	19 f0       	breq	.+6      	; 0x62c <Endpoint_Write_Control_PStream_LE+0x78>
 626:	88 30       	cpi	r24, 0x08	; 8
 628:	91 05       	cpc	r25, r1
 62a:	50 f0       	brcs	.+20     	; 0x640 <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 62c:	21 e0       	ldi	r18, 0x01	; 1
 62e:	08 97       	sbiw	r24, 0x08	; 8
 630:	09 f0       	breq	.+2      	; 0x634 <Endpoint_Write_Control_PStream_LE+0x80>
 632:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 634:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 638:	8e 77       	andi	r24, 0x7E	; 126
 63a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 63e:	cb cf       	rjmp	.-106    	; 0x5d6 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
 640:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 642:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 646:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 648:	61 50       	subi	r22, 0x01	; 1
 64a:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 64c:	01 96       	adiw	r24, 0x01	; 1
 64e:	e8 cf       	rjmp	.-48     	; 0x620 <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 650:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 654:	88 23       	and	r24, r24
 656:	41 f0       	breq	.+16     	; 0x668 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 658:	85 30       	cpi	r24, 0x05	; 5
 65a:	41 f0       	breq	.+16     	; 0x66c <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 65c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
 660:	83 ff       	sbrs	r24, 3
 662:	be cf       	rjmp	.-132    	; 0x5e0 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
 664:	81 e0       	ldi	r24, 0x01	; 1
}
 666:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 668:	82 e0       	ldi	r24, 0x02	; 2
 66a:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 66c:	83 e0       	ldi	r24, 0x03	; 3
 66e:	08 95       	ret

00000670 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 670:	98 2f       	mov	r25, r24
 672:	97 30       	cpi	r25, 0x07	; 7
 674:	28 f0       	brcs	.+10     	; 0x680 <Endpoint_ConfigureEndpoint_Prv+0x10>
 676:	8f 70       	andi	r24, 0x0F	; 15
 678:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	08 95       	ret
 680:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 684:	98 17       	cp	r25, r24
 686:	51 f0       	breq	.+20     	; 0x69c <Endpoint_ConfigureEndpoint_Prv+0x2c>
 688:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 68c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 690:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 694:	21 fd       	sbrc	r18, 1
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <Endpoint_ConfigureEndpoint_Prv+0x34>
 698:	9f 5f       	subi	r25, 0xFF	; 255
 69a:	eb cf       	rjmp	.-42     	; 0x672 <Endpoint_ConfigureEndpoint_Prv+0x2>
 69c:	24 2f       	mov	r18, r20
 69e:	76 2f       	mov	r23, r22
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	f8 cf       	rjmp	.-16     	; 0x694 <Endpoint_ConfigureEndpoint_Prv+0x24>
 6a4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 6a8:	3e 7f       	andi	r19, 0xFE	; 254
 6aa:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 6ae:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 6b2:	3d 7f       	andi	r19, 0xFD	; 253
 6b4:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 6b8:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 6bc:	31 60       	ori	r19, 0x01	; 1
 6be:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 6c2:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 6c6:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 6ca:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 6ce:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 6d2:	27 fd       	sbrc	r18, 7
 6d4:	e1 cf       	rjmp	.-62     	; 0x698 <Endpoint_ConfigureEndpoint_Prv+0x28>
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	08 95       	ret

000006da <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 6da:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_ControlRequest>
 6de:	87 ff       	sbrs	r24, 7
 6e0:	13 c0       	rjmp	.+38     	; 0x708 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 6e6:	82 ff       	sbrs	r24, 2
 6e8:	06 c0       	rjmp	.+12     	; 0x6f6 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 6ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6ee:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 6f0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 6f4:	04 c0       	rjmp	.+8      	; 0x6fe <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 6f6:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_DeviceState>
 6fa:	81 11       	cpse	r24, r1
 6fc:	f2 cf       	rjmp	.-28     	; 0x6e2 <Endpoint_ClearStatusStage+0x8>
 6fe:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 700:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_DeviceState>
 704:	88 23       	and	r24, r24
 706:	d9 f3       	breq	.-10     	; 0x6fe <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 708:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
 70c:	80 ff       	sbrs	r24, 0
 70e:	f8 cf       	rjmp	.-16     	; 0x700 <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 710:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 714:	8e 77       	andi	r24, 0x7E	; 126
 716:	ec cf       	rjmp	.-40     	; 0x6f0 <Endpoint_ClearStatusStage+0x16>

00000718 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 718:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 71c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 720:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 722:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 726:	90 fd       	sbrc	r25, 0
 728:	20 c0       	rjmp	.+64     	; 0x76a <Endpoint_WaitUntilReady+0x52>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 72a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 72e:	92 fd       	sbrc	r25, 2
 730:	20 c0       	rjmp	.+64     	; 0x772 <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 732:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 736:	99 23       	and	r25, r25
 738:	91 f0       	breq	.+36     	; 0x75e <Endpoint_WaitUntilReady+0x46>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 73a:	95 30       	cpi	r25, 0x05	; 5
 73c:	91 f0       	breq	.+36     	; 0x762 <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 73e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 742:	95 fd       	sbrc	r25, 5
 744:	10 c0       	rjmp	.+32     	; 0x766 <Endpoint_WaitUntilReady+0x4e>
 746:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 74a:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 74e:	42 17       	cp	r20, r18
 750:	53 07       	cpc	r21, r19
 752:	39 f3       	breq	.-50     	; 0x722 <Endpoint_WaitUntilReady+0xa>
 754:	81 50       	subi	r24, 0x01	; 1
 756:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 758:	21 f7       	brne	.-56     	; 0x722 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 75a:	84 e0       	ldi	r24, 0x04	; 4
 75c:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
 762:	83 e0       	ldi	r24, 0x03	; 3
 764:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	08 95       	ret
				return ((UEINTX & (1 << TXINI)) ? true : false);
 76a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
 76e:	90 ff       	sbrs	r25, 0
 770:	e0 cf       	rjmp	.-64     	; 0x732 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	08 95       	ret

00000776 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 776:	0f 93       	push	r16
 778:	1f 93       	push	r17
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 77e:	4b d0       	rcall	.+150    	; 0x816 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 780:	52 d0       	rcall	.+164    	; 0x826 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 782:	c8 ed       	ldi	r28, 0xD8	; 216
 784:	d0 e0       	ldi	r29, 0x00	; 0
 786:	88 81       	ld	r24, Y
 788:	8f 77       	andi	r24, 0x7F	; 127
 78a:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
 78c:	88 81       	ld	r24, Y
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
 792:	88 81       	ld	r24, Y
 794:	8f 7d       	andi	r24, 0xDF	; 223
 796:	88 83       	st	Y, r24
				PLLCSR = 0;
 798:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 79a:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
 79e:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 7a2:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 7a6:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 7aa:	00 ee       	ldi	r16, 0xE0	; 224
 7ac:	10 e0       	ldi	r17, 0x00	; 0
 7ae:	f8 01       	movw	r30, r16
 7b0:	80 81       	ld	r24, Z
 7b2:	8b 7f       	andi	r24, 0xFB	; 251
 7b4:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 7b6:	88 81       	ld	r24, Y
 7b8:	81 60       	ori	r24, 0x01	; 1
 7ba:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
 7bc:	42 e0       	ldi	r20, 0x02	; 2
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	56 df       	rcall	.-340    	; 0x670 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7c4:	e1 ee       	ldi	r30, 0xE1	; 225
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	80 81       	ld	r24, Z
 7ca:	8e 7f       	andi	r24, 0xFE	; 254
 7cc:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
 7ce:	e2 ee       	ldi	r30, 0xE2	; 226
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	81 60       	ori	r24, 0x01	; 1
 7d6:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
 7d8:	80 81       	ld	r24, Z
 7da:	88 60       	ori	r24, 0x08	; 8
 7dc:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
 7de:	f8 01       	movw	r30, r16
 7e0:	80 81       	ld	r24, Z
 7e2:	8e 7f       	andi	r24, 0xFE	; 254
 7e4:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
 7e6:	88 81       	ld	r24, Y
 7e8:	80 61       	ori	r24, 0x10	; 16
 7ea:	88 83       	st	Y, r24
}
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	1f 91       	pop	r17
 7f2:	0f 91       	pop	r16
 7f4:	08 95       	ret

000007f6 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
 7f6:	e8 ed       	ldi	r30, 0xD8	; 216
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	8f 7e       	andi	r24, 0xEF	; 239
 7fe:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
 800:	e7 ed       	ldi	r30, 0xD7	; 215
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	81 60       	ori	r24, 0x01	; 1
 808:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
 80a:	84 e0       	ldi	r24, 0x04	; 4
 80c:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <USB_IsInitialized>
	USB_ResetInterface();
 814:	b0 cf       	rjmp	.-160    	; 0x776 <USB_ResetInterface>

00000816 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 816:	e8 ed       	ldi	r30, 0xD8	; 216
 818:	f0 e0       	ldi	r31, 0x00	; 0
 81a:	80 81       	ld	r24, Z
 81c:	8e 7f       	andi	r24, 0xFE	; 254
 81e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 820:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 824:	08 95       	ret

00000826 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 826:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 82a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 82e:	08 95       	ret

00000830 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 830:	1f 92       	push	r1
 832:	0f 92       	push	r0
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	0f 92       	push	r0
 838:	11 24       	eor	r1, r1
 83a:	2f 93       	push	r18
 83c:	3f 93       	push	r19
 83e:	4f 93       	push	r20
 840:	5f 93       	push	r21
 842:	6f 93       	push	r22
 844:	7f 93       	push	r23
 846:	8f 93       	push	r24
 848:	9f 93       	push	r25
 84a:	af 93       	push	r26
 84c:	bf 93       	push	r27
 84e:	ef 93       	push	r30
 850:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 852:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 856:	82 ff       	sbrs	r24, 2
 858:	0a c0       	rjmp	.+20     	; 0x86e <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
 85a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 85e:	82 ff       	sbrs	r24, 2
 860:	06 c0       	rjmp	.+12     	; 0x86e <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
 862:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 866:	8b 7f       	andi	r24, 0xFB	; 251
 868:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 86c:	3c d2       	rcall	.+1144   	; 0xce6 <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
 86e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 872:	80 ff       	sbrs	r24, 0
 874:	18 c0       	rjmp	.+48     	; 0x8a6 <__vector_10+0x76>
						return (USBCON & (1 << VBUSTE));
 876:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 87a:	80 ff       	sbrs	r24, 0
 87c:	14 c0       	rjmp	.+40     	; 0x8a6 <__vector_10+0x76>
						USBINT &= ~(1 << VBUSTI);
 87e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
 882:	8e 7f       	andi	r24, 0xFE	; 254
 884:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 888:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 88c:	80 ff       	sbrs	r24, 0
 88e:	8f c0       	rjmp	.+286    	; 0x9ae <__vector_10+0x17e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 890:	80 e1       	ldi	r24, 0x10	; 16
 892:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 894:	82 e1       	ldi	r24, 0x12	; 18
 896:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 898:	09 b4       	in	r0, 0x29	; 41
 89a:	00 fe       	sbrs	r0, 0
 89c:	fd cf       	rjmp	.-6      	; 0x898 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 8a4:	be dc       	rcall	.-1668   	; 0x222 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
 8a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 8aa:	80 ff       	sbrs	r24, 0
 8ac:	18 c0       	rjmp	.+48     	; 0x8de <__vector_10+0xae>
						return (UDIEN  & (1 << SUSPE));
 8ae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8b2:	80 ff       	sbrs	r24, 0
 8b4:	14 c0       	rjmp	.+40     	; 0x8de <__vector_10+0xae>
						UDIEN  &= ~(1 << SUSPE);
 8b6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8ba:	8e 7f       	andi	r24, 0xFE	; 254
 8bc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
 8c0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8c4:	80 61       	ori	r24, 0x10	; 16
 8c6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 8ca:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 8ce:	80 62       	ori	r24, 0x20	; 32
 8d0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
 8d4:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 8d6:	85 e0       	ldi	r24, 0x05	; 5
 8d8:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 8dc:	04 d2       	rcall	.+1032   	; 0xce6 <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
 8de:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 8e2:	84 ff       	sbrs	r24, 4
 8e4:	28 c0       	rjmp	.+80     	; 0x936 <__vector_10+0x106>
						return (UDIEN  & (1 << WAKEUPE));
 8e6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 8ea:	84 ff       	sbrs	r24, 4
 8ec:	24 c0       	rjmp	.+72     	; 0x936 <__vector_10+0x106>
				PLLCSR = USB_PLL_PSC;
 8ee:	80 e1       	ldi	r24, 0x10	; 16
 8f0:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 8f2:	82 e1       	ldi	r24, 0x12	; 18
 8f4:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 8f6:	09 b4       	in	r0, 0x29	; 41
 8f8:	00 fe       	sbrs	r0, 0
 8fa:	fd cf       	rjmp	.-6      	; 0x8f6 <__vector_10+0xc6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 8fc:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
 900:	8f 7d       	andi	r24, 0xDF	; 223
 902:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
 906:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 90a:	8f 7e       	andi	r24, 0xEF	; 239
 90c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
 910:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 914:	8f 7e       	andi	r24, 0xEF	; 239
 916:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
 91a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 91e:	81 60       	ori	r24, 0x01	; 1
 920:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 924:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_Device_ConfigurationNumber>
 928:	88 23       	and	r24, r24
 92a:	09 f4       	brne	.+2      	; 0x92e <__vector_10+0xfe>
 92c:	45 c0       	rjmp	.+138    	; 0x9b8 <__vector_10+0x188>
		  USB_DeviceState = DEVICE_STATE_Configured;
 92e:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 930:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 934:	d8 d1       	rcall	.+944    	; 0xce6 <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
 936:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 93a:	83 ff       	sbrs	r24, 3
 93c:	27 c0       	rjmp	.+78     	; 0x98c <__vector_10+0x15c>
						return (UDIEN  & (1 << EORSTE));
 93e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 942:	83 ff       	sbrs	r24, 3
 944:	23 c0       	rjmp	.+70     	; 0x98c <__vector_10+0x15c>
						UDINT  &= ~(1 << EORSTI);
 946:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 94a:	87 7f       	andi	r24, 0xF7	; 247
 94c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 950:	82 e0       	ldi	r24, 0x02	; 2
 952:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 956:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
 95a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
 95e:	8e 7f       	andi	r24, 0xFE	; 254
 960:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
 964:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 968:	8e 7f       	andi	r24, 0xFE	; 254
 96a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
 96e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
 972:	80 61       	ori	r24, 0x10	; 16
 974:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 978:	42 e0       	ldi	r20, 0x02	; 2
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	78 de       	rcall	.-784    	; 0x670 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
 980:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 984:	88 60       	ori	r24, 0x08	; 8
 986:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 98a:	ad d1       	rcall	.+858    	; 0xce6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 98c:	ff 91       	pop	r31
 98e:	ef 91       	pop	r30
 990:	bf 91       	pop	r27
 992:	af 91       	pop	r26
 994:	9f 91       	pop	r25
 996:	8f 91       	pop	r24
 998:	7f 91       	pop	r23
 99a:	6f 91       	pop	r22
 99c:	5f 91       	pop	r21
 99e:	4f 91       	pop	r20
 9a0:	3f 91       	pop	r19
 9a2:	2f 91       	pop	r18
 9a4:	0f 90       	pop	r0
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	0f 90       	pop	r0
 9aa:	1f 90       	pop	r1
 9ac:	18 95       	reti
				PLLCSR = 0;
 9ae:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
 9b0:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 9b4:	3b dc       	rcall	.-1930   	; 0x22c <EVENT_USB_Device_Disconnect>
 9b6:	77 cf       	rjmp	.-274    	; 0x8a6 <__vector_10+0x76>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 9b8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 9bc:	87 fd       	sbrc	r24, 7
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__vector_10+0x194>
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	b6 cf       	rjmp	.-148    	; 0x930 <__vector_10+0x100>
 9c4:	83 e0       	ldi	r24, 0x03	; 3
 9c6:	b4 cf       	rjmp	.-152    	; 0x930 <__vector_10+0x100>

000009c8 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 9c8:	1f 92       	push	r1
 9ca:	0f 92       	push	r0
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	0f 92       	push	r0
 9d0:	11 24       	eor	r1, r1
 9d2:	2f 93       	push	r18
 9d4:	3f 93       	push	r19
 9d6:	4f 93       	push	r20
 9d8:	5f 93       	push	r21
 9da:	6f 93       	push	r22
 9dc:	7f 93       	push	r23
 9de:	8f 93       	push	r24
 9e0:	9f 93       	push	r25
 9e2:	af 93       	push	r26
 9e4:	bf 93       	push	r27
 9e6:	cf 93       	push	r28
 9e8:	ef 93       	push	r30
 9ea:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 9ec:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 9f0:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 9f2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9f6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
 9fa:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 9fe:	87 7f       	andi	r24, 0xF7	; 247
 a00:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 a04:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 a06:	1b d0       	rcall	.+54     	; 0xa3e <USB_Device_ProcessControlRequest>
 a08:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
 a0c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 a10:	88 60       	ori	r24, 0x08	; 8
 a12:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
 a16:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 a1a:	ff 91       	pop	r31
 a1c:	ef 91       	pop	r30
 a1e:	cf 91       	pop	r28
 a20:	bf 91       	pop	r27
 a22:	af 91       	pop	r26
 a24:	9f 91       	pop	r25
 a26:	8f 91       	pop	r24
 a28:	7f 91       	pop	r23
 a2a:	6f 91       	pop	r22
 a2c:	5f 91       	pop	r21
 a2e:	4f 91       	pop	r20
 a30:	3f 91       	pop	r19
 a32:	2f 91       	pop	r18
 a34:	0f 90       	pop	r0
 a36:	0f be       	out	0x3f, r0	; 63
 a38:	0f 90       	pop	r0
 a3a:	1f 90       	pop	r1
 a3c:	18 95       	reti

00000a3e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 a3e:	1f 93       	push	r17
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	cd b7       	in	r28, 0x3d	; 61
 a46:	de b7       	in	r29, 0x3e	; 62
 a48:	aa 97       	sbiw	r28, 0x2a	; 42
 a4a:	0f b6       	in	r0, 0x3f	; 63
 a4c:	f8 94       	cli
 a4e:	de bf       	out	0x3e, r29	; 62
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	cd bf       	out	0x3d, r28	; 61
 a54:	e7 e3       	ldi	r30, 0x37	; 55
 a56:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 a58:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 a5c:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 a5e:	21 e0       	ldi	r18, 0x01	; 1
 a60:	ef 33       	cpi	r30, 0x3F	; 63
 a62:	f2 07       	cpc	r31, r18
 a64:	c9 f7       	brne	.-14     	; 0xa58 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
 a66:	f7 db       	rcall	.-2066   	; 0x256 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
 a6c:	83 ff       	sbrs	r24, 3
 a6e:	10 c0       	rjmp	.+32     	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 a70:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 a74:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <USB_ControlRequest+0x1>
 a78:	95 30       	cpi	r25, 0x05	; 5
 a7a:	09 f4       	brne	.+2      	; 0xa7e <USB_Device_ProcessControlRequest+0x40>
 a7c:	d2 c0       	rjmp	.+420    	; 0xc22 <__stack+0x123>
 a7e:	00 f5       	brcc	.+64     	; 0xac0 <USB_Device_ProcessControlRequest+0x82>
 a80:	91 30       	cpi	r25, 0x01	; 1
 a82:	09 f4       	brne	.+2      	; 0xa86 <USB_Device_ProcessControlRequest+0x48>
 a84:	88 c0       	rjmp	.+272    	; 0xb96 <__stack+0x97>
 a86:	08 f4       	brcc	.+2      	; 0xa8a <USB_Device_ProcessControlRequest+0x4c>
 a88:	61 c0       	rjmp	.+194    	; 0xb4c <__stack+0x4d>
 a8a:	93 30       	cpi	r25, 0x03	; 3
 a8c:	09 f4       	brne	.+2      	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
 a8e:	83 c0       	rjmp	.+262    	; 0xb96 <__stack+0x97>
 a90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 a94:	83 ff       	sbrs	r24, 3
 a96:	0a c0       	rjmp	.+20     	; 0xaac <USB_Device_ProcessControlRequest+0x6e>
				UEINTX &= ~(1 << RXSTPI);
 a98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 a9c:	87 7f       	andi	r24, 0xF7	; 247
 a9e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
 aa2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 aa6:	80 62       	ori	r24, 0x20	; 32
 aa8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 aac:	aa 96       	adiw	r28, 0x2a	; 42
 aae:	0f b6       	in	r0, 0x3f	; 63
 ab0:	f8 94       	cli
 ab2:	de bf       	out	0x3e, r29	; 62
 ab4:	0f be       	out	0x3f, r0	; 63
 ab6:	cd bf       	out	0x3d, r28	; 61
 ab8:	df 91       	pop	r29
 aba:	cf 91       	pop	r28
 abc:	1f 91       	pop	r17
 abe:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
 ac0:	98 30       	cpi	r25, 0x08	; 8
 ac2:	09 f4       	brne	.+2      	; 0xac6 <USB_Device_ProcessControlRequest+0x88>
 ac4:	e5 c0       	rjmp	.+458    	; 0xc90 <__stack+0x191>
 ac6:	99 30       	cpi	r25, 0x09	; 9
 ac8:	09 f4       	brne	.+2      	; 0xacc <USB_Device_ProcessControlRequest+0x8e>
 aca:	ef c0       	rjmp	.+478    	; 0xcaa <__stack+0x1ab>
 acc:	96 30       	cpi	r25, 0x06	; 6
 ace:	01 f7       	brne	.-64     	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 ad0:	80 58       	subi	r24, 0x80	; 128
 ad2:	82 30       	cpi	r24, 0x02	; 2
 ad4:	e8 f6       	brcc	.-70     	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 ad6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_ControlRequest+0x2>
 ada:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <USB_ControlRequest+0x3>
 ade:	8c 3d       	cpi	r24, 0xDC	; 220
 ae0:	23 e0       	ldi	r18, 0x03	; 3
 ae2:	92 07       	cpc	r25, r18
 ae4:	09 f0       	breq	.+2      	; 0xae8 <USB_Device_ProcessControlRequest+0xaa>
 ae6:	c1 c0       	rjmp	.+386    	; 0xc6a <__stack+0x16b>
	SignatureDescriptor.Header.Type = DTYPE_String;
 ae8:	83 e0       	ldi	r24, 0x03	; 3
 aea:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 aec:	8a e2       	ldi	r24, 0x2A	; 42
 aee:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 af0:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 af2:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 af4:	de 01       	movw	r26, r28
 af6:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 af8:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 afa:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 afc:	51 e2       	ldi	r21, 0x21	; 33
 afe:	e3 2f       	mov	r30, r19
 b00:	f0 e0       	ldi	r31, 0x00	; 0
 b02:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 b06:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 b08:	20 ff       	sbrs	r18, 0
 b0a:	03 c0       	rjmp	.+6      	; 0xb12 <__stack+0x13>
					{
						SerialByte >>= 4;
 b0c:	e2 95       	swap	r30
 b0e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 b10:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 b12:	ef 70       	andi	r30, 0x0F	; 15
 b14:	8e 2f       	mov	r24, r30
 b16:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 b18:	ea 30       	cpi	r30, 0x0A	; 10
 b1a:	08 f4       	brcc	.+2      	; 0xb1e <__stack+0x1f>
 b1c:	a4 c0       	rjmp	.+328    	; 0xc66 <__stack+0x167>
 b1e:	c7 96       	adiw	r24, 0x37	; 55
 b20:	8d 93       	st	X+, r24
 b22:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 b24:	2f 5f       	subi	r18, 0xFF	; 255
 b26:	24 31       	cpi	r18, 0x14	; 20
 b28:	51 f7       	brne	.-44     	; 0xafe <USB_Device_ProcessControlRequest+0xc0>
				SREG = GlobalIntState;
 b2a:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
 b2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b30:	87 7f       	andi	r24, 0xF7	; 247
 b32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 b36:	6a e2       	ldi	r22, 0x2A	; 42
 b38:	70 e0       	ldi	r23, 0x00	; 0
 b3a:	ce 01       	movw	r24, r28
 b3c:	01 96       	adiw	r24, 0x01	; 1
 b3e:	dd dc       	rcall	.-1606   	; 0x4fa <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b44:	8b 77       	andi	r24, 0x7B	; 123
 b46:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b4a:	a2 cf       	rjmp	.-188    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b4c:	80 38       	cpi	r24, 0x80	; 128
 b4e:	81 f0       	breq	.+32     	; 0xb70 <__stack+0x71>
 b50:	82 38       	cpi	r24, 0x82	; 130
 b52:	09 f0       	breq	.+2      	; 0xb56 <__stack+0x57>
 b54:	9d cf       	rjmp	.-198    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 b56:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <USB_ControlRequest+0x4>
 b5a:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b5c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 b60:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 b64:	85 fb       	bst	r24, 5
 b66:	88 27       	eor	r24, r24
 b68:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b6a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 b6e:	06 c0       	rjmp	.+12     	; 0xb7c <__stack+0x7d>
	uint8_t CurrentStatus = 0;
 b70:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
 b74:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <USB_Device_RemoteWakeupEnabled>
 b78:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 b7a:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
 b7c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b80:	97 7f       	andi	r25, 0xF7	; 247
 b82:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 b86:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
 b8a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 b8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 b92:	8e 77       	andi	r24, 0x7E	; 126
 b94:	2f c0       	rjmp	.+94     	; 0xbf4 <__stack+0xf5>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b96:	28 2f       	mov	r18, r24
 b98:	2d 7f       	andi	r18, 0xFD	; 253
 b9a:	09 f0       	breq	.+2      	; 0xb9e <__stack+0x9f>
 b9c:	79 cf       	rjmp	.-270    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 b9e:	88 23       	and	r24, r24
 ba0:	d1 f0       	breq	.+52     	; 0xbd6 <__stack+0xd7>
 ba2:	82 30       	cpi	r24, 0x02	; 2
 ba4:	09 f0       	breq	.+2      	; 0xba8 <__stack+0xa9>
 ba6:	74 cf       	rjmp	.-280    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 ba8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_ControlRequest+0x2>
 bac:	81 11       	cpse	r24, r1
 bae:	1d c0       	rjmp	.+58     	; 0xbea <__stack+0xeb>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 bb0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <USB_ControlRequest+0x4>
 bb4:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
 bb6:	09 f4       	brne	.+2      	; 0xbba <__stack+0xbb>
 bb8:	6b cf       	rjmp	.-298    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
 bbe:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 bc2:	20 ff       	sbrs	r18, 0
 bc4:	12 c0       	rjmp	.+36     	; 0xbea <__stack+0xeb>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 bc6:	93 30       	cpi	r25, 0x03	; 3
 bc8:	c9 f4       	brne	.+50     	; 0xbfc <__stack+0xfd>
				UECONX |= (1 << STALLRQ);
 bca:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bce:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
 bd0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 bd4:	0a c0       	rjmp	.+20     	; 0xbea <__stack+0xeb>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 bd6:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <USB_ControlRequest+0x2>
 bda:	81 30       	cpi	r24, 0x01	; 1
 bdc:	09 f0       	breq	.+2      	; 0xbe0 <__stack+0xe1>
 bde:	58 cf       	rjmp	.-336    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 be0:	93 30       	cpi	r25, 0x03	; 3
 be2:	09 f0       	breq	.+2      	; 0xbe6 <__stack+0xe7>
 be4:	80 e0       	ldi	r24, 0x00	; 0
 be6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bea:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
 bee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 bf2:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bf4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
 bf8:	70 dd       	rcall	.-1312   	; 0x6da <Endpoint_ClearStatusStage>
 bfa:	4a cf       	rjmp	.-364    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
				UECONX |= (1 << STALLRQC);
 bfc:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c00:	90 61       	ori	r25, 0x10	; 16
 c02:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 c06:	21 e0       	ldi	r18, 0x01	; 1
 c08:	30 e0       	ldi	r19, 0x00	; 0
 c0a:	01 c0       	rjmp	.+2      	; 0xc0e <__stack+0x10f>
 c0c:	22 0f       	add	r18, r18
 c0e:	8a 95       	dec	r24
 c10:	ea f7       	brpl	.-6      	; 0xc0c <__stack+0x10d>
 c12:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
 c16:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
 c1a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
 c1e:	88 60       	ori	r24, 0x08	; 8
 c20:	d7 cf       	rjmp	.-82     	; 0xbd0 <__stack+0xd1>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c22:	81 11       	cpse	r24, r1
 c24:	35 cf       	rjmp	.-406    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 c26:	10 91 39 01 	lds	r17, 0x0139	; 0x800139 <USB_ControlRequest+0x2>
 c2a:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 c2c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c30:	80 78       	andi	r24, 0x80	; 128
 c32:	81 2b       	or	r24, r17
 c34:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
 c38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c3c:	87 7f       	andi	r24, 0xF7	; 247
 c3e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
 c42:	4b dd       	rcall	.-1386   	; 0x6da <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
 c48:	80 ff       	sbrs	r24, 0
 c4a:	fc cf       	rjmp	.-8      	; 0xc44 <__stack+0x145>
				UDADDR |= (1 << ADDEN);
 c4c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 c50:	80 68       	ori	r24, 0x80	; 128
 c52:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 c56:	11 11       	cpse	r17, r1
 c58:	04 c0       	rjmp	.+8      	; 0xc62 <__stack+0x163>
 c5a:	82 e0       	ldi	r24, 0x02	; 2
 c5c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <USB_DeviceState>
 c60:	17 cf       	rjmp	.-466    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
 c62:	83 e0       	ldi	r24, 0x03	; 3
 c64:	fb cf       	rjmp	.-10     	; 0xc5c <__stack+0x15d>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 c66:	c0 96       	adiw	r24, 0x30	; 48
 c68:	5b cf       	rjmp	.-330    	; 0xb20 <__stack+0x21>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 c6a:	ae 01       	movw	r20, r28
 c6c:	4f 5f       	subi	r20, 0xFF	; 255
 c6e:	5f 4f       	sbci	r21, 0xFF	; 255
 c70:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <USB_ControlRequest+0x4>
 c74:	c5 db       	rcall	.-2166   	; 0x400 <CALLBACK_USB_GetDescriptor>
 c76:	bc 01       	movw	r22, r24
 c78:	89 2b       	or	r24, r25
 c7a:	09 f4       	brne	.+2      	; 0xc7e <__stack+0x17f>
 c7c:	09 cf       	rjmp	.-494    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
 c7e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c82:	97 7f       	andi	r25, 0xF7	; 247
 c84:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 c88:	89 81       	ldd	r24, Y+1	; 0x01
 c8a:	9a 81       	ldd	r25, Y+2	; 0x02
 c8c:	93 dc       	rcall	.-1754   	; 0x5b4 <Endpoint_Write_Control_PStream_LE>
 c8e:	58 cf       	rjmp	.-336    	; 0xb40 <__stack+0x41>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 c90:	80 38       	cpi	r24, 0x80	; 128
 c92:	09 f0       	breq	.+2      	; 0xc96 <__stack+0x197>
 c94:	fd ce       	rjmp	.-518    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
 c96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 c9a:	87 7f       	andi	r24, 0xF7	; 247
 c9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 ca0:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
 ca4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
 ca8:	72 cf       	rjmp	.-284    	; 0xb8e <__stack+0x8f>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 caa:	81 11       	cpse	r24, r1
 cac:	f1 ce       	rjmp	.-542    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 cae:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <USB_ControlRequest+0x2>
 cb2:	92 30       	cpi	r25, 0x02	; 2
 cb4:	08 f0       	brcs	.+2      	; 0xcb8 <__stack+0x1b9>
 cb6:	ec ce       	rjmp	.-552    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>
				UEINTX &= ~(1 << RXSTPI);
 cb8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
 cbc:	87 7f       	andi	r24, 0xF7	; 247
 cbe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 cc2:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
 cc6:	09 dd       	rcall	.-1518   	; 0x6da <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
 cc8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <USB_Device_ConfigurationNumber>
 ccc:	88 23       	and	r24, r24
 cce:	11 f0       	breq	.+4      	; 0xcd4 <__stack+0x1d5>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 cd0:	84 e0       	ldi	r24, 0x04	; 4
 cd2:	05 c0       	rjmp	.+10     	; 0xcde <__stack+0x1df>
				return (UDADDR & (1 << ADDEN));
 cd4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
 cd8:	87 fd       	sbrc	r24, 7
 cda:	fa cf       	rjmp	.-12     	; 0xcd0 <__stack+0x1d1>
 cdc:	81 e0       	ldi	r24, 0x01	; 1
 cde:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
 ce2:	a6 da       	rcall	.-2740   	; 0x230 <EVENT_USB_Device_ConfigurationChanged>
 ce4:	d5 ce       	rjmp	.-598    	; 0xa90 <USB_Device_ProcessControlRequest+0x52>

00000ce6 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 ce6:	08 95       	ret

00000ce8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ce8:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 cea:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <USB_DeviceState>
 cee:	88 23       	and	r24, r24
 cf0:	91 f0       	breq	.+36     	; 0xd16 <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 cf2:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
 cf6:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 cf8:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 cfc:	80 fd       	sbrc	r24, 0
 cfe:	0d c0       	rjmp	.+26     	; 0xd1a <USB_USBTask+0x32>
 d00:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 d02:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d04:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d08:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 d0c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 d0e:	97 de       	rcall	.-722    	; 0xa3e <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 d10:	cf 70       	andi	r28, 0x0F	; 15
 d12:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
 d16:	cf 91       	pop	r28
 d18:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 d1a:	80 e8       	ldi	r24, 0x80	; 128
 d1c:	f2 cf       	rjmp	.-28     	; 0xd02 <USB_USBTask+0x1a>

00000d1e <_exit>:
 d1e:	f8 94       	cli

00000d20 <__stop_program>:
 d20:	ff cf       	rjmp	.-2      	; 0xd20 <__stop_program>
