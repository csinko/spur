
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800100  0000172c  000017c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000172c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000236  0080025a  0080025a  0000191a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000192c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  0000196c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007533  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023f4  00000000  00000000  000091b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c90  00000000  00000000  0000b5ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a04  00000000  00000000  0000f23c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002797  00000000  00000000  0000fc40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000469a  00000000  00000000  000123d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000748  00000000  00000000  00016a71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8d c0       	rjmp	.+282    	; 0x11c <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_10>
      2c:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_11>
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop
      98:	5d c0       	rjmp	.+186    	; 0x154 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5b c0       	rjmp	.+182    	; 0x154 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	59 c0       	rjmp	.+178    	; 0x154 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	57 c0       	rjmp	.+174    	; 0x154 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	55 c0       	rjmp	.+170    	; 0x154 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	2c 03 53 00 70 00 75 00 72 00 20 00 4d 00 75 00     ,.S.p.u.r. .M.u.
      bc:	6c 00 74 00 69 00 62 00 6f 00 6f 00 74 00 20 00     l.t.i.b.o.o.t. .
      cc:	44 00 65 00 76 00 69 00 63 00 65 00 00 00           D.e.v.i.c.e...

000000da <ManufacturerString>:
      da:	0a 03 53 00 70 00 75 00 72 00 00 00                 ..S.p.u.r...

000000e6 <LanguageString>:
      e6:	04 03 09 04                                         ....

000000ea <ConfigurationDescriptor>:
      ea:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      fa:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

0000010a <DeviceDescriptor>:
     10a:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     11a:	dc 01                                               ..

0000011c <__ctors_end>:
     11c:	11 24       	eor	r1, r1
     11e:	1f be       	out	0x3f, r1	; 63
     120:	cf ef       	ldi	r28, 0xFF	; 255
     122:	da e0       	ldi	r29, 0x0A	; 10
     124:	de bf       	out	0x3e, r29	; 62
     126:	cd bf       	out	0x3d, r28	; 61

00000128 <__do_copy_data>:
     128:	12 e0       	ldi	r17, 0x02	; 2
     12a:	a0 e0       	ldi	r26, 0x00	; 0
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	ec e2       	ldi	r30, 0x2C	; 44
     130:	f7 e1       	ldi	r31, 0x17	; 23
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x10>
     134:	05 90       	lpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	aa 35       	cpi	r26, 0x5A	; 90
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0xc>

0000013e <__do_clear_bss>:
     13e:	24 e0       	ldi	r18, 0x04	; 4
     140:	aa e5       	ldi	r26, 0x5A	; 90
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a0 39       	cpi	r26, 0x90	; 144
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	70 d1       	rcall	.+736    	; 0x430 <main>
     150:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <LEDs_SetAllLEDs>:
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
     156:	25 b1       	in	r18, 0x05	; 5
     158:	98 2f       	mov	r25, r24
     15a:	91 70       	andi	r25, 0x01	; 1
     15c:	90 95       	com	r25
     15e:	21 60       	ori	r18, 0x01	; 1
     160:	92 23       	and	r25, r18
     162:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
     164:	2b b1       	in	r18, 0x0b	; 11
     166:	98 2f       	mov	r25, r24
     168:	90 72       	andi	r25, 0x20	; 32
     16a:	90 95       	com	r25
     16c:	20 62       	ori	r18, 0x20	; 32
     16e:	92 23       	and	r25, r18
     170:	9b b9       	out	0x0b, r25	; 11
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
     172:	98 b1       	in	r25, 0x08	; 8
     174:	9f 77       	andi	r25, 0x7F	; 127
     176:	80 78       	andi	r24, 0x80	; 128
     178:	89 2b       	or	r24, r25
     17a:	88 b9       	out	0x08, r24	; 8
     17c:	08 95       	ret

0000017e <SetupHardware>:

void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     17e:	84 b7       	in	r24, 0x34	; 52
     180:	87 7f       	andi	r24, 0xF7	; 247
     182:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	a8 95       	wdr
     18a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     18e:	88 61       	ori	r24, 0x18	; 24
     190:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     194:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     198:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	80 e8       	ldi	r24, 0x80	; 128
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1aa:	0f be       	out	0x3f, r0	; 63
				DDRB  |=  LEDS_PORTB_LEDS;
     1ac:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     1ae:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     1b0:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     1b2:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     1b4:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     1b6:	47 98       	cbi	0x08, 7	; 8
#endif

	/* Hardware Initialization */
	LEDs_Init();
	//Dataflash_Init();
	USB_Init();
     1b8:	dc c7       	rjmp	.+4024   	; 0x1172 <USB_Init>

000001ba <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1ba:	80 ea       	ldi	r24, 0xA0	; 160
     1bc:	cc df       	rcall	.-104    	; 0x156 <LEDs_SetAllLEDs>

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     1be:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <__data_end>
     1c2:	08 95       	ret

000001c4 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	c7 cf       	rjmp	.-114    	; 0x156 <LEDs_SetAllLEDs>

000001c8 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     1c8:	cf 93       	push	r28
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     1ca:	42 e3       	ldi	r20, 0x32	; 50
     1cc:	61 e8       	ldi	r22, 0x81	; 129
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	0d d7       	rcall	.+3610   	; 0xfec <Endpoint_ConfigureEndpoint_Prv>
     1d2:	c8 2f       	mov	r28, r24
     1d4:	42 e3       	ldi	r20, 0x32	; 50
     1d6:	60 e8       	ldi	r22, 0x80	; 128
     1d8:	84 e0       	ldi	r24, 0x04	; 4
     1da:	08 d7       	rcall	.+3600   	; 0xfec <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1dc:	88 23       	and	r24, r24
     1de:	11 f0       	breq	.+4      	; 0x1e4 <EVENT_USB_Device_ConfigurationChanged+0x1c>
     1e0:	c1 11       	cpse	r28, r1
     1e2:	03 c0       	rjmp	.+6      	; 0x1ea <EVENT_USB_Device_ConfigurationChanged+0x22>
     1e4:	81 e8       	ldi	r24, 0x81	; 129
}
     1e6:	cf 91       	pop	r28
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1e8:	b6 cf       	rjmp	.-148    	; 0x156 <LEDs_SetAllLEDs>
     1ea:	80 e2       	ldi	r24, 0x20	; 32
     1ec:	fc cf       	rjmp	.-8      	; 0x1e6 <EVENT_USB_Device_ConfigurationChanged+0x1e>

000001ee <EVENT_USB_Device_ControlRequest>:
	serialWrite(' ');
	serialWrite('\n');
	serialWrite('\r');*/

	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     1ee:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <USB_ControlRequest+0x1>
     1f2:	8e 3f       	cpi	r24, 0xFE	; 254
     1f4:	81 f0       	breq	.+32     	; 0x216 <EVENT_USB_Device_ControlRequest+0x28>
     1f6:	8f 3f       	cpi	r24, 0xFF	; 255
     1f8:	f9 f4       	brne	.+62     	; 0x238 <EVENT_USB_Device_ControlRequest+0x4a>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     1fa:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <USB_ControlRequest>
     1fe:	81 32       	cpi	r24, 0x21	; 33
     200:	d9 f4       	brne	.+54     	; 0x238 <EVENT_USB_Device_ControlRequest+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     202:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     206:	87 7f       	andi	r24, 0xF7	; 247
     208:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     20c:	24 d7       	rcall	.+3656   	; 0x1056 <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	80 93 5a 02 	sts	0x025A, r24	; 0x80025a <__data_end>
     214:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     216:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <USB_ControlRequest>
     21a:	81 3a       	cpi	r24, 0xA1	; 161
     21c:	69 f4       	brne	.+26     	; 0x238 <EVENT_USB_Device_ControlRequest+0x4a>
     21e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     222:	87 7f       	andi	r24, 0xF7	; 247
     224:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     228:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     22c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     230:	8e 77       	andi	r24, 0x7E	; 126
     232:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     236:	0f c7       	rjmp	.+3614   	; 0x1056 <Endpoint_ClearStatusStage>
     238:	08 95       	ret

0000023a <MassStorage_Task>:

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
     23a:	cf 93       	push	r28
     23c:	df 93       	push	r29
     23e:	00 d0       	rcall	.+0      	; 0x240 <MassStorage_Task+0x6>
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     244:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <USB_DeviceState>
     248:	84 30       	cpi	r24, 0x04	; 4
     24a:	09 f0       	breq	.+2      	; 0x24e <MassStorage_Task+0x14>
     24c:	69 c0       	rjmp	.+210    	; 0x320 <MassStorage_Task+0xe6>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     24e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     252:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     256:	82 ff       	sbrs	r24, 2
     258:	39 c0       	rjmp	.+114    	; 0x2cc <MassStorage_Task+0x92>
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
     25a:	1a 82       	std	Y+2, r1	; 0x02
     25c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     25e:	ae 01       	movw	r20, r28
     260:	4f 5f       	subi	r20, 0xFF	; 255
     262:	5f 4f       	sbci	r21, 0xFF	; 255
     264:	6f e0       	ldi	r22, 0x0F	; 15
     266:	70 e0       	ldi	r23, 0x00	; 0
     268:	84 e6       	ldi	r24, 0x64	; 100
     26a:	94 e0       	ldi	r25, 0x04	; 4
     26c:	b7 d5       	rcall	.+2926   	; 0xddc <Endpoint_Read_Stream_LE>
     26e:	85 30       	cpi	r24, 0x05	; 5
     270:	49 f1       	breq	.+82     	; 0x2c4 <MassStorage_Task+0x8a>
		if (IsMassStoreReset)
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     272:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <CommandBlock>
     276:	90 91 65 04 	lds	r25, 0x0465	; 0x800465 <CommandBlock+0x1>
     27a:	a0 91 66 04 	lds	r26, 0x0466	; 0x800466 <CommandBlock+0x2>
     27e:	b0 91 67 04 	lds	r27, 0x0467	; 0x800467 <CommandBlock+0x3>
     282:	85 35       	cpi	r24, 0x55	; 85
     284:	93 45       	sbci	r25, 0x53	; 83
     286:	a2 44       	sbci	r26, 0x42	; 66
     288:	b3 44       	sbci	r27, 0x43	; 67
     28a:	71 f4       	brne	.+28     	; 0x2a8 <MassStorage_Task+0x6e>
     28c:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <CommandBlock+0xd>
     290:	81 11       	cpse	r24, r1
     292:	0a c0       	rjmp	.+20     	; 0x2a8 <MassStorage_Task+0x6e>
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
     294:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <CommandBlock+0xc>
     298:	8f 71       	andi	r24, 0x1F	; 31
     29a:	31 f4       	brne	.+12     	; 0x2a8 <MassStorage_Task+0x6e>
		(CommandBlock.Flags              & 0x1F)             ||
     29c:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <CommandBlock+0xe>
     2a0:	81 50       	subi	r24, 0x01	; 1
     2a2:	80 31       	cpi	r24, 0x10	; 16
     2a4:	08 f4       	brcc	.+2      	; 0x2a8 <MassStorage_Task+0x6e>
     2a6:	41 c0       	rjmp	.+130    	; 0x32a <MassStorage_Task+0xf0>
				UECONX |= (1 << STALLRQ);
     2a8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2ac:	80 62       	ori	r24, 0x20	; 32
     2ae:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQ);
     2b8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2bc:	80 62       	ori	r24, 0x20	; 32
     2be:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2c2:	04 c0       	rjmp	.+8      	; 0x2cc <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     2c4:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
     2c8:	88 23       	and	r24, r24
     2ca:	49 f2       	breq	.-110    	; 0x25e <MassStorage_Task+0x24>
	if (IsMassStoreReset)
     2cc:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
     2d0:	88 23       	and	r24, r24
     2d2:	31 f1       	breq	.+76     	; 0x320 <MassStorage_Task+0xe6>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2d4:	80 e1       	ldi	r24, 0x10	; 16
     2d6:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     2da:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2de:	88 e0       	ldi	r24, 0x08	; 8
     2e0:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     2e4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2e8:	84 e0       	ldi	r24, 0x04	; 4
     2ea:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     2ee:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2f2:	80 61       	ori	r24, 0x10	; 16
     2f4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     2f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2fc:	88 60       	ori	r24, 0x08	; 8
     2fe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     302:	83 e0       	ldi	r24, 0x03	; 3
     304:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     308:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     30c:	80 61       	ori	r24, 0x10	; 16
     30e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     312:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     316:	88 60       	ori	r24, 0x08	; 8
     318:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		IsMassStoreReset = false;
     31c:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <__data_end>
}
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	08 95       	ret
	}

	//serialWriteArray(msg, 21);

	/* Read in command block command data */
	BytesTransferred = 0;
     32a:	1a 82       	std	Y+2, r1	; 0x02
     32c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     32e:	60 91 72 04 	lds	r22, 0x0472	; 0x800472 <CommandBlock+0xe>
     332:	70 e0       	ldi	r23, 0x00	; 0
     334:	ae 01       	movw	r20, r28
     336:	4f 5f       	subi	r20, 0xFF	; 255
     338:	5f 4f       	sbci	r21, 0xFF	; 255
     33a:	83 e7       	ldi	r24, 0x73	; 115
     33c:	94 e0       	ldi	r25, 0x04	; 4
     33e:	4e d5       	rcall	.+2716   	; 0xddc <Endpoint_Read_Stream_LE>
     340:	85 30       	cpi	r24, 0x05	; 5
     342:	09 f4       	brne	.+2      	; 0x346 <MassStorage_Task+0x10c>
     344:	5e c0       	rjmp	.+188    	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     346:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     34a:	8b 77       	andi	r24, 0x7B	; 123
     34c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     350:	80 e2       	ldi	r24, 0x20	; 32
     352:	01 df       	rcall	.-510    	; 0x156 <LEDs_SetAllLEDs>
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     354:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <CommandBlock+0xc>
     358:	87 ff       	sbrs	r24, 7
     35a:	03 c0       	rjmp	.+6      	; 0x362 <MassStorage_Task+0x128>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     35c:	83 e0       	ldi	r24, 0x03	; 3
     35e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     362:	43 d1       	rcall	.+646    	; 0x5ea <SCSI_DecodeSCSICommand>
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	89 27       	eor	r24, r25
     368:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <CommandStatus+0xc>
		CommandStatus.Tag = CommandBlock.Tag;
     36c:	40 91 68 04 	lds	r20, 0x0468	; 0x800468 <CommandBlock+0x4>
     370:	50 91 69 04 	lds	r21, 0x0469	; 0x800469 <CommandBlock+0x5>
     374:	60 91 6a 04 	lds	r22, 0x046A	; 0x80046a <CommandBlock+0x6>
     378:	70 91 6b 04 	lds	r23, 0x046B	; 0x80046b <CommandBlock+0x7>
     37c:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <CommandStatus+0x4>
     380:	50 93 2c 01 	sts	0x012C, r21	; 0x80012c <CommandStatus+0x5>
     384:	60 93 2d 01 	sts	0x012D, r22	; 0x80012d <CommandStatus+0x6>
     388:	70 93 2e 01 	sts	0x012E, r23	; 0x80012e <CommandStatus+0x7>
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     38c:	40 91 6c 04 	lds	r20, 0x046C	; 0x80046c <CommandBlock+0x8>
     390:	50 91 6d 04 	lds	r21, 0x046D	; 0x80046d <CommandBlock+0x9>
     394:	60 91 6e 04 	lds	r22, 0x046E	; 0x80046e <CommandBlock+0xa>
     398:	70 91 6f 04 	lds	r23, 0x046F	; 0x80046f <CommandBlock+0xb>
     39c:	40 93 2f 01 	sts	0x012F, r20	; 0x80012f <CommandStatus+0x8>
     3a0:	50 93 30 01 	sts	0x0130, r21	; 0x800130 <CommandStatus+0x9>
     3a4:	60 93 31 01 	sts	0x0131, r22	; 0x800131 <CommandStatus+0xa>
     3a8:	70 93 32 01 	sts	0x0132, r23	; 0x800132 <CommandStatus+0xb>
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     3ac:	88 23       	and	r24, r24
     3ae:	49 f0       	breq	.+18     	; 0x3c2 <MassStorage_Task+0x188>
     3b0:	45 2b       	or	r20, r21
     3b2:	46 2b       	or	r20, r22
     3b4:	47 2b       	or	r20, r23
     3b6:	29 f0       	breq	.+10     	; 0x3c2 <MassStorage_Task+0x188>
				UECONX |= (1 << STALLRQ);
     3b8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     3bc:	80 62       	ori	r24, 0x20	; 32
     3be:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3c2:	84 e0       	ldi	r24, 0x04	; 4
     3c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3c8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3cc:	85 fd       	sbrc	r24, 5
     3ce:	1f c0       	rjmp	.+62     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3d6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3da:	85 fd       	sbrc	r24, 5
     3dc:	1f c0       	rjmp	.+62     	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
     3de:	1a 82       	std	Y+2, r1	; 0x02
     3e0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     3e2:	ae 01       	movw	r20, r28
     3e4:	4f 5f       	subi	r20, 0xFF	; 255
     3e6:	5f 4f       	sbci	r21, 0xFF	; 255
     3e8:	6d e0       	ldi	r22, 0x0D	; 13
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	87 e2       	ldi	r24, 0x27	; 39
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	a8 d4       	rcall	.+2384   	; 0xd42 <Endpoint_Write_Stream_LE>
     3f2:	85 30       	cpi	r24, 0x05	; 5
     3f4:	c1 f0       	breq	.+48     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3fa:	8e 77       	andi	r24, 0x7E	; 126
     3fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     400:	0a c0       	rjmp	.+20     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
		if (IsMassStoreReset)
     402:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
     406:	88 23       	and	r24, r24
     408:	09 f4       	brne	.+2      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
     40a:	91 cf       	rjmp	.-222    	; 0x32e <MassStorage_Task+0xf4>
     40c:	5f cf       	rjmp	.-322    	; 0x2cc <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     40e:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
     412:	88 23       	and	r24, r24
     414:	c9 f2       	breq	.-78     	; 0x3c8 <MassStorage_Task+0x18e>
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     416:	80 e2       	ldi	r24, 0x20	; 32
     418:	9e de       	rcall	.-708    	; 0x156 <LEDs_SetAllLEDs>
     41a:	58 cf       	rjmp	.-336    	; 0x2cc <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     41c:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
     420:	88 23       	and	r24, r24
     422:	c9 f2       	breq	.-78     	; 0x3d6 <MassStorage_Task+0x19c>
     424:	f8 cf       	rjmp	.-16     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     426:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
     42a:	88 23       	and	r24, r24
     42c:	d1 f2       	breq	.-76     	; 0x3e2 <MassStorage_Task+0x1a8>
     42e:	f3 cf       	rjmp	.-26     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>

00000430 <main>:
	serialBegin();
     430:	43 d0       	rcall	.+134    	; 0x4b8 <serialBegin>
	if(!sd_raw_init())
     432:	82 d3       	rcall	.+1796   	; 0xb38 <sd_raw_init>
     434:	81 11       	cpse	r24, r1
     436:	08 c0       	rjmp	.+16     	; 0x448 <main+0x18>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     438:	81 e8       	ldi	r24, 0x81	; 129
     43a:	8d de       	rcall	.-742    	; 0x156 <LEDs_SetAllLEDs>
		serialWriteArray(sderrormsg, 20);
     43c:	64 e1       	ldi	r22, 0x14	; 20
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	50 d0       	rcall	.+160    	; 0x4e6 <serialWriteArray>
     446:	ff cf       	rjmp	.-2      	; 0x446 <main+0x16>
	SetupHardware();
     448:	9a de       	rcall	.-716    	; 0x17e <SetupHardware>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	84 de       	rcall	.-760    	; 0x156 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     44e:	78 94       	sei
		MassStorage_Task();
     450:	f4 de       	rcall	.-536    	; 0x23a <MassStorage_Task>
		USB_USBTask();
     452:	0e 94 37 0b 	call	0x166e	; 0x166e <USB_USBTask>
     456:	fc cf       	rjmp	.-8      	; 0x450 <main+0x20>

00000458 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     458:	29 2f       	mov	r18, r25
     45a:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     45c:	22 30       	cpi	r18, 0x02	; 2
     45e:	31 05       	cpc	r19, r1
     460:	71 f0       	breq	.+28     	; 0x47e <CALLBACK_USB_GetDescriptor+0x26>
     462:	23 30       	cpi	r18, 0x03	; 3
     464:	31 05       	cpc	r19, r1
     466:	81 f0       	breq	.+32     	; 0x488 <CALLBACK_USB_GetDescriptor+0x30>
     468:	21 30       	cpi	r18, 0x01	; 1
     46a:	31 05       	cpc	r19, r1
     46c:	a1 f4       	brne	.+40     	; 0x496 <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     46e:	82 e1       	ldi	r24, 0x12	; 18
     470:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     472:	2a e0       	ldi	r18, 0x0A	; 10
     474:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     476:	fa 01       	movw	r30, r20
     478:	31 83       	std	Z+1, r19	; 0x01
     47a:	20 83       	st	Z, r18
	return Size;
}
     47c:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
     47e:	80 e2       	ldi	r24, 0x20	; 32
     480:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     482:	2a ee       	ldi	r18, 0xEA	; 234
     484:	30 e0       	ldi	r19, 0x00	; 0
			break;
     486:	f7 cf       	rjmp	.-18     	; 0x476 <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
     488:	99 27       	eor	r25, r25
     48a:	81 30       	cpi	r24, 0x01	; 1
     48c:	91 05       	cpc	r25, r1
     48e:	71 f0       	breq	.+28     	; 0x4ac <CALLBACK_USB_GetDescriptor+0x54>
     490:	38 f0       	brcs	.+14     	; 0x4a0 <CALLBACK_USB_GetDescriptor+0x48>
     492:	02 97       	sbiw	r24, 0x02	; 2
     494:	71 f0       	breq	.+28     	; 0x4b2 <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
	const void* Address = NULL;
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	eb cf       	rjmp	.-42     	; 0x476 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4a0:	e6 ee       	ldi	r30, 0xE6	; 230
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4a4:	84 91       	lpm	r24, Z
     4a6:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     4a8:	9f 01       	movw	r18, r30
					break;
     4aa:	e5 cf       	rjmp	.-54     	; 0x476 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4ac:	ea ed       	ldi	r30, 0xDA	; 218
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	f9 cf       	rjmp	.-14     	; 0x4a4 <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4b2:	ec ea       	ldi	r30, 0xAC	; 172
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	f6 cf       	rjmp	.-20     	; 0x4a4 <CALLBACK_USB_GetDescriptor+0x4c>

000004b8 <serialBegin>:

// initialize the hardware uart: 57600 baud, 8 bits, no parity, 2 stop bits
void serialBegin()
{
	const unsigned int baud = 57600;
	UBRR1 = (F_CPU / 4 / baud - 1) / 2;
     4b8:	82 e2       	ldi	r24, 0x22	; 34
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     4c0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1A = (1<<U2X1);		// set double transmission speed
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
     4ca:	88 e9       	ldi	r24, 0x98	; 152
     4cc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);
     4d0:	8e e0       	ldi	r24, 0x0E	; 14
     4d2:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     4d6:	08 95       	ret

000004d8 <serialWrite>:

// output a single byte to uart
void serialWrite( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
     4d8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     4dc:	95 ff       	sbrs	r25, 5
     4de:	fc cf       	rjmp	.-8      	; 0x4d8 <serialWrite>
	;
	/* Put data into buffer, sends the data */
	UDR1 = (uint8_t)data;
     4e0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     4e4:	08 95       	ret

000004e6 <serialWriteArray>:
}

// output a string to uart
void serialWriteArray( unsigned char data[], unsigned int len)
{
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	ec 01       	movw	r28, r24
     4f0:	8c 01       	movw	r16, r24
     4f2:	06 0f       	add	r16, r22
     4f4:	17 1f       	adc	r17, r23
	for(int i = 0; i < len; i++)
     4f6:	c0 17       	cp	r28, r16
     4f8:	d1 07       	cpc	r29, r17
     4fa:	29 f4       	brne	.+10     	; 0x506 <serialWriteArray+0x20>
	{
		serialWrite(*(data + i));
	}
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	1f 91       	pop	r17
     502:	0f 91       	pop	r16
     504:	08 95       	ret
		serialWrite(*(data + i));
     506:	89 91       	ld	r24, Y+
     508:	e7 df       	rcall	.-50     	; 0x4d8 <serialWrite>
     50a:	f5 cf       	rjmp	.-22     	; 0x4f6 <serialWriteArray+0x10>

0000050c <readData>:
unsigned char currentblkmsg[] = {'c', 'u', 'r', 'r', 'e', 'n', 't', 'b', 'l', 'k', ':', ' '};
unsigned char endpointfullmsg[] = {'e', 'n', 'd', 'p', 'o', 'i', 'n', 't', ' ', 'f', 'u', 'l', 'l', '\n', '\r'};
unsigned char buffermsg[] = {'b', 'u', 'f', 'f', 'e', 'r', ':', ' '};
unsigned char chunkmsg[] = {'c', 'h', 'u', 'n', 'k'};
void readData(const uint32_t BlockAddress, uint16_t TotalBlocks)
{/*
     50c:	6f 92       	push	r6
     50e:	7f 92       	push	r7
     510:	8f 92       	push	r8
     512:	9f 92       	push	r9
     514:	af 92       	push	r10
     516:	bf 92       	push	r11
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	1f 92       	push	r1
     52a:	cd b7       	in	r28, 0x3d	; 61
     52c:	de b7       	in	r29, 0x3e	; 62
     52e:	4b 01       	movw	r8, r22
     530:	5c 01       	movw	r10, r24
     532:	6a 01       	movw	r12, r20
	//uint8_t  CurrDFPageByteDiv16 = (CurrDFPageByte >> 4);

	uint16_t offset = BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE;

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     534:	af d5       	rcall	.+2910   	; 0x1094 <Endpoint_WaitUntilReady>
     536:	81 11       	cpse	r24, r1
     538:	3e c0       	rjmp	.+124    	; 0x5b6 <readData+0xaa>
	uint16_t offset = BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE;
     53a:	34 01       	movw	r6, r8
     53c:	76 2c       	mov	r7, r6
     53e:	66 24       	eor	r6, r6
     540:	77 0c       	add	r7, r7
	  return;

	while (TotalBlocks)
     542:	c1 14       	cp	r12, r1
     544:	d1 04       	cpc	r13, r1
     546:	09 f4       	brne	.+2      	; 0x54a <readData+0x3e>
     548:	46 c0       	rjmp	.+140    	; 0x5d6 <readData+0xca>
     54a:	53 01       	movw	r10, r6
     54c:	8e ef       	ldi	r24, 0xFE	; 254
     54e:	b8 1a       	sub	r11, r24
				return ((UEINTX & (1 << RWAL)) ? true : false);
     550:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

		/* Read an endpoint packet sized data block from the Dataflash */
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
		{
			/* Check if the endpoint is currently full */
			if (!(Endpoint_IsReadWriteAllowed()))
     554:	85 ff       	sbrs	r24, 5
     556:	27 c0       	rjmp	.+78     	; 0x5a6 <readData+0x9a>
     558:	43 01       	movw	r8, r6
     55a:	80 e1       	ldi	r24, 0x10	; 16
     55c:	88 0e       	add	r8, r24
     55e:	91 1c       	adc	r9, r1
			}

			for(int j = 0; j < 16; j++)
			{
				uint8_t buffer;
				sd_raw_read(offset, &buffer, 1);
     560:	ee 24       	eor	r14, r14
     562:	e3 94       	inc	r14
     564:	f1 2c       	mov	r15, r1
     566:	8e 01       	movw	r16, r28
     568:	0f 5f       	subi	r16, 0xFF	; 255
     56a:	1f 4f       	sbci	r17, 0xFF	; 255
     56c:	93 01       	movw	r18, r6
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	50 e0       	ldi	r21, 0x00	; 0
     572:	60 e0       	ldi	r22, 0x00	; 0
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	e0 d1       	rcall	.+960    	; 0x93c <sd_raw_read>
				Endpoint_Write_8(buffer);
     57c:	89 81       	ldd	r24, Y+1	; 0x01
				UEDATX = Data;
     57e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				offset++;
     582:	8f ef       	ldi	r24, 0xFF	; 255
     584:	68 1a       	sub	r6, r24
     586:	78 0a       	sbc	r7, r24
			for(int j = 0; j < 16; j++)
     588:	68 14       	cp	r6, r8
     58a:	79 04       	cpc	r7, r9
     58c:	49 f7       	brne	.-46     	; 0x560 <readData+0x54>
			
			/* Increment the block 16 byte block counter */
			BytesInBlockDiv16++;

			/* Check if the current command is being aborted by the host */
			if (IsMassStoreReset)
     58e:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
     592:	81 11       	cpse	r24, r1
     594:	10 c0       	rjmp	.+32     	; 0x5b6 <readData+0xaa>
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     596:	6a 14       	cp	r6, r10
     598:	7b 04       	cpc	r7, r11
     59a:	d1 f6       	brne	.-76     	; 0x550 <readData+0x44>
			  return;
		}

		/* Decrement the blocks remaining counter */
		TotalBlocks--;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	c8 1a       	sub	r12, r24
     5a0:	d1 08       	sbc	r13, r1
				offset++;
     5a2:	35 01       	movw	r6, r10
     5a4:	ce cf       	rjmp	.-100    	; 0x542 <readData+0x36>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5a6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5aa:	8e 77       	andi	r24, 0x7E	; 126
     5ac:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				if (Endpoint_WaitUntilReady())
     5b0:	71 d5       	rcall	.+2786   	; 0x1094 <Endpoint_WaitUntilReady>
     5b2:	88 23       	and	r24, r24
     5b4:	89 f2       	breq	.-94     	; 0x558 <readData+0x4c>
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	  Endpoint_ClearIN();
     5b6:	0f 90       	pop	r0
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	1f 91       	pop	r17
     5be:	0f 91       	pop	r16
     5c0:	ff 90       	pop	r15
     5c2:	ef 90       	pop	r14
     5c4:	df 90       	pop	r13
     5c6:	cf 90       	pop	r12
     5c8:	bf 90       	pop	r11
     5ca:	af 90       	pop	r10
     5cc:	9f 90       	pop	r9
     5ce:	8f 90       	pop	r8
     5d0:	7f 90       	pop	r7
     5d2:	6f 90       	pop	r6
     5d4:	08 95       	ret
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsReadWriteAllowed()))
     5da:	85 fd       	sbrc	r24, 5
     5dc:	ec cf       	rjmp	.-40     	; 0x5b6 <readData+0xaa>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5e2:	8e 77       	andi	r24, 0x7E	; 126
     5e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5e8:	e6 cf       	rjmp	.-52     	; 0x5b6 <readData+0xaa>

000005ea <SCSI_DecodeSCSICommand>:
 *  a command failure due to a ILLEGAL REQUEST.
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(void)
{
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     5f2:	80 91 73 04 	lds	r24, 0x0473	; 0x800473 <CommandBlock+0xf>
     5f6:	8d 31       	cpi	r24, 0x1D	; 29
     5f8:	09 f4       	brne	.+2      	; 0x5fc <SCSI_DecodeSCSICommand+0x12>
     5fa:	e4 c0       	rjmp	.+456    	; 0x7c4 <SCSI_DecodeSCSICommand+0x1da>
     5fc:	e0 f4       	brcc	.+56     	; 0x636 <SCSI_DecodeSCSICommand+0x4c>
     5fe:	82 31       	cpi	r24, 0x12	; 18
     600:	09 f4       	brne	.+2      	; 0x604 <SCSI_DecodeSCSICommand+0x1a>
     602:	5a c0       	rjmp	.+180    	; 0x6b8 <SCSI_DecodeSCSICommand+0xce>
     604:	70 f4       	brcc	.+28     	; 0x622 <SCSI_DecodeSCSICommand+0x38>
     606:	88 23       	and	r24, r24
     608:	09 f4       	brne	.+2      	; 0x60c <SCSI_DecodeSCSICommand+0x22>
     60a:	50 c1       	rjmp	.+672    	; 0x8ac <SCSI_DecodeSCSICommand+0x2c2>
     60c:	83 30       	cpi	r24, 0x03	; 3
     60e:	09 f4       	brne	.+2      	; 0x612 <SCSI_DecodeSCSICommand+0x28>
     610:	ad c0       	rjmp	.+346    	; 0x76c <SCSI_DecodeSCSICommand+0x182>
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     612:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <SenseData+0x2>
     616:	80 7f       	andi	r24, 0xF0	; 240
     618:	85 60       	ori	r24, 0x05	; 5
     61a:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <SenseData+0x2>
     61e:	80 e2       	ldi	r24, 0x20	; 32
     620:	65 c0       	rjmp	.+202    	; 0x6ec <SCSI_DecodeSCSICommand+0x102>
	switch (CommandBlock.SCSICommandData[0])
     622:	8a 31       	cpi	r24, 0x1A	; 26
     624:	09 f4       	brne	.+2      	; 0x628 <SCSI_DecodeSCSICommand+0x3e>
     626:	23 c1       	rjmp	.+582    	; 0x86e <SCSI_DecodeSCSICommand+0x284>
     628:	8b 31       	cpi	r24, 0x1B	; 27
     62a:	99 f7       	brne	.-26     	; 0x612 <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(startstopmsg, 20);
     62c:	64 e1       	ldi	r22, 0x14	; 20
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	89 e9       	ldi	r24, 0x99	; 153
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	cb c0       	rjmp	.+406    	; 0x7cc <SCSI_DecodeSCSICommand+0x1e2>
	switch (CommandBlock.SCSICommandData[0])
     636:	88 32       	cpi	r24, 0x28	; 40
     638:	09 f4       	brne	.+2      	; 0x63c <SCSI_DecodeSCSICommand+0x52>
     63a:	df c0       	rjmp	.+446    	; 0x7fa <SCSI_DecodeSCSICommand+0x210>
     63c:	90 f5       	brcc	.+100    	; 0x6a2 <SCSI_DecodeSCSICommand+0xb8>
     63e:	8e 31       	cpi	r24, 0x1E	; 30
     640:	09 f4       	brne	.+2      	; 0x644 <SCSI_DecodeSCSICommand+0x5a>
     642:	39 c1       	rjmp	.+626    	; 0x8b6 <SCSI_DecodeSCSICommand+0x2cc>
     644:	85 32       	cpi	r24, 0x25	; 37
     646:	29 f7       	brne	.-54     	; 0x612 <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(readcapacitymsg, 23);
     648:	67 e1       	ldi	r22, 0x17	; 23
     64a:	70 e0       	ldi	r23, 0x00	; 0
     64c:	87 ef       	ldi	r24, 0xF7	; 247
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	4a df       	rcall	.-364    	; 0x4e6 <serialWriteArray>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     652:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     656:	8f e7       	ldi	r24, 0x7F	; 127
     658:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     662:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
     666:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     66a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     674:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     678:	80 91 5a 02 	lds	r24, 0x025A	; 0x80025a <__data_end>
     67c:	81 11       	cpse	r24, r1
     67e:	3a c0       	rjmp	.+116    	; 0x6f4 <SCSI_DecodeSCSICommand+0x10a>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     680:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     684:	8e 77       	andi	r24, 0x7E	; 126
     686:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     68a:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <CommandBlock+0x8>
     68e:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <CommandBlock+0x9>
     692:	a0 91 6e 04 	lds	r26, 0x046E	; 0x80046e <CommandBlock+0xa>
     696:	b0 91 6f 04 	lds	r27, 0x046F	; 0x80046f <CommandBlock+0xb>
     69a:	08 97       	sbiw	r24, 0x08	; 8
     69c:	a1 09       	sbc	r26, r1
     69e:	b1 09       	sbc	r27, r1
     6a0:	52 c0       	rjmp	.+164    	; 0x746 <SCSI_DecodeSCSICommand+0x15c>
	switch (CommandBlock.SCSICommandData[0])
     6a2:	8a 32       	cpi	r24, 0x2A	; 42
     6a4:	09 f4       	brne	.+2      	; 0x6a8 <SCSI_DecodeSCSICommand+0xbe>
     6a6:	9c c0       	rjmp	.+312    	; 0x7e0 <SCSI_DecodeSCSICommand+0x1f6>
     6a8:	8f 32       	cpi	r24, 0x2F	; 47
     6aa:	09 f0       	breq	.+2      	; 0x6ae <SCSI_DecodeSCSICommand+0xc4>
     6ac:	b2 cf       	rjmp	.-156    	; 0x612 <SCSI_DecodeSCSICommand+0x28>
			serialWriteArray(verifymsg, 16);
     6ae:	60 e1       	ldi	r22, 0x10	; 16
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	87 e5       	ldi	r24, 0x57	; 87
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	8a c0       	rjmp	.+276    	; 0x7cc <SCSI_DecodeSCSICommand+0x1e2>
			serialWriteArray(inquirymsg, 17);
     6b8:	61 e1       	ldi	r22, 0x11	; 17
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	85 e2       	ldi	r24, 0x25	; 37
     6be:	92 e0       	ldi	r25, 0x02	; 2
     6c0:	12 df       	rcall	.-476    	; 0x4e6 <serialWriteArray>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     6c2:	20 91 77 04 	lds	r18, 0x0477	; 0x800477 <CommandBlock+0x13>
     6c6:	c2 2f       	mov	r28, r18
     6c8:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <CommandBlock+0x12>
     6cc:	d8 2f       	mov	r29, r24
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     6ce:	80 91 74 04 	lds	r24, 0x0474	; 0x800474 <CommandBlock+0x10>
     6d2:	83 70       	andi	r24, 0x03	; 3
     6d4:	21 f4       	brne	.+8      	; 0x6de <SCSI_DecodeSCSICommand+0xf4>
     6d6:	80 91 75 04 	lds	r24, 0x0475	; 0x800475 <CommandBlock+0x11>
     6da:	88 23       	and	r24, r24
     6dc:	89 f0       	breq	.+34     	; 0x700 <SCSI_DecodeSCSICommand+0x116>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     6de:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <SenseData+0x2>
     6e2:	80 7f       	andi	r24, 0xF0	; 240
     6e4:	85 60       	ori	r24, 0x05	; 5
     6e6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <SenseData+0x2>
     6ea:	84 e2       	ldi	r24, 0x24	; 36
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     6ec:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <SenseData+0xc>
     6f0:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <SenseData+0xd>
	return false;
     6f4:	80 e0       	ldi	r24, 0x00	; 0
}
     6f6:	df 91       	pop	r29
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
     6fe:	08 95       	ret
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     700:	8e 01       	movw	r16, r28
     702:	c5 32       	cpi	r28, 0x25	; 37
     704:	d1 05       	cpc	r29, r1
     706:	10 f0       	brcs	.+4      	; 0x70c <SCSI_DecodeSCSICommand+0x122>
     708:	04 e2       	ldi	r16, 0x24	; 36
     70a:	10 e0       	ldi	r17, 0x00	; 0
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     70c:	40 e0       	ldi	r20, 0x00	; 0
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	b8 01       	movw	r22, r16
     712:	86 e3       	ldi	r24, 0x36	; 54
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	15 d3       	rcall	.+1578   	; 0xd42 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	ce 01       	movw	r24, r28
     71e:	80 1b       	sub	r24, r16
     720:	91 0b       	sbc	r25, r17
     722:	cc d2       	rcall	.+1432   	; 0xcbc <Endpoint_Null_Stream>
     724:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     728:	8e 77       	andi	r24, 0x7E	; 126
     72a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     72e:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <CommandBlock+0x8>
     732:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <CommandBlock+0x9>
     736:	a0 91 6e 04 	lds	r26, 0x046E	; 0x80046e <CommandBlock+0xa>
     73a:	b0 91 6f 04 	lds	r27, 0x046F	; 0x80046f <CommandBlock+0xb>
     73e:	80 1b       	sub	r24, r16
     740:	91 0b       	sbc	r25, r17
     742:	a1 09       	sbc	r26, r1
     744:	b1 09       	sbc	r27, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     746:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <CommandBlock+0x8>
     74a:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <CommandBlock+0x9>
     74e:	a0 93 6e 04 	sts	0x046E, r26	; 0x80046e <CommandBlock+0xa>
     752:	b0 93 6f 04 	sts	0x046F, r27	; 0x80046f <CommandBlock+0xb>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     756:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <SenseData+0x2>
     75a:	80 7f       	andi	r24, 0xF0	; 240
     75c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <SenseData+0x2>
     760:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <SenseData+0xc>
     764:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <SenseData+0xd>
		return true;
     768:	81 e0       	ldi	r24, 0x01	; 1
     76a:	c5 cf       	rjmp	.-118    	; 0x6f6 <SCSI_DecodeSCSICommand+0x10c>
			serialWriteArray(requestsensemsg, 23);
     76c:	67 e1       	ldi	r22, 0x17	; 23
     76e:	70 e0       	ldi	r23, 0x00	; 0
     770:	8e e0       	ldi	r24, 0x0E	; 14
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	b8 de       	rcall	.-656    	; 0x4e6 <serialWriteArray>
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     776:	c0 91 77 04 	lds	r28, 0x0477	; 0x800477 <CommandBlock+0x13>
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     77a:	dc 2f       	mov	r29, r28
     77c:	c3 31       	cpi	r28, 0x13	; 19
     77e:	08 f0       	brcs	.+2      	; 0x782 <SCSI_DecodeSCSICommand+0x198>
     780:	d2 e1       	ldi	r29, 0x12	; 18
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     782:	0d 2f       	mov	r16, r29
     784:	10 e0       	ldi	r17, 0x00	; 0
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	b8 01       	movw	r22, r16
     78c:	84 e3       	ldi	r24, 0x34	; 52
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	d8 d2       	rcall	.+1456   	; 0xd42 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     792:	8c 2f       	mov	r24, r28
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	80 1b       	sub	r24, r16
     79c:	91 0b       	sbc	r25, r17
     79e:	8e d2       	rcall	.+1308   	; 0xcbc <Endpoint_Null_Stream>
     7a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7a4:	8e 77       	andi	r24, 0x7E	; 126
     7a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     7aa:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <CommandBlock+0x8>
     7ae:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <CommandBlock+0x9>
     7b2:	a0 91 6e 04 	lds	r26, 0x046E	; 0x80046e <CommandBlock+0xa>
     7b6:	b0 91 6f 04 	lds	r27, 0x046F	; 0x80046f <CommandBlock+0xb>
     7ba:	8d 1b       	sub	r24, r29
     7bc:	91 09       	sbc	r25, r1
     7be:	a1 09       	sbc	r26, r1
     7c0:	b1 09       	sbc	r27, r1
     7c2:	c1 cf       	rjmp	.-126    	; 0x746 <SCSI_DecodeSCSICommand+0x15c>
			serialWriteArray(senddiagnosticmsg, 25);
     7c4:	69 e1       	ldi	r22, 0x19	; 25
     7c6:	70 e0       	ldi	r23, 0x00	; 0
     7c8:	8e ed       	ldi	r24, 0xDE	; 222
     7ca:	91 e0       	ldi	r25, 0x01	; 1
			serialWriteArray(preventallowmediumremovalmsg, 31);
     7cc:	8c de       	rcall	.-744    	; 0x4e6 <serialWriteArray>
			CommandBlock.DataTransferLength = 0;
     7ce:	10 92 6c 04 	sts	0x046C, r1	; 0x80046c <CommandBlock+0x8>
     7d2:	10 92 6d 04 	sts	0x046D, r1	; 0x80046d <CommandBlock+0x9>
     7d6:	10 92 6e 04 	sts	0x046E, r1	; 0x80046e <CommandBlock+0xa>
     7da:	10 92 6f 04 	sts	0x046F, r1	; 0x80046f <CommandBlock+0xb>
			break;
     7de:	bb cf       	rjmp	.-138    	; 0x756 <SCSI_DecodeSCSICommand+0x16c>
			serialWriteArray(writemsg, 15);
     7e0:	6f e0       	ldi	r22, 0x0F	; 15
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	8f ec       	ldi	r24, 0xCF	; 207
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	7e de       	rcall	.-772    	; 0x4e6 <serialWriteArray>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_DATA_PROTECT,
     7ea:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <SenseData+0x2>
     7ee:	80 7f       	andi	r24, 0xF0	; 240
     7f0:	87 60       	ori	r24, 0x07	; 7
     7f2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <SenseData+0x2>
     7f6:	87 e2       	ldi	r24, 0x27	; 39
     7f8:	79 cf       	rjmp	.-270    	; 0x6ec <SCSI_DecodeSCSICommand+0x102>
			serialWriteArray(readmsg, 14);
     7fa:	6e e0       	ldi	r22, 0x0E	; 14
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	81 ec       	ldi	r24, 0xC1	; 193
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	71 de       	rcall	.-798    	; 0x4e6 <serialWriteArray>

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     804:	60 91 78 04 	lds	r22, 0x0478	; 0x800478 <CommandBlock+0x14>
     808:	70 91 77 04 	lds	r23, 0x0477	; 0x800477 <CommandBlock+0x13>
     80c:	80 91 76 04 	lds	r24, 0x0476	; 0x800476 <CommandBlock+0x12>
     810:	90 91 75 04 	lds	r25, 0x0475	; 0x800475 <CommandBlock+0x11>
				return Data.Word;
     814:	20 91 7b 04 	lds	r18, 0x047B	; 0x80047b <CommandBlock+0x17>
     818:	c2 2f       	mov	r28, r18
     81a:	20 91 7a 04 	lds	r18, 0x047A	; 0x80047a <CommandBlock+0x16>
     81e:	d2 2f       	mov	r29, r18
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     820:	61 15       	cp	r22, r1
     822:	71 05       	cpc	r23, r1
     824:	20 e8       	ldi	r18, 0x80	; 128
     826:	82 07       	cpc	r24, r18
     828:	91 05       	cpc	r25, r1
     82a:	40 f0       	brcs	.+16     	; 0x83c <SCSI_DecodeSCSICommand+0x252>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     82c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <SenseData+0x2>
     830:	80 7f       	andi	r24, 0xF0	; 240
     832:	85 60       	ori	r24, 0x05	; 5
     834:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <SenseData+0x2>
     838:	81 e2       	ldi	r24, 0x21	; 33
     83a:	58 cf       	rjmp	.-336    	; 0x6ec <SCSI_DecodeSCSICommand+0x102>
	readData(BlockAddress, TotalBlocks);
     83c:	ae 01       	movw	r20, r28
     83e:	66 de       	rcall	.-820    	; 0x50c <readData>
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     840:	ae 01       	movw	r20, r28
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	89 e0       	ldi	r24, 0x09	; 9
     848:	44 0f       	add	r20, r20
     84a:	55 1f       	adc	r21, r21
     84c:	66 1f       	adc	r22, r22
     84e:	77 1f       	adc	r23, r23
     850:	8a 95       	dec	r24
     852:	d1 f7       	brne	.-12     	; 0x848 <SCSI_DecodeSCSICommand+0x25e>
     854:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <CommandBlock+0x8>
     858:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <CommandBlock+0x9>
     85c:	a0 91 6e 04 	lds	r26, 0x046E	; 0x80046e <CommandBlock+0xa>
     860:	b0 91 6f 04 	lds	r27, 0x046F	; 0x80046f <CommandBlock+0xb>
     864:	84 1b       	sub	r24, r20
     866:	95 0b       	sbc	r25, r21
     868:	a6 0b       	sbc	r26, r22
     86a:	b7 0b       	sbc	r27, r23
     86c:	6c cf       	rjmp	.-296    	; 0x746 <SCSI_DecodeSCSICommand+0x15c>
			serialWriteArray(modesensemsg, 20);
     86e:	64 e1       	ldi	r22, 0x14	; 20
     870:	70 e0       	ldi	r23, 0x00	; 0
     872:	8d ea       	ldi	r24, 0xAD	; 173
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	37 de       	rcall	.-914    	; 0x4e6 <serialWriteArray>
				UEDATX = Data;
     878:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     87c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     880:	80 e8       	ldi	r24, 0x80	; 128
     882:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     886:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     88a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     88e:	8e 77       	andi	r24, 0x7E	; 126
     890:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= 4;
     894:	80 91 6c 04 	lds	r24, 0x046C	; 0x80046c <CommandBlock+0x8>
     898:	90 91 6d 04 	lds	r25, 0x046D	; 0x80046d <CommandBlock+0x9>
     89c:	a0 91 6e 04 	lds	r26, 0x046E	; 0x80046e <CommandBlock+0xa>
     8a0:	b0 91 6f 04 	lds	r27, 0x046F	; 0x80046f <CommandBlock+0xb>
     8a4:	04 97       	sbiw	r24, 0x04	; 4
     8a6:	a1 09       	sbc	r26, r1
     8a8:	b1 09       	sbc	r27, r1
     8aa:	4d cf       	rjmp	.-358    	; 0x746 <SCSI_DecodeSCSICommand+0x15c>
			serialWriteArray(testunitmsg, 19);
     8ac:	63 e1       	ldi	r22, 0x13	; 19
     8ae:	70 e0       	ldi	r23, 0x00	; 0
     8b0:	86 e8       	ldi	r24, 0x86	; 134
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	8b cf       	rjmp	.-234    	; 0x7cc <SCSI_DecodeSCSICommand+0x1e2>
			serialWriteArray(preventallowmediumremovalmsg, 31);
     8b6:	6f e1       	ldi	r22, 0x1F	; 31
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	87 e6       	ldi	r24, 0x67	; 103
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	86 cf       	rjmp	.-244    	; 0x7cc <SCSI_DecodeSCSICommand+0x1e2>

000008c0 <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
     8c0:	8e bd       	out	0x2e, r24	; 46
     8c2:	0d b4       	in	r0, 0x2d	; 45
     8c4:	07 fe       	sbrs	r0, 7
     8c6:	fd cf       	rjmp	.-6      	; 0x8c2 <sd_raw_send_byte+0x2>
     8c8:	8d b5       	in	r24, 0x2d	; 45
     8ca:	8f 77       	andi	r24, 0x7F	; 127
     8cc:	8d bd       	out	0x2d, r24	; 45
     8ce:	08 95       	ret

000008d0 <sd_raw_rec_byte>:
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	8e bd       	out	0x2e, r24	; 46
     8d4:	0d b4       	in	r0, 0x2d	; 45
     8d6:	07 fe       	sbrs	r0, 7
     8d8:	fd cf       	rjmp	.-6      	; 0x8d4 <sd_raw_rec_byte+0x4>
     8da:	8d b5       	in	r24, 0x2d	; 45
     8dc:	8f 77       	andi	r24, 0x7F	; 127
     8de:	8d bd       	out	0x2d, r24	; 45
     8e0:	8e b5       	in	r24, 0x2e	; 46
     8e2:	08 95       	ret

000008e4 <sd_raw_send_command>:
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
     8e8:	1f 93       	push	r17
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	c8 2f       	mov	r28, r24
     8f0:	d4 2f       	mov	r29, r20
     8f2:	15 2f       	mov	r17, r21
     8f4:	06 2f       	mov	r16, r22
     8f6:	f7 2e       	mov	r15, r23
     8f8:	eb df       	rcall	.-42     	; 0x8d0 <sd_raw_rec_byte>
     8fa:	8c 2f       	mov	r24, r28
     8fc:	80 64       	ori	r24, 0x40	; 64
     8fe:	e0 df       	rcall	.-64     	; 0x8c0 <sd_raw_send_byte>
     900:	8f 2d       	mov	r24, r15
     902:	de df       	rcall	.-68     	; 0x8c0 <sd_raw_send_byte>
     904:	80 2f       	mov	r24, r16
     906:	dc df       	rcall	.-72     	; 0x8c0 <sd_raw_send_byte>
     908:	81 2f       	mov	r24, r17
     90a:	da df       	rcall	.-76     	; 0x8c0 <sd_raw_send_byte>
     90c:	8d 2f       	mov	r24, r29
     90e:	d8 df       	rcall	.-80     	; 0x8c0 <sd_raw_send_byte>
     910:	cc 23       	and	r28, r28
     912:	21 f0       	breq	.+8      	; 0x91c <sd_raw_send_command+0x38>
     914:	c8 30       	cpi	r28, 0x08	; 8
     916:	81 f0       	breq	.+32     	; 0x938 <sd_raw_send_command+0x54>
     918:	8f ef       	ldi	r24, 0xFF	; 255
     91a:	01 c0       	rjmp	.+2      	; 0x91e <sd_raw_send_command+0x3a>
     91c:	85 e9       	ldi	r24, 0x95	; 149
     91e:	d0 df       	rcall	.-96     	; 0x8c0 <sd_raw_send_byte>
     920:	ca e0       	ldi	r28, 0x0A	; 10
     922:	d6 df       	rcall	.-84     	; 0x8d0 <sd_raw_rec_byte>
     924:	8f 3f       	cpi	r24, 0xFF	; 255
     926:	11 f4       	brne	.+4      	; 0x92c <sd_raw_send_command+0x48>
     928:	c1 50       	subi	r28, 0x01	; 1
     92a:	d9 f7       	brne	.-10     	; 0x922 <sd_raw_send_command+0x3e>
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	08 95       	ret
     938:	87 e8       	ldi	r24, 0x87	; 135
     93a:	f1 cf       	rjmp	.-30     	; 0x91e <sd_raw_send_command+0x3a>

0000093c <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
     93c:	2f 92       	push	r2
     93e:	3f 92       	push	r3
     940:	4f 92       	push	r4
     942:	5f 92       	push	r5
     944:	6f 92       	push	r6
     946:	7f 92       	push	r7
     948:	8f 92       	push	r8
     94a:	9f 92       	push	r9
     94c:	af 92       	push	r10
     94e:	bf 92       	push	r11
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	60 97       	sbiw	r28, 0x10	; 16
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
     970:	29 83       	std	Y+1, r18	; 0x01
     972:	3a 83       	std	Y+2, r19	; 0x02
     974:	4b 83       	std	Y+3, r20	; 0x03
     976:	5c 83       	std	Y+4, r21	; 0x04
     978:	6d 83       	std	Y+5, r22	; 0x05
     97a:	7e 83       	std	Y+6, r23	; 0x06
     97c:	8f 83       	std	Y+7, r24	; 0x07
     97e:	98 87       	std	Y+8, r25	; 0x08
     980:	1a 87       	std	Y+10, r17	; 0x0a
     982:	09 87       	std	Y+9, r16	; 0x09
     984:	fc 86       	std	Y+12, r15	; 0x0c
     986:	eb 86       	std	Y+11, r14	; 0x0b
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
     988:	2b 85       	ldd	r18, Y+11	; 0x0b
     98a:	3c 85       	ldd	r19, Y+12	; 0x0c
     98c:	23 2b       	or	r18, r19
     98e:	11 f4       	brne	.+4      	; 0x994 <sd_raw_read+0x58>

        length -= read_length;
        offset += read_length;
    }

    return 1;
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	51 c0       	rjmp	.+162    	; 0xa36 <sd_raw_read+0xfa>
        block_offset = offset & 0x01ff;
     994:	29 81       	ldd	r18, Y+1	; 0x01
     996:	3a 81       	ldd	r19, Y+2	; 0x02
     998:	31 70       	andi	r19, 0x01	; 1
     99a:	3e 87       	std	Y+14, r19	; 0x0e
     99c:	2d 87       	std	Y+13, r18	; 0x0d
        block_address = offset - block_offset;
     99e:	19 01       	movw	r2, r18
     9a0:	29 81       	ldd	r18, Y+1	; 0x01
     9a2:	3a 81       	ldd	r19, Y+2	; 0x02
     9a4:	4b 81       	ldd	r20, Y+3	; 0x03
     9a6:	5c 81       	ldd	r21, Y+4	; 0x04
     9a8:	6d 81       	ldd	r22, Y+5	; 0x05
     9aa:	7e 81       	ldd	r23, Y+6	; 0x06
     9ac:	8f 81       	ldd	r24, Y+7	; 0x07
     9ae:	98 85       	ldd	r25, Y+8	; 0x08
     9b0:	51 01       	movw	r10, r2
     9b2:	c1 2c       	mov	r12, r1
     9b4:	d1 2c       	mov	r13, r1
     9b6:	e1 2c       	mov	r14, r1
     9b8:	f1 2c       	mov	r15, r1
     9ba:	00 e0       	ldi	r16, 0x00	; 0
     9bc:	10 e0       	ldi	r17, 0x00	; 0
     9be:	99 d6       	rcall	.+3378   	; 0x16f2 <__subdi3>
     9c0:	39 01       	movw	r6, r18
     9c2:	4a 01       	movw	r8, r20
     9c4:	1b 01       	movw	r2, r22
     9c6:	2c 01       	movw	r4, r24
        read_length = 512 - block_offset; /* read up to block border */
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	ed 85       	ldd	r30, Y+13	; 0x0d
     9ce:	fe 85       	ldd	r31, Y+14	; 0x0e
     9d0:	8e 1b       	sub	r24, r30
     9d2:	9f 0b       	sbc	r25, r31
     9d4:	2b 85       	ldd	r18, Y+11	; 0x0b
     9d6:	3c 85       	ldd	r19, Y+12	; 0x0c
     9d8:	38 8b       	std	Y+16, r19	; 0x10
     9da:	2f 87       	std	Y+15, r18	; 0x0f
     9dc:	82 17       	cp	r24, r18
     9de:	93 07       	cpc	r25, r19
     9e0:	10 f4       	brcc	.+4      	; 0x9e6 <sd_raw_read+0xaa>
     9e2:	98 8b       	std	Y+16, r25	; 0x10
     9e4:	8f 87       	std	Y+15, r24	; 0x0f
        if(block_address != raw_block_address)
     9e6:	a0 90 5c 02 	lds	r10, 0x025C	; 0x80025c <raw_block_address>
     9ea:	b0 90 5d 02 	lds	r11, 0x025D	; 0x80025d <raw_block_address+0x1>
     9ee:	c0 90 5e 02 	lds	r12, 0x025E	; 0x80025e <raw_block_address+0x2>
     9f2:	d0 90 5f 02 	lds	r13, 0x025F	; 0x80025f <raw_block_address+0x3>
     9f6:	e0 90 60 02 	lds	r14, 0x0260	; 0x800260 <raw_block_address+0x4>
     9fa:	f0 90 61 02 	lds	r15, 0x0261	; 0x800261 <raw_block_address+0x5>
     9fe:	00 91 62 02 	lds	r16, 0x0262	; 0x800262 <raw_block_address+0x6>
     a02:	10 91 63 02 	lds	r17, 0x0263	; 0x800263 <raw_block_address+0x7>
     a06:	93 01       	movw	r18, r6
     a08:	a4 01       	movw	r20, r8
     a0a:	b1 01       	movw	r22, r2
     a0c:	c2 01       	movw	r24, r4
     a0e:	7a d6       	rcall	.+3316   	; 0x1704 <__cmpdi2>
     a10:	09 f4       	brne	.+2      	; 0xa14 <sd_raw_read+0xd8>
     a12:	80 c0       	rjmp	.+256    	; 0xb14 <__stack+0x15>
            select_card();
     a14:	28 98       	cbi	0x05, 0	; 5
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
     a16:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <sd_raw_card_type>
     a1a:	82 ff       	sbrs	r24, 2
     a1c:	25 c0       	rjmp	.+74     	; 0xa68 <sd_raw_read+0x12c>
     a1e:	84 2d       	mov	r24, r4
     a20:	09 e0       	ldi	r16, 0x09	; 9
     a22:	42 d6       	rcall	.+3204   	; 0x16a8 <__lshrdi3>
     a24:	ba 01       	movw	r22, r20
     a26:	42 2f       	mov	r20, r18
     a28:	53 2f       	mov	r21, r19
     a2a:	81 e1       	ldi	r24, 0x11	; 17
     a2c:	5b df       	rcall	.-330    	; 0x8e4 <sd_raw_send_command>
     a2e:	88 23       	and	r24, r24
     a30:	f1 f0       	breq	.+60     	; 0xa6e <sd_raw_read+0x132>
                unselect_card();
     a32:	28 9a       	sbi	0x05, 0	; 5
                return 0;
     a34:	80 e0       	ldi	r24, 0x00	; 0
}
     a36:	60 96       	adiw	r28, 0x10	; 16
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	f8 94       	cli
     a3c:	de bf       	out	0x3e, r29	; 62
     a3e:	0f be       	out	0x3f, r0	; 63
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	9f 90       	pop	r9
     a58:	8f 90       	pop	r8
     a5a:	7f 90       	pop	r7
     a5c:	6f 90       	pop	r6
     a5e:	5f 90       	pop	r5
     a60:	4f 90       	pop	r4
     a62:	3f 90       	pop	r3
     a64:	2f 90       	pop	r2
     a66:	08 95       	ret
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
     a68:	a3 01       	movw	r20, r6
     a6a:	b4 01       	movw	r22, r8
     a6c:	de cf       	rjmp	.-68     	; 0xa2a <sd_raw_read+0xee>
            while(sd_raw_rec_byte() != 0xfe);
     a6e:	30 df       	rcall	.-416    	; 0x8d0 <sd_raw_rec_byte>
     a70:	8e 3f       	cpi	r24, 0xFE	; 254
     a72:	e9 f7       	brne	.-6      	; 0xa6e <sd_raw_read+0x132>
     a74:	04 e6       	ldi	r16, 0x64	; 100
     a76:	12 e0       	ldi	r17, 0x02	; 2
                *cache++ = sd_raw_rec_byte();
     a78:	2b df       	rcall	.-426    	; 0x8d0 <sd_raw_rec_byte>
     a7a:	f8 01       	movw	r30, r16
     a7c:	81 93       	st	Z+, r24
     a7e:	8f 01       	movw	r16, r30
            for(uint16_t i = 0; i < 512; ++i)
     a80:	f4 e0       	ldi	r31, 0x04	; 4
     a82:	04 36       	cpi	r16, 0x64	; 100
     a84:	1f 07       	cpc	r17, r31
     a86:	c1 f7       	brne	.-16     	; 0xa78 <sd_raw_read+0x13c>
            raw_block_address = block_address;
     a88:	60 92 5c 02 	sts	0x025C, r6	; 0x80025c <raw_block_address>
     a8c:	70 92 5d 02 	sts	0x025D, r7	; 0x80025d <raw_block_address+0x1>
     a90:	80 92 5e 02 	sts	0x025E, r8	; 0x80025e <raw_block_address+0x2>
     a94:	90 92 5f 02 	sts	0x025F, r9	; 0x80025f <raw_block_address+0x3>
     a98:	20 92 60 02 	sts	0x0260, r2	; 0x800260 <raw_block_address+0x4>
     a9c:	30 92 61 02 	sts	0x0261, r3	; 0x800261 <raw_block_address+0x5>
     aa0:	40 92 62 02 	sts	0x0262, r4	; 0x800262 <raw_block_address+0x6>
     aa4:	50 92 63 02 	sts	0x0263, r5	; 0x800263 <raw_block_address+0x7>
            memcpy(buffer, raw_block + block_offset, read_length);
     aa8:	6d 85       	ldd	r22, Y+13	; 0x0d
     aaa:	7e 85       	ldd	r23, Y+14	; 0x0e
     aac:	6c 59       	subi	r22, 0x9C	; 156
     aae:	7d 4f       	sbci	r23, 0xFD	; 253
     ab0:	4f 85       	ldd	r20, Y+15	; 0x0f
     ab2:	58 89       	ldd	r21, Y+16	; 0x10
     ab4:	89 85       	ldd	r24, Y+9	; 0x09
     ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ab8:	2e d6       	rcall	.+3164   	; 0x1716 <memcpy>
            buffer += read_length;
     aba:	29 85       	ldd	r18, Y+9	; 0x09
     abc:	3a 85       	ldd	r19, Y+10	; 0x0a
     abe:	8f 85       	ldd	r24, Y+15	; 0x0f
     ac0:	98 89       	ldd	r25, Y+16	; 0x10
     ac2:	28 0f       	add	r18, r24
     ac4:	39 1f       	adc	r19, r25
     ac6:	3a 87       	std	Y+10, r19	; 0x0a
     ac8:	29 87       	std	Y+9, r18	; 0x09
            sd_raw_rec_byte();
     aca:	02 df       	rcall	.-508    	; 0x8d0 <sd_raw_rec_byte>
            sd_raw_rec_byte();
     acc:	01 df       	rcall	.-510    	; 0x8d0 <sd_raw_rec_byte>
            unselect_card();
     ace:	28 9a       	sbi	0x05, 0	; 5
            sd_raw_rec_byte();
     ad0:	ff de       	rcall	.-514    	; 0x8d0 <sd_raw_rec_byte>
        length -= read_length;
     ad2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ad4:	9c 85       	ldd	r25, Y+12	; 0x0c
     ad6:	ef 85       	ldd	r30, Y+15	; 0x0f
     ad8:	f8 89       	ldd	r31, Y+16	; 0x10
     ada:	8e 1b       	sub	r24, r30
     adc:	9f 0b       	sbc	r25, r31
     ade:	9c 87       	std	Y+12, r25	; 0x0c
     ae0:	8b 87       	std	Y+11, r24	; 0x0b
        offset += read_length;
     ae2:	9f 01       	movw	r18, r30
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a9 80       	ldd	r10, Y+1	; 0x01
     af2:	ba 80       	ldd	r11, Y+2	; 0x02
     af4:	cb 80       	ldd	r12, Y+3	; 0x03
     af6:	dc 80       	ldd	r13, Y+4	; 0x04
     af8:	ed 80       	ldd	r14, Y+5	; 0x05
     afa:	fe 80       	ldd	r15, Y+6	; 0x06
     afc:	0f 81       	ldd	r16, Y+7	; 0x07
     afe:	18 85       	ldd	r17, Y+8	; 0x08
     b00:	ef d5       	rcall	.+3038   	; 0x16e0 <__adddi3>
     b02:	29 83       	std	Y+1, r18	; 0x01
     b04:	3a 83       	std	Y+2, r19	; 0x02
     b06:	4b 83       	std	Y+3, r20	; 0x03
     b08:	5c 83       	std	Y+4, r21	; 0x04
     b0a:	6d 83       	std	Y+5, r22	; 0x05
     b0c:	7e 83       	std	Y+6, r23	; 0x06
     b0e:	8f 83       	std	Y+7, r24	; 0x07
     b10:	98 87       	std	Y+8, r25	; 0x08
     b12:	3a cf       	rjmp	.-396    	; 0x988 <sd_raw_read+0x4c>
            memcpy(buffer, raw_block + block_offset, read_length);
     b14:	6d 85       	ldd	r22, Y+13	; 0x0d
     b16:	7e 85       	ldd	r23, Y+14	; 0x0e
     b18:	6c 59       	subi	r22, 0x9C	; 156
     b1a:	7d 4f       	sbci	r23, 0xFD	; 253
     b1c:	4f 85       	ldd	r20, Y+15	; 0x0f
     b1e:	58 89       	ldd	r21, Y+16	; 0x10
     b20:	89 85       	ldd	r24, Y+9	; 0x09
     b22:	9a 85       	ldd	r25, Y+10	; 0x0a
     b24:	f8 d5       	rcall	.+3056   	; 0x1716 <memcpy>
            buffer += read_length;
     b26:	e9 85       	ldd	r30, Y+9	; 0x09
     b28:	fa 85       	ldd	r31, Y+10	; 0x0a
     b2a:	2f 85       	ldd	r18, Y+15	; 0x0f
     b2c:	38 89       	ldd	r19, Y+16	; 0x10
     b2e:	e2 0f       	add	r30, r18
     b30:	f3 1f       	adc	r31, r19
     b32:	fa 87       	std	Y+10, r31	; 0x0a
     b34:	e9 87       	std	Y+9, r30	; 0x09
     b36:	cd cf       	rjmp	.-102    	; 0xad2 <sd_raw_read+0x196>

00000b38 <sd_raw_init>:
{
     b38:	cf 92       	push	r12
     b3a:	df 92       	push	r13
     b3c:	ef 92       	push	r14
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
    configure_pin_mosi();
     b48:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_sck();
     b4a:	21 9a       	sbi	0x04, 1	; 4
    configure_pin_ss();
     b4c:	24 9a       	sbi	0x04, 4	; 4
    configure_pin_miso();
     b4e:	23 98       	cbi	0x04, 3	; 4
    unselect_card();
     b50:	28 9a       	sbi	0x05, 0	; 5
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
     b52:	83 e5       	ldi	r24, 0x53	; 83
     b54:	8c bd       	out	0x2c, r24	; 44
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
     b56:	8d b5       	in	r24, 0x2d	; 45
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	8d bd       	out	0x2d, r24	; 45
    sd_raw_card_type = 0;
     b5c:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <sd_raw_card_type>
     b60:	ca e0       	ldi	r28, 0x0A	; 10
        sd_raw_rec_byte();
     b62:	b6 de       	rcall	.-660    	; 0x8d0 <sd_raw_rec_byte>
     b64:	c1 50       	subi	r28, 0x01	; 1
    for(uint8_t i = 0; i < 10; ++i)
     b66:	e9 f7       	brne	.-6      	; 0xb62 <sd_raw_init+0x2a>
    select_card();
     b68:	28 98       	cbi	0x05, 0	; 5
     b6a:	c0 e0       	ldi	r28, 0x00	; 0
     b6c:	d2 e0       	ldi	r29, 0x02	; 2
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
     b6e:	40 e0       	ldi	r20, 0x00	; 0
     b70:	50 e0       	ldi	r21, 0x00	; 0
     b72:	ba 01       	movw	r22, r20
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	b6 de       	rcall	.-660    	; 0x8e4 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	21 f0       	breq	.+8      	; 0xb84 <sd_raw_init+0x4c>
     b7c:	21 97       	sbiw	r28, 0x01	; 1
        if(i == 0x1ff)
     b7e:	b9 f7       	brne	.-18     	; 0xb6e <sd_raw_init+0x36>
            unselect_card();
     b80:	28 9a       	sbi	0x05, 0	; 5
     b82:	0d c0       	rjmp	.+26     	; 0xb9e <sd_raw_init+0x66>
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
     b84:	4a ea       	ldi	r20, 0xAA	; 170
     b86:	51 e0       	ldi	r21, 0x01	; 1
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	aa de       	rcall	.-684    	; 0x8e4 <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
     b90:	82 fd       	sbrc	r24, 2
     b92:	2b c0       	rjmp	.+86     	; 0xbea <sd_raw_init+0xb2>
        sd_raw_rec_byte();
     b94:	9d de       	rcall	.-710    	; 0x8d0 <sd_raw_rec_byte>
        sd_raw_rec_byte();
     b96:	9c de       	rcall	.-712    	; 0x8d0 <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
     b98:	9b de       	rcall	.-714    	; 0x8d0 <sd_raw_rec_byte>
     b9a:	80 fd       	sbrc	r24, 0
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <sd_raw_init+0x6a>
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	83 c0       	rjmp	.+262    	; 0xca8 <sd_raw_init+0x170>
        if(sd_raw_rec_byte() != 0xaa)
     ba2:	96 de       	rcall	.-724    	; 0x8d0 <sd_raw_rec_byte>
     ba4:	8a 3a       	cpi	r24, 0xAA	; 170
     ba6:	d9 f7       	brne	.-10     	; 0xb9e <sd_raw_init+0x66>
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
     ba8:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <sd_raw_card_type>
     bac:	82 60       	ori	r24, 0x02	; 2
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
     bae:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <sd_raw_card_type>
    select_card();
     bb2:	c0 e0       	ldi	r28, 0x00	; 0
     bb4:	d0 e8       	ldi	r29, 0x80	; 128
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
     bb6:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <sd_raw_card_type>
     bba:	98 2f       	mov	r25, r24
     bbc:	93 70       	andi	r25, 0x03	; 3
     bbe:	49 f1       	breq	.+82     	; 0xc12 <sd_raw_init+0xda>
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
     bc0:	81 ff       	sbrs	r24, 1
     bc2:	23 c0       	rjmp	.+70     	; 0xc0a <sd_raw_init+0xd2>
                arg = 0x40000000;
     bc4:	c1 2c       	mov	r12, r1
     bc6:	d1 2c       	mov	r13, r1
     bc8:	e1 2c       	mov	r14, r1
     bca:	90 e4       	ldi	r25, 0x40	; 64
     bcc:	f9 2e       	mov	r15, r25
            sd_raw_send_command(CMD_APP, 0);
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	ba 01       	movw	r22, r20
     bd4:	87 e3       	ldi	r24, 0x37	; 55
     bd6:	86 de       	rcall	.-756    	; 0x8e4 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
     bd8:	b7 01       	movw	r22, r14
     bda:	a6 01       	movw	r20, r12
     bdc:	89 e2       	ldi	r24, 0x29	; 41
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
     bde:	82 de       	rcall	.-764    	; 0x8e4 <sd_raw_send_command>
        if((response & (1 << R1_IDLE_STATE)) == 0)
     be0:	80 ff       	sbrs	r24, 0
     be2:	1c c0       	rjmp	.+56     	; 0xc1c <sd_raw_init+0xe4>
     be4:	21 97       	sbiw	r28, 0x01	; 1
        if(i == 0x7fff)
     be6:	39 f7       	brne	.-50     	; 0xbb6 <sd_raw_init+0x7e>
     be8:	cb cf       	rjmp	.-106    	; 0xb80 <sd_raw_init+0x48>
        sd_raw_send_command(CMD_APP, 0);
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	ba 01       	movw	r22, r20
     bf0:	87 e3       	ldi	r24, 0x37	; 55
     bf2:	78 de       	rcall	.-784    	; 0x8e4 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	ba 01       	movw	r22, r20
     bfa:	89 e2       	ldi	r24, 0x29	; 41
     bfc:	73 de       	rcall	.-794    	; 0x8e4 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
     bfe:	82 fd       	sbrc	r24, 2
     c00:	d8 cf       	rjmp	.-80     	; 0xbb2 <sd_raw_init+0x7a>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
     c02:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <sd_raw_card_type>
     c06:	81 60       	ori	r24, 0x01	; 1
     c08:	d2 cf       	rjmp	.-92     	; 0xbae <sd_raw_init+0x76>
            uint32_t arg = 0;
     c0a:	c1 2c       	mov	r12, r1
     c0c:	d1 2c       	mov	r13, r1
     c0e:	76 01       	movw	r14, r12
     c10:	de cf       	rjmp	.-68     	; 0xbce <sd_raw_init+0x96>
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	50 e0       	ldi	r21, 0x00	; 0
     c16:	ba 01       	movw	r22, r20
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	e1 cf       	rjmp	.-62     	; 0xbde <sd_raw_init+0xa6>
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
     c1c:	c0 91 5b 02 	lds	r28, 0x025B	; 0x80025b <sd_raw_card_type>
     c20:	c1 ff       	sbrs	r28, 1
     c22:	10 c0       	rjmp	.+32     	; 0xc44 <sd_raw_init+0x10c>
        if(sd_raw_send_command(CMD_READ_OCR, 0))
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	ba 01       	movw	r22, r20
     c2a:	8a e3       	ldi	r24, 0x3A	; 58
     c2c:	5b de       	rcall	.-842    	; 0x8e4 <sd_raw_send_command>
     c2e:	81 11       	cpse	r24, r1
     c30:	a7 cf       	rjmp	.-178    	; 0xb80 <sd_raw_init+0x48>
        if(sd_raw_rec_byte() & 0x40)
     c32:	4e de       	rcall	.-868    	; 0x8d0 <sd_raw_rec_byte>
     c34:	86 ff       	sbrs	r24, 6
     c36:	03 c0       	rjmp	.+6      	; 0xc3e <sd_raw_init+0x106>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
     c38:	c4 60       	ori	r28, 0x04	; 4
     c3a:	c0 93 5b 02 	sts	0x025B, r28	; 0x80025b <sd_raw_card_type>
        sd_raw_rec_byte();
     c3e:	48 de       	rcall	.-880    	; 0x8d0 <sd_raw_rec_byte>
        sd_raw_rec_byte();
     c40:	47 de       	rcall	.-882    	; 0x8d0 <sd_raw_rec_byte>
        sd_raw_rec_byte();
     c42:	46 de       	rcall	.-884    	; 0x8d0 <sd_raw_rec_byte>
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
     c44:	40 e0       	ldi	r20, 0x00	; 0
     c46:	52 e0       	ldi	r21, 0x02	; 2
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	80 e1       	ldi	r24, 0x10	; 16
     c4e:	4a de       	rcall	.-876    	; 0x8e4 <sd_raw_send_command>
        unselect_card();
     c50:	28 9a       	sbi	0x05, 0	; 5
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
     c52:	81 11       	cpse	r24, r1
     c54:	a4 cf       	rjmp	.-184    	; 0xb9e <sd_raw_init+0x66>
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
     c56:	8c b5       	in	r24, 0x2c	; 44
     c58:	8c 7f       	andi	r24, 0xFC	; 252
     c5a:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
     c5c:	8d b5       	in	r24, 0x2d	; 45
     c5e:	81 60       	ori	r24, 0x01	; 1
     c60:	8d bd       	out	0x2d, r24	; 45
    raw_block_address = (offset_t) -1;
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	80 93 5c 02 	sts	0x025C, r24	; 0x80025c <raw_block_address>
     c68:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <raw_block_address+0x1>
     c6c:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <raw_block_address+0x2>
     c70:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <raw_block_address+0x3>
     c74:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <raw_block_address+0x4>
     c78:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <raw_block_address+0x5>
     c7c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <raw_block_address+0x6>
     c80:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <raw_block_address+0x7>
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
     c84:	e1 2c       	mov	r14, r1
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	f8 2e       	mov	r15, r24
     c8a:	04 e6       	ldi	r16, 0x64	; 100
     c8c:	12 e0       	ldi	r17, 0x02	; 2
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	40 e0       	ldi	r20, 0x00	; 0
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	4e de       	rcall	.-868    	; 0x93c <sd_raw_read>
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	88 23       	and	r24, r24
     ca4:	09 f4       	brne	.+2      	; 0xca8 <sd_raw_init+0x170>
     ca6:	7b cf       	rjmp	.-266    	; 0xb9e <sd_raw_init+0x66>
}
     ca8:	89 2f       	mov	r24, r25
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	08 95       	ret

00000cbc <Endpoint_Null_Stream>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     cbc:	cf 92       	push	r12
     cbe:	df 92       	push	r13
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	ec 01       	movw	r28, r24
     ccc:	8b 01       	movw	r16, r22
     cce:	e2 d1       	rcall	.+964    	; 0x1094 <Endpoint_WaitUntilReady>
     cd0:	f8 2e       	mov	r15, r24
     cd2:	81 11       	cpse	r24, r1
     cd4:	21 c0       	rjmp	.+66     	; 0xd18 <Endpoint_Null_Stream+0x5c>
     cd6:	01 15       	cp	r16, r1
     cd8:	11 05       	cpc	r17, r1
     cda:	29 f0       	breq	.+10     	; 0xce6 <Endpoint_Null_Stream+0x2a>
     cdc:	f8 01       	movw	r30, r16
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	c8 1b       	sub	r28, r24
     ce4:	d9 0b       	sbc	r29, r25
     ce6:	c1 2c       	mov	r12, r1
     ce8:	d1 2c       	mov	r13, r1
     cea:	20 97       	sbiw	r28, 0x00	; 0
     cec:	a9 f0       	breq	.+42     	; 0xd18 <Endpoint_Null_Stream+0x5c>
     cee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cf2:	85 fd       	sbrc	r24, 5
     cf4:	1f c0       	rjmp	.+62     	; 0xd34 <Endpoint_Null_Stream+0x78>
     cf6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cfa:	8e 77       	andi	r24, 0x7E	; 126
     cfc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d00:	01 15       	cp	r16, r1
     d02:	11 05       	cpc	r17, r1
     d04:	91 f0       	breq	.+36     	; 0xd2a <Endpoint_Null_Stream+0x6e>
     d06:	f8 01       	movw	r30, r16
     d08:	80 81       	ld	r24, Z
     d0a:	91 81       	ldd	r25, Z+1	; 0x01
     d0c:	c8 0e       	add	r12, r24
     d0e:	d9 1e       	adc	r13, r25
     d10:	d1 82       	std	Z+1, r13	; 0x01
     d12:	c0 82       	st	Z, r12
     d14:	85 e0       	ldi	r24, 0x05	; 5
     d16:	f8 2e       	mov	r15, r24
     d18:	8f 2d       	mov	r24, r15
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	ff 90       	pop	r15
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	08 95       	ret
     d2a:	b4 d1       	rcall	.+872    	; 0x1094 <Endpoint_WaitUntilReady>
     d2c:	88 23       	and	r24, r24
     d2e:	e9 f2       	breq	.-70     	; 0xcea <Endpoint_Null_Stream+0x2e>
     d30:	f8 2e       	mov	r15, r24
     d32:	f2 cf       	rjmp	.-28     	; 0xd18 <Endpoint_Null_Stream+0x5c>
     d34:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     d38:	21 97       	sbiw	r28, 0x01	; 1
     d3a:	ff ef       	ldi	r31, 0xFF	; 255
     d3c:	cf 1a       	sub	r12, r31
     d3e:	df 0a       	sbc	r13, r31
     d40:	d4 cf       	rjmp	.-88     	; 0xcea <Endpoint_Null_Stream+0x2e>

00000d42 <Endpoint_Write_Stream_LE>:
     d42:	af 92       	push	r10
     d44:	bf 92       	push	r11
     d46:	df 92       	push	r13
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	ec 01       	movw	r28, r24
     d56:	8b 01       	movw	r16, r22
     d58:	7a 01       	movw	r14, r20
     d5a:	9c d1       	rcall	.+824    	; 0x1094 <Endpoint_WaitUntilReady>
     d5c:	d8 2e       	mov	r13, r24
     d5e:	81 11       	cpse	r24, r1
     d60:	24 c0       	rjmp	.+72     	; 0xdaa <Endpoint_Write_Stream_LE+0x68>
     d62:	e1 14       	cp	r14, r1
     d64:	f1 04       	cpc	r15, r1
     d66:	39 f0       	breq	.+14     	; 0xd76 <Endpoint_Write_Stream_LE+0x34>
     d68:	f7 01       	movw	r30, r14
     d6a:	80 81       	ld	r24, Z
     d6c:	91 81       	ldd	r25, Z+1	; 0x01
     d6e:	08 1b       	sub	r16, r24
     d70:	19 0b       	sbc	r17, r25
     d72:	c8 0f       	add	r28, r24
     d74:	d9 1f       	adc	r29, r25
     d76:	a1 2c       	mov	r10, r1
     d78:	b1 2c       	mov	r11, r1
     d7a:	01 15       	cp	r16, r1
     d7c:	11 05       	cpc	r17, r1
     d7e:	a9 f0       	breq	.+42     	; 0xdaa <Endpoint_Write_Stream_LE+0x68>
     d80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d84:	85 fd       	sbrc	r24, 5
     d86:	21 c0       	rjmp	.+66     	; 0xdca <Endpoint_Write_Stream_LE+0x88>
     d88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d8c:	8e 77       	andi	r24, 0x7E	; 126
     d8e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d92:	e1 14       	cp	r14, r1
     d94:	f1 04       	cpc	r15, r1
     d96:	a1 f0       	breq	.+40     	; 0xdc0 <Endpoint_Write_Stream_LE+0x7e>
     d98:	f7 01       	movw	r30, r14
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	a8 0e       	add	r10, r24
     da0:	b9 1e       	adc	r11, r25
     da2:	b1 82       	std	Z+1, r11	; 0x01
     da4:	a0 82       	st	Z, r10
     da6:	85 e0       	ldi	r24, 0x05	; 5
     da8:	d8 2e       	mov	r13, r24
     daa:	8d 2d       	mov	r24, r13
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	08 95       	ret
     dc0:	69 d1       	rcall	.+722    	; 0x1094 <Endpoint_WaitUntilReady>
     dc2:	88 23       	and	r24, r24
     dc4:	d1 f2       	breq	.-76     	; 0xd7a <Endpoint_Write_Stream_LE+0x38>
     dc6:	d8 2e       	mov	r13, r24
     dc8:	f0 cf       	rjmp	.-32     	; 0xdaa <Endpoint_Write_Stream_LE+0x68>
     dca:	89 91       	ld	r24, Y+
     dcc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     dd0:	01 50       	subi	r16, 0x01	; 1
     dd2:	11 09       	sbc	r17, r1
     dd4:	ff ef       	ldi	r31, 0xFF	; 255
     dd6:	af 1a       	sub	r10, r31
     dd8:	bf 0a       	sbc	r11, r31
     dda:	cf cf       	rjmp	.-98     	; 0xd7a <Endpoint_Write_Stream_LE+0x38>

00000ddc <Endpoint_Read_Stream_LE>:
     ddc:	af 92       	push	r10
     dde:	bf 92       	push	r11
     de0:	df 92       	push	r13
     de2:	ef 92       	push	r14
     de4:	ff 92       	push	r15
     de6:	0f 93       	push	r16
     de8:	1f 93       	push	r17
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	ec 01       	movw	r28, r24
     df0:	8b 01       	movw	r16, r22
     df2:	7a 01       	movw	r14, r20
     df4:	4f d1       	rcall	.+670    	; 0x1094 <Endpoint_WaitUntilReady>
     df6:	d8 2e       	mov	r13, r24
     df8:	81 11       	cpse	r24, r1
     dfa:	24 c0       	rjmp	.+72     	; 0xe44 <Endpoint_Read_Stream_LE+0x68>
     dfc:	e1 14       	cp	r14, r1
     dfe:	f1 04       	cpc	r15, r1
     e00:	39 f0       	breq	.+14     	; 0xe10 <Endpoint_Read_Stream_LE+0x34>
     e02:	f7 01       	movw	r30, r14
     e04:	80 81       	ld	r24, Z
     e06:	91 81       	ldd	r25, Z+1	; 0x01
     e08:	08 1b       	sub	r16, r24
     e0a:	19 0b       	sbc	r17, r25
     e0c:	c8 0f       	add	r28, r24
     e0e:	d9 1f       	adc	r29, r25
     e10:	a1 2c       	mov	r10, r1
     e12:	b1 2c       	mov	r11, r1
     e14:	01 15       	cp	r16, r1
     e16:	11 05       	cpc	r17, r1
     e18:	a9 f0       	breq	.+42     	; 0xe44 <Endpoint_Read_Stream_LE+0x68>
     e1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e1e:	85 fd       	sbrc	r24, 5
     e20:	21 c0       	rjmp	.+66     	; 0xe64 <Endpoint_Read_Stream_LE+0x88>
     e22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e26:	8b 77       	andi	r24, 0x7B	; 123
     e28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e2c:	e1 14       	cp	r14, r1
     e2e:	f1 04       	cpc	r15, r1
     e30:	a1 f0       	breq	.+40     	; 0xe5a <Endpoint_Read_Stream_LE+0x7e>
     e32:	f7 01       	movw	r30, r14
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	a8 0e       	add	r10, r24
     e3a:	b9 1e       	adc	r11, r25
     e3c:	b1 82       	std	Z+1, r11	; 0x01
     e3e:	a0 82       	st	Z, r10
     e40:	85 e0       	ldi	r24, 0x05	; 5
     e42:	d8 2e       	mov	r13, r24
     e44:	8d 2d       	mov	r24, r13
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	ef 90       	pop	r14
     e52:	df 90       	pop	r13
     e54:	bf 90       	pop	r11
     e56:	af 90       	pop	r10
     e58:	08 95       	ret
     e5a:	1c d1       	rcall	.+568    	; 0x1094 <Endpoint_WaitUntilReady>
     e5c:	88 23       	and	r24, r24
     e5e:	d1 f2       	breq	.-76     	; 0xe14 <Endpoint_Read_Stream_LE+0x38>
     e60:	d8 2e       	mov	r13, r24
     e62:	f0 cf       	rjmp	.-32     	; 0xe44 <Endpoint_Read_Stream_LE+0x68>
     e64:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     e68:	89 93       	st	Y+, r24
     e6a:	01 50       	subi	r16, 0x01	; 1
     e6c:	11 09       	sbc	r17, r1
     e6e:	ff ef       	ldi	r31, 0xFF	; 255
     e70:	af 1a       	sub	r10, r31
     e72:	bf 0a       	sbc	r11, r31
     e74:	cf cf       	rjmp	.-98     	; 0xe14 <Endpoint_Read_Stream_LE+0x38>

00000e76 <Endpoint_Write_Control_Stream_LE>:
     e76:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <USB_ControlRequest+0x6>
     e7a:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <USB_ControlRequest+0x7>
     e7e:	26 17       	cp	r18, r22
     e80:	37 07       	cpc	r19, r23
     e82:	a8 f0       	brcs	.+42     	; 0xeae <Endpoint_Write_Control_Stream_LE+0x38>
     e84:	61 15       	cp	r22, r1
     e86:	71 05       	cpc	r23, r1
     e88:	29 f4       	brne	.+10     	; 0xe94 <Endpoint_Write_Control_Stream_LE+0x1e>
     e8a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e8e:	2e 77       	andi	r18, 0x7E	; 126
     e90:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e94:	fc 01       	movw	r30, r24
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	61 15       	cp	r22, r1
     e9a:	71 05       	cpc	r23, r1
     e9c:	51 f4       	brne	.+20     	; 0xeb2 <Endpoint_Write_Control_Stream_LE+0x3c>
     e9e:	21 11       	cpse	r18, r1
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <Endpoint_Write_Control_Stream_LE+0x3c>
     ea2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ea6:	82 ff       	sbrs	r24, 2
     ea8:	33 c0       	rjmp	.+102    	; 0xf10 <Endpoint_Write_Control_Stream_LE+0x9a>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	08 95       	ret
     eae:	b9 01       	movw	r22, r18
     eb0:	f1 cf       	rjmp	.-30     	; 0xe94 <Endpoint_Write_Control_Stream_LE+0x1e>
     eb2:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <USB_DeviceState>
     eb6:	88 23       	and	r24, r24
     eb8:	b9 f1       	breq	.+110    	; 0xf28 <Endpoint_Write_Control_Stream_LE+0xb2>
     eba:	85 30       	cpi	r24, 0x05	; 5
     ebc:	b9 f1       	breq	.+110    	; 0xf2c <Endpoint_Write_Control_Stream_LE+0xb6>
     ebe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ec2:	83 fd       	sbrc	r24, 3
     ec4:	2f c0       	rjmp	.+94     	; 0xf24 <Endpoint_Write_Control_Stream_LE+0xae>
     ec6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     eca:	82 fd       	sbrc	r24, 2
     ecc:	ea cf       	rjmp	.-44     	; 0xea2 <Endpoint_Write_Control_Stream_LE+0x2c>
     ece:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ed2:	80 ff       	sbrs	r24, 0
     ed4:	e1 cf       	rjmp	.-62     	; 0xe98 <Endpoint_Write_Control_Stream_LE+0x22>
     ed6:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     eda:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	92 2b       	or	r25, r18
     ee2:	61 15       	cp	r22, r1
     ee4:	71 05       	cpc	r23, r1
     ee6:	19 f0       	breq	.+6      	; 0xeee <Endpoint_Write_Control_Stream_LE+0x78>
     ee8:	88 30       	cpi	r24, 0x08	; 8
     eea:	91 05       	cpc	r25, r1
     eec:	50 f0       	brcs	.+20     	; 0xf02 <Endpoint_Write_Control_Stream_LE+0x8c>
     eee:	21 e0       	ldi	r18, 0x01	; 1
     ef0:	08 97       	sbiw	r24, 0x08	; 8
     ef2:	09 f0       	breq	.+2      	; 0xef6 <Endpoint_Write_Control_Stream_LE+0x80>
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     efa:	8e 77       	andi	r24, 0x7E	; 126
     efc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f00:	cb cf       	rjmp	.-106    	; 0xe98 <Endpoint_Write_Control_Stream_LE+0x22>
     f02:	21 91       	ld	r18, Z+
     f04:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     f08:	61 50       	subi	r22, 0x01	; 1
     f0a:	71 09       	sbc	r23, r1
     f0c:	01 96       	adiw	r24, 0x01	; 1
     f0e:	e9 cf       	rjmp	.-46     	; 0xee2 <Endpoint_Write_Control_Stream_LE+0x6c>
     f10:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <USB_DeviceState>
     f14:	88 23       	and	r24, r24
     f16:	41 f0       	breq	.+16     	; 0xf28 <Endpoint_Write_Control_Stream_LE+0xb2>
     f18:	85 30       	cpi	r24, 0x05	; 5
     f1a:	41 f0       	breq	.+16     	; 0xf2c <Endpoint_Write_Control_Stream_LE+0xb6>
     f1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f20:	83 ff       	sbrs	r24, 3
     f22:	bf cf       	rjmp	.-130    	; 0xea2 <Endpoint_Write_Control_Stream_LE+0x2c>
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	08 95       	ret
     f28:	82 e0       	ldi	r24, 0x02	; 2
     f2a:	08 95       	ret
     f2c:	83 e0       	ldi	r24, 0x03	; 3
     f2e:	08 95       	ret

00000f30 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     f30:	20 91 8e 04 	lds	r18, 0x048E	; 0x80048e <USB_ControlRequest+0x6>
     f34:	30 91 8f 04 	lds	r19, 0x048F	; 0x80048f <USB_ControlRequest+0x7>
     f38:	26 17       	cp	r18, r22
     f3a:	37 07       	cpc	r19, r23
     f3c:	a8 f0       	brcs	.+42     	; 0xf68 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     f3e:	61 15       	cp	r22, r1
     f40:	71 05       	cpc	r23, r1
     f42:	29 f4       	brne	.+10     	; 0xf4e <Endpoint_Write_Control_PStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f44:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f48:	2e 77       	andi	r18, 0x7E	; 126
     f4a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f4e:	fc 01       	movw	r30, r24
     f50:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     f52:	61 15       	cp	r22, r1
     f54:	71 05       	cpc	r23, r1
     f56:	51 f4       	brne	.+20     	; 0xf6c <Endpoint_Write_Control_PStream_LE+0x3c>
     f58:	21 11       	cpse	r18, r1
     f5a:	08 c0       	rjmp	.+16     	; 0xf6c <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     f60:	82 ff       	sbrs	r24, 2
     f62:	34 c0       	rjmp	.+104    	; 0xfcc <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	08 95       	ret
     f68:	b9 01       	movw	r22, r18
     f6a:	f1 cf       	rjmp	.-30     	; 0xf4e <Endpoint_Write_Control_PStream_LE+0x1e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     f6c:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     f70:	88 23       	and	r24, r24
     f72:	c1 f1       	breq	.+112    	; 0xfe4 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     f74:	85 30       	cpi	r24, 0x05	; 5
     f76:	c1 f1       	breq	.+112    	; 0xfe8 <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     f78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     f7c:	83 fd       	sbrc	r24, 3
     f7e:	30 c0       	rjmp	.+96     	; 0xfe0 <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     f80:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
     f84:	82 fd       	sbrc	r24, 2
     f86:	ea cf       	rjmp	.-44     	; 0xf5c <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f88:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
     f8c:	80 ff       	sbrs	r24, 0
     f8e:	e1 cf       	rjmp	.-62     	; 0xf52 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     f90:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     f94:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	92 2b       	or	r25, r18
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     f9c:	61 15       	cp	r22, r1
     f9e:	71 05       	cpc	r23, r1
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <Endpoint_Write_Control_PStream_LE+0x78>
     fa2:	88 30       	cpi	r24, 0x08	; 8
     fa4:	91 05       	cpc	r25, r1
     fa6:	50 f0       	brcs	.+20     	; 0xfbc <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     fa8:	21 e0       	ldi	r18, 0x01	; 1
     faa:	08 97       	sbiw	r24, 0x08	; 8
     fac:	09 f0       	breq	.+2      	; 0xfb0 <Endpoint_Write_Control_PStream_LE+0x80>
     fae:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fb4:	8e 77       	andi	r24, 0x7E	; 126
     fb6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fba:	cb cf       	rjmp	.-106    	; 0xf52 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     fbc:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fbe:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     fc2:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     fc4:	61 50       	subi	r22, 0x01	; 1
     fc6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	e8 cf       	rjmp	.-48     	; 0xf9c <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     fcc:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     fd0:	88 23       	and	r24, r24
     fd2:	41 f0       	breq	.+16     	; 0xfe4 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     fd4:	85 30       	cpi	r24, 0x05	; 5
     fd6:	41 f0       	breq	.+16     	; 0xfe8 <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fd8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     fdc:	83 ff       	sbrs	r24, 3
     fde:	be cf       	rjmp	.-132    	; 0xf5c <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
}
     fe2:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     fe8:	83 e0       	ldi	r24, 0x03	; 3
     fea:	08 95       	ret

00000fec <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     fec:	98 2f       	mov	r25, r24
     fee:	97 30       	cpi	r25, 0x07	; 7
     ff0:	28 f0       	brcs	.+10     	; 0xffc <Endpoint_ConfigureEndpoint_Prv+0x10>
     ff2:	8f 70       	andi	r24, 0x0F	; 15
     ff4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	08 95       	ret
     ffc:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1000:	98 17       	cp	r25, r24
    1002:	51 f0       	breq	.+20     	; 0x1018 <Endpoint_ConfigureEndpoint_Prv+0x2c>
    1004:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1008:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    100c:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1010:	21 fd       	sbrc	r18, 1
    1012:	06 c0       	rjmp	.+12     	; 0x1020 <Endpoint_ConfigureEndpoint_Prv+0x34>
    1014:	9f 5f       	subi	r25, 0xFF	; 255
    1016:	eb cf       	rjmp	.-42     	; 0xfee <Endpoint_ConfigureEndpoint_Prv+0x2>
    1018:	24 2f       	mov	r18, r20
    101a:	76 2f       	mov	r23, r22
    101c:	50 e0       	ldi	r21, 0x00	; 0
    101e:	f8 cf       	rjmp	.-16     	; 0x1010 <Endpoint_ConfigureEndpoint_Prv+0x24>
    1020:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1024:	3e 7f       	andi	r19, 0xFE	; 254
    1026:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    102a:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    102e:	3d 7f       	andi	r19, 0xFD	; 253
    1030:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1034:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1038:	31 60       	ori	r19, 0x01	; 1
    103a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    103e:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1042:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1046:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    104a:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    104e:	27 fd       	sbrc	r18, 7
    1050:	e1 cf       	rjmp	.-62     	; 0x1014 <Endpoint_ConfigureEndpoint_Prv+0x28>
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	08 95       	ret

00001056 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1056:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <USB_ControlRequest>
    105a:	87 ff       	sbrs	r24, 7
    105c:	13 c0       	rjmp	.+38     	; 0x1084 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    105e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1062:	82 ff       	sbrs	r24, 2
    1064:	06 c0       	rjmp	.+12     	; 0x1072 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1066:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    106a:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    106c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1070:	04 c0       	rjmp	.+8      	; 0x107a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1072:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <USB_DeviceState>
    1076:	81 11       	cpse	r24, r1
    1078:	f2 cf       	rjmp	.-28     	; 0x105e <Endpoint_ClearStatusStage+0x8>
    107a:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    107c:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <USB_DeviceState>
    1080:	88 23       	and	r24, r24
    1082:	d9 f3       	breq	.-10     	; 0x107a <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1084:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    1088:	80 ff       	sbrs	r24, 0
    108a:	f8 cf       	rjmp	.-16     	; 0x107c <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    108c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1090:	8e 77       	andi	r24, 0x7E	; 126
    1092:	ec cf       	rjmp	.-40     	; 0x106c <Endpoint_ClearStatusStage+0x16>

00001094 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1094:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1098:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    109c:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    109e:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    10a2:	90 fd       	sbrc	r25, 0
    10a4:	20 c0       	rjmp	.+64     	; 0x10e6 <Endpoint_WaitUntilReady+0x52>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10a6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    10aa:	92 fd       	sbrc	r25, 2
    10ac:	20 c0       	rjmp	.+64     	; 0x10ee <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    10ae:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    10b2:	99 23       	and	r25, r25
    10b4:	91 f0       	breq	.+36     	; 0x10da <Endpoint_WaitUntilReady+0x46>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    10b6:	95 30       	cpi	r25, 0x05	; 5
    10b8:	91 f0       	breq	.+36     	; 0x10de <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    10ba:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    10be:	95 fd       	sbrc	r25, 5
    10c0:	10 c0       	rjmp	.+32     	; 0x10e2 <Endpoint_WaitUntilReady+0x4e>
    10c2:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    10c6:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    10ca:	42 17       	cp	r20, r18
    10cc:	53 07       	cpc	r21, r19
    10ce:	39 f3       	breq	.-50     	; 0x109e <Endpoint_WaitUntilReady+0xa>
    10d0:	81 50       	subi	r24, 0x01	; 1
    10d2:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    10d4:	21 f7       	brne	.-56     	; 0x109e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    10d6:	84 e0       	ldi	r24, 0x04	; 4
    10d8:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    10de:	83 e0       	ldi	r24, 0x03	; 3
    10e0:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	08 95       	ret
				return ((UEINTX & (1 << TXINI)) ? true : false);
    10e6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
    10ea:	90 ff       	sbrs	r25, 0
    10ec:	e0 cf       	rjmp	.-64     	; 0x10ae <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	08 95       	ret

000010f2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    10fa:	4b d0       	rcall	.+150    	; 0x1192 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    10fc:	52 d0       	rcall	.+164    	; 0x11a2 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    10fe:	c8 ed       	ldi	r28, 0xD8	; 216
    1100:	d0 e0       	ldi	r29, 0x00	; 0
    1102:	88 81       	ld	r24, Y
    1104:	8f 77       	andi	r24, 0x7F	; 127
    1106:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1108:	88 81       	ld	r24, Y
    110a:	80 68       	ori	r24, 0x80	; 128
    110c:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    110e:	88 81       	ld	r24, Y
    1110:	8f 7d       	andi	r24, 0xDF	; 223
    1112:	88 83       	st	Y, r24
				PLLCSR = 0;
    1114:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1116:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    111a:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    111e:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1122:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1126:	00 ee       	ldi	r16, 0xE0	; 224
    1128:	10 e0       	ldi	r17, 0x00	; 0
    112a:	f8 01       	movw	r30, r16
    112c:	80 81       	ld	r24, Z
    112e:	8b 7f       	andi	r24, 0xFB	; 251
    1130:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1132:	88 81       	ld	r24, Y
    1134:	81 60       	ori	r24, 0x01	; 1
    1136:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1138:	42 e0       	ldi	r20, 0x02	; 2
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	56 df       	rcall	.-340    	; 0xfec <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1140:	e1 ee       	ldi	r30, 0xE1	; 225
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	8e 7f       	andi	r24, 0xFE	; 254
    1148:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    114a:	e2 ee       	ldi	r30, 0xE2	; 226
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	81 60       	ori	r24, 0x01	; 1
    1152:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    1154:	80 81       	ld	r24, Z
    1156:	88 60       	ori	r24, 0x08	; 8
    1158:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    115a:	f8 01       	movw	r30, r16
    115c:	80 81       	ld	r24, Z
    115e:	8e 7f       	andi	r24, 0xFE	; 254
    1160:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    1162:	88 81       	ld	r24, Y
    1164:	80 61       	ori	r24, 0x10	; 16
    1166:	88 83       	st	Y, r24
}
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	08 95       	ret

00001172 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    1172:	e8 ed       	ldi	r30, 0xD8	; 216
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8f 7e       	andi	r24, 0xEF	; 239
    117a:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    117c:	e7 ed       	ldi	r30, 0xD7	; 215
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	81 60       	ori	r24, 0x01	; 1
    1184:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    1186:	84 e0       	ldi	r24, 0x04	; 4
    1188:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <USB_IsInitialized>
	USB_ResetInterface();
    1190:	b0 cf       	rjmp	.-160    	; 0x10f2 <USB_ResetInterface>

00001192 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1192:	e8 ed       	ldi	r30, 0xD8	; 216
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	8e 7f       	andi	r24, 0xFE	; 254
    119a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    119c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    11a0:	08 95       	ret

000011a2 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    11a2:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    11a6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    11aa:	08 95       	ret

000011ac <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	2f 93       	push	r18
    11b8:	3f 93       	push	r19
    11ba:	4f 93       	push	r20
    11bc:	5f 93       	push	r21
    11be:	6f 93       	push	r22
    11c0:	7f 93       	push	r23
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
    11c6:	af 93       	push	r26
    11c8:	bf 93       	push	r27
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    11ce:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    11d2:	82 ff       	sbrs	r24, 2
    11d4:	0a c0       	rjmp	.+20     	; 0x11ea <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
    11d6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    11da:	82 ff       	sbrs	r24, 2
    11dc:	06 c0       	rjmp	.+12     	; 0x11ea <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
    11de:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    11e2:	8b 7f       	andi	r24, 0xFB	; 251
    11e4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    11e8:	41 d2       	rcall	.+1154   	; 0x166c <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    11ea:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    11ee:	80 ff       	sbrs	r24, 0
    11f0:	19 c0       	rjmp	.+50     	; 0x1224 <__vector_10+0x78>
						return (USBCON & (1 << VBUSTE));
    11f2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    11f6:	80 ff       	sbrs	r24, 0
    11f8:	15 c0       	rjmp	.+42     	; 0x1224 <__vector_10+0x78>
						USBINT &= ~(1 << VBUSTI);
    11fa:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    11fe:	8e 7f       	andi	r24, 0xFE	; 254
    1200:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1204:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1208:	80 ff       	sbrs	r24, 0
    120a:	90 c0       	rjmp	.+288    	; 0x132c <__vector_10+0x180>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    120c:	80 e1       	ldi	r24, 0x10	; 16
    120e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1210:	82 e1       	ldi	r24, 0x12	; 18
    1212:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1214:	09 b4       	in	r0, 0x29	; 41
    1216:	00 fe       	sbrs	r0, 0
    1218:	fd cf       	rjmp	.-6      	; 0x1214 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1220:	0e 94 dd 00 	call	0x1ba	; 0x1ba <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    1224:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1228:	80 ff       	sbrs	r24, 0
    122a:	18 c0       	rjmp	.+48     	; 0x125c <__vector_10+0xb0>
						return (UDIEN  & (1 << SUSPE));
    122c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1230:	80 ff       	sbrs	r24, 0
    1232:	14 c0       	rjmp	.+40     	; 0x125c <__vector_10+0xb0>
						UDIEN  &= ~(1 << SUSPE);
    1234:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1238:	8e 7f       	andi	r24, 0xFE	; 254
    123a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    123e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1242:	80 61       	ori	r24, 0x10	; 16
    1244:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1248:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    124c:	80 62       	ori	r24, 0x20	; 32
    124e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    1252:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1254:	85 e0       	ldi	r24, 0x05	; 5
    1256:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    125a:	08 d2       	rcall	.+1040   	; 0x166c <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
    125c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1260:	84 ff       	sbrs	r24, 4
    1262:	28 c0       	rjmp	.+80     	; 0x12b4 <__vector_10+0x108>
						return (UDIEN  & (1 << WAKEUPE));
    1264:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1268:	84 ff       	sbrs	r24, 4
    126a:	24 c0       	rjmp	.+72     	; 0x12b4 <__vector_10+0x108>
				PLLCSR = USB_PLL_PSC;
    126c:	80 e1       	ldi	r24, 0x10	; 16
    126e:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1270:	82 e1       	ldi	r24, 0x12	; 18
    1272:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1274:	09 b4       	in	r0, 0x29	; 41
    1276:	00 fe       	sbrs	r0, 0
    1278:	fd cf       	rjmp	.-6      	; 0x1274 <__vector_10+0xc8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    127a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    127e:	8f 7d       	andi	r24, 0xDF	; 223
    1280:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    1284:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1288:	8f 7e       	andi	r24, 0xEF	; 239
    128a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    128e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1292:	8f 7e       	andi	r24, 0xEF	; 239
    1294:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    1298:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    129c:	81 60       	ori	r24, 0x01	; 1
    129e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    12a2:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <USB_Device_ConfigurationNumber>
    12a6:	88 23       	and	r24, r24
    12a8:	09 f4       	brne	.+2      	; 0x12ac <__vector_10+0x100>
    12aa:	46 c0       	rjmp	.+140    	; 0x1338 <__vector_10+0x18c>
		  USB_DeviceState = DEVICE_STATE_Configured;
    12ac:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    12ae:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    12b2:	dc d1       	rcall	.+952    	; 0x166c <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
    12b4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    12b8:	83 ff       	sbrs	r24, 3
    12ba:	27 c0       	rjmp	.+78     	; 0x130a <__vector_10+0x15e>
						return (UDIEN  & (1 << EORSTE));
    12bc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    12c0:	83 ff       	sbrs	r24, 3
    12c2:	23 c0       	rjmp	.+70     	; 0x130a <__vector_10+0x15e>
						UDINT  &= ~(1 << EORSTI);
    12c4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    12c8:	87 7f       	andi	r24, 0xF7	; 247
    12ca:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    12d4:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    12d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    12dc:	8e 7f       	andi	r24, 0xFE	; 254
    12de:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    12e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    12e6:	8e 7f       	andi	r24, 0xFE	; 254
    12e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    12ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    12f0:	80 61       	ori	r24, 0x10	; 16
    12f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    12f6:	42 e0       	ldi	r20, 0x02	; 2
    12f8:	60 e0       	ldi	r22, 0x00	; 0
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	77 de       	rcall	.-786    	; 0xfec <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    12fe:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1302:	88 60       	ori	r24, 0x08	; 8
    1304:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1308:	b1 d1       	rcall	.+866    	; 0x166c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    130a:	ff 91       	pop	r31
    130c:	ef 91       	pop	r30
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti
				PLLCSR = 0;
    132c:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    132e:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1332:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <EVENT_USB_Device_Disconnect>
    1336:	76 cf       	rjmp	.-276    	; 0x1224 <__vector_10+0x78>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1338:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    133c:	87 fd       	sbrc	r24, 7
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <__vector_10+0x198>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	b5 cf       	rjmp	.-150    	; 0x12ae <__vector_10+0x102>
    1344:	83 e0       	ldi	r24, 0x03	; 3
    1346:	b3 cf       	rjmp	.-154    	; 0x12ae <__vector_10+0x102>

00001348 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	2f 93       	push	r18
    1354:	3f 93       	push	r19
    1356:	4f 93       	push	r20
    1358:	5f 93       	push	r21
    135a:	6f 93       	push	r22
    135c:	7f 93       	push	r23
    135e:	8f 93       	push	r24
    1360:	9f 93       	push	r25
    1362:	af 93       	push	r26
    1364:	bf 93       	push	r27
    1366:	cf 93       	push	r28
    1368:	ef 93       	push	r30
    136a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    136c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1370:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1372:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1376:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    137a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    137e:	87 7f       	andi	r24, 0xF7	; 247
    1380:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1384:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1386:	1b d0       	rcall	.+54     	; 0x13be <USB_Device_ProcessControlRequest>
    1388:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    138c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1390:	88 60       	ori	r24, 0x08	; 8
    1392:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1396:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	cf 91       	pop	r28
    13a0:	bf 91       	pop	r27
    13a2:	af 91       	pop	r26
    13a4:	9f 91       	pop	r25
    13a6:	8f 91       	pop	r24
    13a8:	7f 91       	pop	r23
    13aa:	6f 91       	pop	r22
    13ac:	5f 91       	pop	r21
    13ae:	4f 91       	pop	r20
    13b0:	3f 91       	pop	r19
    13b2:	2f 91       	pop	r18
    13b4:	0f 90       	pop	r0
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	0f 90       	pop	r0
    13ba:	1f 90       	pop	r1
    13bc:	18 95       	reti

000013be <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	aa 97       	sbiw	r28, 0x2a	; 42
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    13d4:	e8 e8       	ldi	r30, 0x88	; 136
    13d6:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    13d8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    13dc:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    13de:	24 e0       	ldi	r18, 0x04	; 4
    13e0:	e0 39       	cpi	r30, 0x90	; 144
    13e2:	f2 07       	cpc	r31, r18
    13e4:	c9 f7       	brne	.-14     	; 0x13d8 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    13e6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    13ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    13ee:	83 ff       	sbrs	r24, 3
    13f0:	10 c0       	rjmp	.+32     	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    13f2:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    13f6:	90 91 89 04 	lds	r25, 0x0489	; 0x800489 <USB_ControlRequest+0x1>
    13fa:	95 30       	cpi	r25, 0x05	; 5
    13fc:	09 f4       	brne	.+2      	; 0x1400 <USB_Device_ProcessControlRequest+0x42>
    13fe:	d2 c0       	rjmp	.+420    	; 0x15a4 <USB_Device_ProcessControlRequest+0x1e6>
    1400:	00 f5       	brcc	.+64     	; 0x1442 <USB_Device_ProcessControlRequest+0x84>
    1402:	91 30       	cpi	r25, 0x01	; 1
    1404:	09 f4       	brne	.+2      	; 0x1408 <USB_Device_ProcessControlRequest+0x4a>
    1406:	88 c0       	rjmp	.+272    	; 0x1518 <USB_Device_ProcessControlRequest+0x15a>
    1408:	08 f4       	brcc	.+2      	; 0x140c <USB_Device_ProcessControlRequest+0x4e>
    140a:	61 c0       	rjmp	.+194    	; 0x14ce <USB_Device_ProcessControlRequest+0x110>
    140c:	93 30       	cpi	r25, 0x03	; 3
    140e:	09 f4       	brne	.+2      	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
    1410:	83 c0       	rjmp	.+262    	; 0x1518 <USB_Device_ProcessControlRequest+0x15a>
    1412:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1416:	83 ff       	sbrs	r24, 3
    1418:	0a c0       	rjmp	.+20     	; 0x142e <USB_Device_ProcessControlRequest+0x70>
				UEINTX &= ~(1 << RXSTPI);
    141a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    141e:	87 7f       	andi	r24, 0xF7	; 247
    1420:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    1424:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1428:	80 62       	ori	r24, 0x20	; 32
    142a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    142e:	aa 96       	adiw	r28, 0x2a	; 42
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
    1442:	98 30       	cpi	r25, 0x08	; 8
    1444:	09 f4       	brne	.+2      	; 0x1448 <USB_Device_ProcessControlRequest+0x8a>
    1446:	e6 c0       	rjmp	.+460    	; 0x1614 <USB_Device_ProcessControlRequest+0x256>
    1448:	99 30       	cpi	r25, 0x09	; 9
    144a:	09 f4       	brne	.+2      	; 0x144e <USB_Device_ProcessControlRequest+0x90>
    144c:	f0 c0       	rjmp	.+480    	; 0x162e <USB_Device_ProcessControlRequest+0x270>
    144e:	96 30       	cpi	r25, 0x06	; 6
    1450:	01 f7       	brne	.-64     	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1452:	80 58       	subi	r24, 0x80	; 128
    1454:	82 30       	cpi	r24, 0x02	; 2
    1456:	e8 f6       	brcc	.-70     	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1458:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <USB_ControlRequest+0x2>
    145c:	90 91 8b 04 	lds	r25, 0x048B	; 0x80048b <USB_ControlRequest+0x3>
    1460:	8c 3d       	cpi	r24, 0xDC	; 220
    1462:	23 e0       	ldi	r18, 0x03	; 3
    1464:	92 07       	cpc	r25, r18
    1466:	09 f0       	breq	.+2      	; 0x146a <USB_Device_ProcessControlRequest+0xac>
    1468:	c1 c0       	rjmp	.+386    	; 0x15ec <USB_Device_ProcessControlRequest+0x22e>
	SignatureDescriptor.Header.Type = DTYPE_String;
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    146e:	8a e2       	ldi	r24, 0x2A	; 42
    1470:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1472:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1474:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1476:	de 01       	movw	r26, r28
    1478:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    147a:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    147c:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    147e:	51 e2       	ldi	r21, 0x21	; 33
    1480:	e3 2f       	mov	r30, r19
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    1488:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    148a:	20 ff       	sbrs	r18, 0
    148c:	03 c0       	rjmp	.+6      	; 0x1494 <USB_Device_ProcessControlRequest+0xd6>
					{
						SerialByte >>= 4;
    148e:	e2 95       	swap	r30
    1490:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1492:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1494:	ef 70       	andi	r30, 0x0F	; 15
    1496:	8e 2f       	mov	r24, r30
    1498:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    149a:	ea 30       	cpi	r30, 0x0A	; 10
    149c:	08 f4       	brcc	.+2      	; 0x14a0 <USB_Device_ProcessControlRequest+0xe2>
    149e:	a4 c0       	rjmp	.+328    	; 0x15e8 <USB_Device_ProcessControlRequest+0x22a>
    14a0:	c7 96       	adiw	r24, 0x37	; 55
    14a2:	8d 93       	st	X+, r24
    14a4:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    14a6:	2f 5f       	subi	r18, 0xFF	; 255
    14a8:	24 31       	cpi	r18, 0x14	; 20
    14aa:	51 f7       	brne	.-44     	; 0x1480 <USB_Device_ProcessControlRequest+0xc2>
				SREG = GlobalIntState;
    14ac:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    14ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14b2:	87 7f       	andi	r24, 0xF7	; 247
    14b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    14b8:	6a e2       	ldi	r22, 0x2A	; 42
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	ce 01       	movw	r24, r28
    14be:	01 96       	adiw	r24, 0x01	; 1
    14c0:	da dc       	rcall	.-1612   	; 0xe76 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    14c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14c6:	8b 77       	andi	r24, 0x7B	; 123
    14c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14cc:	a2 cf       	rjmp	.-188    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14ce:	80 38       	cpi	r24, 0x80	; 128
    14d0:	81 f0       	breq	.+32     	; 0x14f2 <USB_Device_ProcessControlRequest+0x134>
    14d2:	82 38       	cpi	r24, 0x82	; 130
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <USB_Device_ProcessControlRequest+0x11a>
    14d6:	9d cf       	rjmp	.-198    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    14d8:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <USB_ControlRequest+0x4>
    14dc:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14de:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    14e2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    14e6:	85 fb       	bst	r24, 5
    14e8:	88 27       	eor	r24, r24
    14ea:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14ec:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    14f0:	06 c0       	rjmp	.+12     	; 0x14fe <USB_Device_ProcessControlRequest+0x140>
	uint8_t CurrentStatus = 0;
    14f2:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    14f6:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <USB_Device_RemoteWakeupEnabled>
    14fa:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    14fc:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    14fe:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1502:	97 7f       	andi	r25, 0xF7	; 247
    1504:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1508:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    150c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1510:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1514:	8e 77       	andi	r24, 0x7E	; 126
    1516:	2f c0       	rjmp	.+94     	; 0x1576 <USB_Device_ProcessControlRequest+0x1b8>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1518:	28 2f       	mov	r18, r24
    151a:	2d 7f       	andi	r18, 0xFD	; 253
    151c:	09 f0       	breq	.+2      	; 0x1520 <USB_Device_ProcessControlRequest+0x162>
    151e:	79 cf       	rjmp	.-270    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1520:	88 23       	and	r24, r24
    1522:	d1 f0       	breq	.+52     	; 0x1558 <USB_Device_ProcessControlRequest+0x19a>
    1524:	82 30       	cpi	r24, 0x02	; 2
    1526:	09 f0       	breq	.+2      	; 0x152a <USB_Device_ProcessControlRequest+0x16c>
    1528:	74 cf       	rjmp	.-280    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    152a:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <USB_ControlRequest+0x2>
    152e:	81 11       	cpse	r24, r1
    1530:	1d c0       	rjmp	.+58     	; 0x156c <USB_Device_ProcessControlRequest+0x1ae>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1532:	80 91 8c 04 	lds	r24, 0x048C	; 0x80048c <USB_ControlRequest+0x4>
    1536:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1538:	09 f4       	brne	.+2      	; 0x153c <USB_Device_ProcessControlRequest+0x17e>
    153a:	6b cf       	rjmp	.-298    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    153c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    1540:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1544:	20 ff       	sbrs	r18, 0
    1546:	12 c0       	rjmp	.+36     	; 0x156c <USB_Device_ProcessControlRequest+0x1ae>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1548:	93 30       	cpi	r25, 0x03	; 3
    154a:	c9 f4       	brne	.+50     	; 0x157e <USB_Device_ProcessControlRequest+0x1c0>
				UECONX |= (1 << STALLRQ);
    154c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1550:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    1552:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1556:	0a c0       	rjmp	.+20     	; 0x156c <USB_Device_ProcessControlRequest+0x1ae>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1558:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <USB_ControlRequest+0x2>
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	09 f0       	breq	.+2      	; 0x1562 <USB_Device_ProcessControlRequest+0x1a4>
    1560:	58 cf       	rjmp	.-336    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1562:	93 30       	cpi	r25, 0x03	; 3
    1564:	09 f0       	breq	.+2      	; 0x1568 <USB_Device_ProcessControlRequest+0x1aa>
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	80 93 85 04 	sts	0x0485, r24	; 0x800485 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    156c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1570:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1574:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1576:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    157a:	6d dd       	rcall	.-1318   	; 0x1056 <Endpoint_ClearStatusStage>
    157c:	4a cf       	rjmp	.-364    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
				UECONX |= (1 << STALLRQC);
    157e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1582:	90 61       	ori	r25, 0x10	; 16
    1584:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1588:	21 e0       	ldi	r18, 0x01	; 1
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <USB_Device_ProcessControlRequest+0x1d2>
    158e:	22 0f       	add	r18, r18
    1590:	8a 95       	dec	r24
    1592:	ea f7       	brpl	.-6      	; 0x158e <USB_Device_ProcessControlRequest+0x1d0>
    1594:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    1598:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    159c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    15a0:	88 60       	ori	r24, 0x08	; 8
    15a2:	d7 cf       	rjmp	.-82     	; 0x1552 <USB_Device_ProcessControlRequest+0x194>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    15a4:	81 11       	cpse	r24, r1
    15a6:	35 cf       	rjmp	.-406    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    15a8:	10 91 8a 04 	lds	r17, 0x048A	; 0x80048a <USB_ControlRequest+0x2>
    15ac:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    15ae:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    15b2:	80 78       	andi	r24, 0x80	; 128
    15b4:	81 2b       	or	r24, r17
    15b6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    15ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15be:	87 7f       	andi	r24, 0xF7	; 247
    15c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    15c4:	48 dd       	rcall	.-1392   	; 0x1056 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    15ca:	80 ff       	sbrs	r24, 0
    15cc:	fc cf       	rjmp	.-8      	; 0x15c6 <USB_Device_ProcessControlRequest+0x208>
				UDADDR |= (1 << ADDEN);
    15ce:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    15d2:	80 68       	ori	r24, 0x80	; 128
    15d4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    15d8:	11 11       	cpse	r17, r1
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <USB_Device_ProcessControlRequest+0x226>
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <USB_DeviceState>
    15e2:	17 cf       	rjmp	.-466    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	fb cf       	rjmp	.-10     	; 0x15de <USB_Device_ProcessControlRequest+0x220>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    15e8:	c0 96       	adiw	r24, 0x30	; 48
    15ea:	5b cf       	rjmp	.-330    	; 0x14a2 <USB_Device_ProcessControlRequest+0xe4>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    15ec:	ae 01       	movw	r20, r28
    15ee:	4f 5f       	subi	r20, 0xFF	; 255
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    15f2:	60 91 8c 04 	lds	r22, 0x048C	; 0x80048c <USB_ControlRequest+0x4>
    15f6:	0e 94 2c 02 	call	0x458	; 0x458 <CALLBACK_USB_GetDescriptor>
    15fa:	bc 01       	movw	r22, r24
    15fc:	89 2b       	or	r24, r25
    15fe:	09 f4       	brne	.+2      	; 0x1602 <USB_Device_ProcessControlRequest+0x244>
    1600:	08 cf       	rjmp	.-496    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    1602:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1606:	97 7f       	andi	r25, 0xF7	; 247
    1608:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	8f dc       	rcall	.-1762   	; 0xf30 <Endpoint_Write_Control_PStream_LE>
    1612:	57 cf       	rjmp	.-338    	; 0x14c2 <USB_Device_ProcessControlRequest+0x104>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1614:	80 38       	cpi	r24, 0x80	; 128
    1616:	09 f0       	breq	.+2      	; 0x161a <USB_Device_ProcessControlRequest+0x25c>
    1618:	fc ce       	rjmp	.-520    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
    161a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    161e:	87 7f       	andi	r24, 0xF7	; 247
    1620:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1624:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    1628:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    162c:	71 cf       	rjmp	.-286    	; 0x1510 <USB_Device_ProcessControlRequest+0x152>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    162e:	81 11       	cpse	r24, r1
    1630:	f0 ce       	rjmp	.-544    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1632:	90 91 8a 04 	lds	r25, 0x048A	; 0x80048a <USB_ControlRequest+0x2>
    1636:	92 30       	cpi	r25, 0x02	; 2
    1638:	08 f0       	brcs	.+2      	; 0x163c <USB_Device_ProcessControlRequest+0x27e>
    163a:	eb ce       	rjmp	.-554    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    163c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1640:	87 7f       	andi	r24, 0xF7	; 247
    1642:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1646:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    164a:	05 dd       	rcall	.-1526   	; 0x1056 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    164c:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <USB_Device_ConfigurationNumber>
    1650:	88 23       	and	r24, r24
    1652:	11 f0       	breq	.+4      	; 0x1658 <USB_Device_ProcessControlRequest+0x29a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1654:	84 e0       	ldi	r24, 0x04	; 4
    1656:	05 c0       	rjmp	.+10     	; 0x1662 <USB_Device_ProcessControlRequest+0x2a4>
				return (UDADDR & (1 << ADDEN));
    1658:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    165c:	87 fd       	sbrc	r24, 7
    165e:	fa cf       	rjmp	.-12     	; 0x1654 <USB_Device_ProcessControlRequest+0x296>
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	80 93 87 04 	sts	0x0487, r24	; 0x800487 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1666:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <EVENT_USB_Device_ConfigurationChanged>
    166a:	d3 ce       	rjmp	.-602    	; 0x1412 <USB_Device_ProcessControlRequest+0x54>

0000166c <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    166c:	08 95       	ret

0000166e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    166e:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1670:	80 91 87 04 	lds	r24, 0x0487	; 0x800487 <USB_DeviceState>
    1674:	88 23       	and	r24, r24
    1676:	91 f0       	breq	.+36     	; 0x169c <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1678:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    167c:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    167e:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1682:	80 fd       	sbrc	r24, 0
    1684:	0d c0       	rjmp	.+26     	; 0x16a0 <USB_USBTask+0x32>
    1686:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1688:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    168a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    168e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1692:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1694:	94 de       	rcall	.-728    	; 0x13be <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1696:	cf 70       	andi	r28, 0x0F	; 15
    1698:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    169c:	cf 91       	pop	r28
    169e:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    16a0:	80 e8       	ldi	r24, 0x80	; 128
    16a2:	f2 cf       	rjmp	.-28     	; 0x1688 <USB_USBTask+0x1a>

000016a4 <__ashrdi3>:
    16a4:	97 fb       	bst	r25, 7
    16a6:	10 f8       	bld	r1, 0

000016a8 <__lshrdi3>:
    16a8:	16 94       	lsr	r1
    16aa:	00 08       	sbc	r0, r0
    16ac:	0f 93       	push	r16
    16ae:	08 30       	cpi	r16, 0x08	; 8
    16b0:	98 f0       	brcs	.+38     	; 0x16d8 <__lshrdi3+0x30>
    16b2:	08 50       	subi	r16, 0x08	; 8
    16b4:	23 2f       	mov	r18, r19
    16b6:	34 2f       	mov	r19, r20
    16b8:	45 2f       	mov	r20, r21
    16ba:	56 2f       	mov	r21, r22
    16bc:	67 2f       	mov	r22, r23
    16be:	78 2f       	mov	r23, r24
    16c0:	89 2f       	mov	r24, r25
    16c2:	90 2d       	mov	r25, r0
    16c4:	f4 cf       	rjmp	.-24     	; 0x16ae <__lshrdi3+0x6>
    16c6:	05 94       	asr	r0
    16c8:	97 95       	ror	r25
    16ca:	87 95       	ror	r24
    16cc:	77 95       	ror	r23
    16ce:	67 95       	ror	r22
    16d0:	57 95       	ror	r21
    16d2:	47 95       	ror	r20
    16d4:	37 95       	ror	r19
    16d6:	27 95       	ror	r18
    16d8:	0a 95       	dec	r16
    16da:	aa f7       	brpl	.-22     	; 0x16c6 <__lshrdi3+0x1e>
    16dc:	0f 91       	pop	r16
    16de:	08 95       	ret

000016e0 <__adddi3>:
    16e0:	2a 0d       	add	r18, r10
    16e2:	3b 1d       	adc	r19, r11
    16e4:	4c 1d       	adc	r20, r12
    16e6:	5d 1d       	adc	r21, r13
    16e8:	6e 1d       	adc	r22, r14
    16ea:	7f 1d       	adc	r23, r15
    16ec:	80 1f       	adc	r24, r16
    16ee:	91 1f       	adc	r25, r17
    16f0:	08 95       	ret

000016f2 <__subdi3>:
    16f2:	2a 19       	sub	r18, r10
    16f4:	3b 09       	sbc	r19, r11
    16f6:	4c 09       	sbc	r20, r12
    16f8:	5d 09       	sbc	r21, r13
    16fa:	6e 09       	sbc	r22, r14
    16fc:	7f 09       	sbc	r23, r15
    16fe:	80 0b       	sbc	r24, r16
    1700:	91 0b       	sbc	r25, r17
    1702:	08 95       	ret

00001704 <__cmpdi2>:
    1704:	2a 15       	cp	r18, r10
    1706:	3b 05       	cpc	r19, r11
    1708:	4c 05       	cpc	r20, r12
    170a:	5d 05       	cpc	r21, r13
    170c:	6e 05       	cpc	r22, r14
    170e:	7f 05       	cpc	r23, r15
    1710:	80 07       	cpc	r24, r16
    1712:	91 07       	cpc	r25, r17
    1714:	08 95       	ret

00001716 <memcpy>:
    1716:	fb 01       	movw	r30, r22
    1718:	dc 01       	movw	r26, r24
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <memcpy+0xa>
    171c:	01 90       	ld	r0, Z+
    171e:	0d 92       	st	X+, r0
    1720:	41 50       	subi	r20, 0x01	; 1
    1722:	50 40       	sbci	r21, 0x00	; 0
    1724:	d8 f7       	brcc	.-10     	; 0x171c <memcpy+0x6>
    1726:	08 95       	ret

00001728 <_exit>:
    1728:	f8 94       	cli

0000172a <__stop_program>:
    172a:	ff cf       	rjmp	.-2      	; 0x172a <__stop_program>
