
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b0  00800100  0000198a  00001a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000198a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000236  008002b0  008002b0  00001bce  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001bce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001be0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007704  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023fe  00000000  00000000  0000964c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003db6  00000000  00000000  0000ba4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b04  00000000  00000000  0000f800  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000027fa  00000000  00000000  00010304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d4f  00000000  00000000  00012afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000770  00000000  00000000  0001784d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8d c0       	rjmp	.+282    	; 0x11c <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_10>
      2c:	0c 94 d3 0a 	jmp	0x15a6	; 0x15a6 <__vector_11>
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop
      98:	5d c0       	rjmp	.+186    	; 0x154 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	5b c0       	rjmp	.+182    	; 0x154 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	59 c0       	rjmp	.+178    	; 0x154 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	57 c0       	rjmp	.+174    	; 0x154 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	55 c0       	rjmp	.+170    	; 0x154 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	2c 03 53 00 70 00 75 00 72 00 20 00 4d 00 75 00     ,.S.p.u.r. .M.u.
      bc:	6c 00 74 00 69 00 62 00 6f 00 6f 00 74 00 20 00     l.t.i.b.o.o.t. .
      cc:	44 00 65 00 76 00 69 00 63 00 65 00 00 00           D.e.v.i.c.e...

000000da <ManufacturerString>:
      da:	0a 03 53 00 70 00 75 00 72 00 00 00                 ..S.p.u.r...

000000e6 <LanguageString>:
      e6:	04 03 09 04                                         ....

000000ea <ConfigurationDescriptor>:
      ea:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      fa:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

0000010a <DeviceDescriptor>:
     10a:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     11a:	dc 01                                               ..

0000011c <__ctors_end>:
     11c:	11 24       	eor	r1, r1
     11e:	1f be       	out	0x3f, r1	; 63
     120:	cf ef       	ldi	r28, 0xFF	; 255
     122:	da e0       	ldi	r29, 0x0A	; 10
     124:	de bf       	out	0x3e, r29	; 62
     126:	cd bf       	out	0x3d, r28	; 61

00000128 <__do_copy_data>:
     128:	12 e0       	ldi	r17, 0x02	; 2
     12a:	a0 e0       	ldi	r26, 0x00	; 0
     12c:	b1 e0       	ldi	r27, 0x01	; 1
     12e:	ea e8       	ldi	r30, 0x8A	; 138
     130:	f9 e1       	ldi	r31, 0x19	; 25
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x10>
     134:	05 90       	lpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a0 3b       	cpi	r26, 0xB0	; 176
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0xc>

0000013e <__do_clear_bss>:
     13e:	24 e0       	ldi	r18, 0x04	; 4
     140:	a0 eb       	ldi	r26, 0xB0	; 176
     142:	b2 e0       	ldi	r27, 0x02	; 2
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	a6 3e       	cpi	r26, 0xE6	; 230
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	75 d1       	rcall	.+746    	; 0x43a <main>
     150:	0c 94 c3 0c 	jmp	0x1986	; 0x1986 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <LEDs_SetAllLEDs>:
				PORTC &= ~(LEDMask & LEDS_PORTC_LEDS);
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTB = ((PORTB |  LEDS_PORTB_LEDS) & ~(LEDMask & LEDS_PORTB_LEDS));
     156:	25 b1       	in	r18, 0x05	; 5
     158:	98 2f       	mov	r25, r24
     15a:	91 70       	andi	r25, 0x01	; 1
     15c:	90 95       	com	r25
     15e:	21 60       	ori	r18, 0x01	; 1
     160:	92 23       	and	r25, r18
     162:	95 b9       	out	0x05, r25	; 5
				PORTD = ((PORTD |  LEDS_PORTD_LEDS) & ~(LEDMask & LEDS_PORTD_LEDS));
     164:	2b b1       	in	r18, 0x0b	; 11
     166:	98 2f       	mov	r25, r24
     168:	90 72       	andi	r25, 0x20	; 32
     16a:	90 95       	com	r25
     16c:	20 62       	ori	r18, 0x20	; 32
     16e:	92 23       	and	r25, r18
     170:	9b b9       	out	0x0b, r25	; 11
				PORTC = ((PORTC & ~LEDS_PORTC_LEDS) |  (LEDMask & LEDS_PORTC_LEDS));
     172:	98 b1       	in	r25, 0x08	; 8
     174:	9f 77       	andi	r25, 0x7F	; 127
     176:	80 78       	andi	r24, 0x80	; 128
     178:	89 2b       	or	r24, r25
     17a:	88 b9       	out	0x08, r24	; 8
     17c:	08 95       	ret

0000017e <SetupHardware>:

void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     17e:	84 b7       	in	r24, 0x34	; 52
     180:	87 7f       	andi	r24, 0xF7	; 247
     182:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	a8 95       	wdr
     18a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     18e:	88 61       	ori	r24, 0x18	; 24
     190:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     194:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     198:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	80 e8       	ldi	r24, 0x80	; 128
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     1aa:	0f be       	out	0x3f, r0	; 63
				DDRB  |=  LEDS_PORTB_LEDS;
     1ac:	20 9a       	sbi	0x04, 0	; 4
				PORTB |=  LEDS_PORTB_LEDS;
     1ae:	28 9a       	sbi	0x05, 0	; 5
				DDRD  |=  LEDS_PORTD_LEDS;
     1b0:	55 9a       	sbi	0x0a, 5	; 10
				PORTD |=  LEDS_PORTD_LEDS;
     1b2:	5d 9a       	sbi	0x0b, 5	; 11
				DDRC  |=  LEDS_PORTC_LEDS;
     1b4:	3f 9a       	sbi	0x07, 7	; 7
				PORTC &= ~LEDS_PORTC_LEDS;
     1b6:	47 98       	cbi	0x08, 7	; 8
#endif

	/* Hardware Initialization */
	LEDs_Init();
	//Dataflash_Init();
	USB_Init();
     1b8:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <USB_Init>

000001bc <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs. */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1bc:	80 ea       	ldi	r24, 0xA0	; 160
     1be:	cb df       	rcall	.-106    	; 0x156 <LEDs_SetAllLEDs>

	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     1c0:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <__data_end>
     1c4:	08 95       	ret

000001c6 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs and stops the Mass Storage management task.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	c6 cf       	rjmp	.-116    	; 0x156 <LEDs_SetAllLEDs>

000001ca <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host set the current configuration
 *  of the USB device after enumeration - the device endpoints are configured and the Mass Storage management task started.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     1ca:	cf 93       	push	r28
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     1cc:	42 e3       	ldi	r20, 0x32	; 50
     1ce:	61 e8       	ldi	r22, 0x81	; 129
     1d0:	83 e0       	ldi	r24, 0x03	; 3
     1d2:	0e 94 25 09 	call	0x124a	; 0x124a <Endpoint_ConfigureEndpoint_Prv>
     1d6:	c8 2f       	mov	r28, r24
     1d8:	42 e3       	ldi	r20, 0x32	; 50
     1da:	60 e8       	ldi	r22, 0x80	; 128
     1dc:	84 e0       	ldi	r24, 0x04	; 4
     1de:	0e 94 25 09 	call	0x124a	; 0x124a <Endpoint_ConfigureEndpoint_Prv>
	/* Setup Mass Storage Data Endpoints */
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPADDR,  EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPADDR, EP_TYPE_BULK, MASS_STORAGE_IO_EPSIZE, 1);

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1e2:	88 23       	and	r24, r24
     1e4:	11 f0       	breq	.+4      	; 0x1ea <EVENT_USB_Device_ConfigurationChanged+0x20>
     1e6:	c1 11       	cpse	r28, r1
     1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <EVENT_USB_Device_ConfigurationChanged+0x26>
     1ea:	81 e8       	ldi	r24, 0x81	; 129
}
     1ec:	cf 91       	pop	r28
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1ee:	b3 cf       	rjmp	.-154    	; 0x156 <LEDs_SetAllLEDs>
     1f0:	80 e2       	ldi	r24, 0x20	; 32
     1f2:	fc cf       	rjmp	.-8      	; 0x1ec <EVENT_USB_Device_ConfigurationChanged+0x22>

000001f4 <EVENT_USB_Device_ControlRequest>:
	serialWrite(' ');
	serialWrite('\n');
	serialWrite('\r');*/

	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     1f4:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <USB_ControlRequest+0x1>
     1f8:	8e 3f       	cpi	r24, 0xFE	; 254
     1fa:	89 f0       	breq	.+34     	; 0x21e <EVENT_USB_Device_ControlRequest+0x2a>
     1fc:	8f 3f       	cpi	r24, 0xFF	; 255
     1fe:	09 f5       	brne	.+66     	; 0x242 <EVENT_USB_Device_ControlRequest+0x4e>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     200:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <USB_ControlRequest>
     204:	81 32       	cpi	r24, 0x21	; 33
     206:	e9 f4       	brne	.+58     	; 0x242 <EVENT_USB_Device_ControlRequest+0x4e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     208:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     20c:	87 7f       	andi	r24, 0xF7	; 247
     20e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     212:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <Endpoint_ClearStatusStage>

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     216:	81 e0       	ldi	r24, 0x01	; 1
     218:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__data_end>
     21c:	08 95       	ret
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     21e:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <USB_ControlRequest>
     222:	81 3a       	cpi	r24, 0xA1	; 161
     224:	71 f4       	brne	.+28     	; 0x242 <EVENT_USB_Device_ControlRequest+0x4e>
     226:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     22a:	87 7f       	andi	r24, 0xF7	; 247
     22c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     230:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     234:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     238:	8e 77       	andi	r24, 0x7E	; 126
     23a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_8(TOTAL_LUNS - 1);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     23e:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <Endpoint_ClearStatusStage>
     242:	08 95       	ret

00000244 <MassStorage_Task>:

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	00 d0       	rcall	.+0      	; 0x24a <MassStorage_Task+0x6>
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	de b7       	in	r29, 0x3e	; 62
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     24e:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <USB_DeviceState>
     252:	84 30       	cpi	r24, 0x04	; 4
     254:	09 f0       	breq	.+2      	; 0x258 <MassStorage_Task+0x14>
     256:	69 c0       	rjmp	.+210    	; 0x32a <MassStorage_Task+0xe6>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     258:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     25c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     260:	82 ff       	sbrs	r24, 2
     262:	39 c0       	rjmp	.+114    	; 0x2d6 <MassStorage_Task+0x92>
	  return false;

	/* Read in command block header */
	BytesTransferred = 0;
     264:	1a 82       	std	Y+2, r1	; 0x02
     266:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     268:	ae 01       	movw	r20, r28
     26a:	4f 5f       	subi	r20, 0xFF	; 255
     26c:	5f 4f       	sbci	r21, 0xFF	; 255
     26e:	6f e0       	ldi	r22, 0x0F	; 15
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	8a eb       	ldi	r24, 0xBA	; 186
     274:	94 e0       	ldi	r25, 0x04	; 4
     276:	e1 d6       	rcall	.+3522   	; 0x103a <Endpoint_Read_Stream_LE>
     278:	85 30       	cpi	r24, 0x05	; 5
     27a:	49 f1       	breq	.+82     	; 0x2ce <MassStorage_Task+0x8a>
		if (IsMassStoreReset)
		  return false;
	}

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != MS_CBW_SIGNATURE) ||
     27c:	80 91 ba 04 	lds	r24, 0x04BA	; 0x8004ba <CommandBlock>
     280:	90 91 bb 04 	lds	r25, 0x04BB	; 0x8004bb <CommandBlock+0x1>
     284:	a0 91 bc 04 	lds	r26, 0x04BC	; 0x8004bc <CommandBlock+0x2>
     288:	b0 91 bd 04 	lds	r27, 0x04BD	; 0x8004bd <CommandBlock+0x3>
     28c:	85 35       	cpi	r24, 0x55	; 85
     28e:	93 45       	sbci	r25, 0x53	; 83
     290:	a2 44       	sbci	r26, 0x42	; 66
     292:	b3 44       	sbci	r27, 0x43	; 67
     294:	71 f4       	brne	.+28     	; 0x2b2 <MassStorage_Task+0x6e>
     296:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <CommandBlock+0xd>
     29a:	81 11       	cpse	r24, r1
     29c:	0a c0       	rjmp	.+20     	; 0x2b2 <MassStorage_Task+0x6e>
	    (CommandBlock.LUN               >= TOTAL_LUNS)       ||
     29e:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <CommandBlock+0xc>
     2a2:	8f 71       	andi	r24, 0x1F	; 31
     2a4:	31 f4       	brne	.+12     	; 0x2b2 <MassStorage_Task+0x6e>
		(CommandBlock.Flags              & 0x1F)             ||
     2a6:	80 91 c8 04 	lds	r24, 0x04C8	; 0x8004c8 <CommandBlock+0xe>
     2aa:	81 50       	subi	r24, 0x01	; 1
     2ac:	80 31       	cpi	r24, 0x10	; 16
     2ae:	08 f4       	brcc	.+2      	; 0x2b2 <MassStorage_Task+0x6e>
     2b0:	41 c0       	rjmp	.+130    	; 0x334 <MassStorage_Task+0xf0>
				UECONX |= (1 << STALLRQ);
     2b2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2b6:	80 62       	ori	r24, 0x20	; 32
     2b8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2bc:	83 e0       	ldi	r24, 0x03	; 3
     2be:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQ);
     2c2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2c6:	80 62       	ori	r24, 0x20	; 32
     2c8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     2ce:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
     2d2:	88 23       	and	r24, r24
     2d4:	49 f2       	breq	.-110    	; 0x268 <MassStorage_Task+0x24>
	if (IsMassStoreReset)
     2d6:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
     2da:	88 23       	and	r24, r24
     2dc:	31 f1       	breq	.+76     	; 0x32a <MassStorage_Task+0xe6>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2de:	80 e1       	ldi	r24, 0x10	; 16
     2e0:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     2e4:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     2e8:	88 e0       	ldi	r24, 0x08	; 8
     2ea:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     2ee:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     2f2:	84 e0       	ldi	r24, 0x04	; 4
     2f4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     2f8:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     2fc:	80 61       	ori	r24, 0x10	; 16
     2fe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     302:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     306:	88 60       	ori	r24, 0x08	; 8
     308:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     30c:	83 e0       	ldi	r24, 0x03	; 3
     30e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
     312:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     316:	80 61       	ori	r24, 0x10	; 16
     318:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
     31c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     320:	88 60       	ori	r24, 0x08	; 8
     322:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		IsMassStoreReset = false;
     326:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <__data_end>
}
     32a:	0f 90       	pop	r0
     32c:	0f 90       	pop	r0
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret
	}

	//serialWriteArray(msg, 21);

	/* Read in command block command data */
	BytesTransferred = 0;
     334:	1a 82       	std	Y+2, r1	; 0x02
     336:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData, CommandBlock.SCSICommandLength,
     338:	60 91 c8 04 	lds	r22, 0x04C8	; 0x8004c8 <CommandBlock+0xe>
     33c:	70 e0       	ldi	r23, 0x00	; 0
     33e:	ae 01       	movw	r20, r28
     340:	4f 5f       	subi	r20, 0xFF	; 255
     342:	5f 4f       	sbci	r21, 0xFF	; 255
     344:	89 ec       	ldi	r24, 0xC9	; 201
     346:	94 e0       	ldi	r25, 0x04	; 4
     348:	78 d6       	rcall	.+3312   	; 0x103a <Endpoint_Read_Stream_LE>
     34a:	85 30       	cpi	r24, 0x05	; 5
     34c:	09 f4       	brne	.+2      	; 0x350 <MassStorage_Task+0x10c>
     34e:	5e c0       	rjmp	.+188    	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     350:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     354:	8b 77       	andi	r24, 0x7B	; 123
     356:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     35a:	80 e2       	ldi	r24, 0x20	; 32
     35c:	fc de       	rcall	.-520    	; 0x156 <LEDs_SetAllLEDs>
		if (CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
     35e:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <CommandBlock+0xc>
     362:	87 ff       	sbrs	r24, 7
     364:	03 c0       	rjmp	.+6      	; 0x36c <MassStorage_Task+0x128>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     366:	83 e0       	ldi	r24, 0x03	; 3
     368:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		CommandStatus.Status = SCSI_DecodeSCSICommand() ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
     36c:	99 d1       	rcall	.+818    	; 0x6a0 <SCSI_DecodeSCSICommand>
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	89 27       	eor	r24, r25
     372:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <CommandStatus+0xc>
		CommandStatus.Tag = CommandBlock.Tag;
     376:	40 91 be 04 	lds	r20, 0x04BE	; 0x8004be <CommandBlock+0x4>
     37a:	50 91 bf 04 	lds	r21, 0x04BF	; 0x8004bf <CommandBlock+0x5>
     37e:	60 91 c0 04 	lds	r22, 0x04C0	; 0x8004c0 <CommandBlock+0x6>
     382:	70 91 c1 04 	lds	r23, 0x04C1	; 0x8004c1 <CommandBlock+0x7>
     386:	40 93 69 01 	sts	0x0169, r20	; 0x800169 <CommandStatus+0x4>
     38a:	50 93 6a 01 	sts	0x016A, r21	; 0x80016a <CommandStatus+0x5>
     38e:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <CommandStatus+0x6>
     392:	70 93 6c 01 	sts	0x016C, r23	; 0x80016c <CommandStatus+0x7>
		CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     396:	40 91 c2 04 	lds	r20, 0x04C2	; 0x8004c2 <CommandBlock+0x8>
     39a:	50 91 c3 04 	lds	r21, 0x04C3	; 0x8004c3 <CommandBlock+0x9>
     39e:	60 91 c4 04 	lds	r22, 0x04C4	; 0x8004c4 <CommandBlock+0xa>
     3a2:	70 91 c5 04 	lds	r23, 0x04C5	; 0x8004c5 <CommandBlock+0xb>
     3a6:	40 93 6d 01 	sts	0x016D, r20	; 0x80016d <CommandStatus+0x8>
     3aa:	50 93 6e 01 	sts	0x016E, r21	; 0x80016e <CommandStatus+0x9>
     3ae:	60 93 6f 01 	sts	0x016F, r22	; 0x80016f <CommandStatus+0xa>
     3b2:	70 93 70 01 	sts	0x0170, r23	; 0x800170 <CommandStatus+0xb>
		if ((CommandStatus.Status == MS_SCSI_COMMAND_Fail) && (CommandStatus.DataTransferResidue))
     3b6:	88 23       	and	r24, r24
     3b8:	49 f0       	breq	.+18     	; 0x3cc <MassStorage_Task+0x188>
     3ba:	45 2b       	or	r20, r21
     3bc:	46 2b       	or	r20, r22
     3be:	47 2b       	or	r20, r23
     3c0:	29 f0       	breq	.+10     	; 0x3cc <MassStorage_Task+0x188>
				UECONX |= (1 << STALLRQ);
     3c2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     3c6:	80 62       	ori	r24, 0x20	; 32
     3c8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3d2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3d6:	85 fd       	sbrc	r24, 5
     3d8:	1f c0       	rjmp	.+62     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     3da:	83 e0       	ldi	r24, 0x03	; 3
     3dc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     3e0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPADDR);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     3e4:	85 fd       	sbrc	r24, 5
     3e6:	1f c0       	rjmp	.+62     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
		if (IsMassStoreReset)
		  return;
	}

	/* Write the CSW to the endpoint */
	BytesTransferred = 0;
     3e8:	1a 82       	std	Y+2, r1	; 0x02
     3ea:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     3ec:	ae 01       	movw	r20, r28
     3ee:	4f 5f       	subi	r20, 0xFF	; 255
     3f0:	5f 4f       	sbci	r21, 0xFF	; 255
     3f2:	6d e0       	ldi	r22, 0x0D	; 13
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	85 e6       	ldi	r24, 0x65	; 101
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	d2 d5       	rcall	.+2980   	; 0xfa0 <Endpoint_Write_Stream_LE>
     3fc:	85 30       	cpi	r24, 0x05	; 5
     3fe:	c1 f0       	breq	.+48     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     400:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     404:	8e 77       	andi	r24, 0x7E	; 126
     406:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     40a:	0a c0       	rjmp	.+20     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
		if (IsMassStoreReset)
     40c:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
     410:	88 23       	and	r24, r24
     412:	09 f4       	brne	.+2      	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
     414:	91 cf       	rjmp	.-222    	; 0x338 <MassStorage_Task+0xf4>
     416:	5f cf       	rjmp	.-322    	; 0x2d6 <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     418:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
     41c:	88 23       	and	r24, r24
     41e:	c9 f2       	breq	.-78     	; 0x3d2 <MassStorage_Task+0x18e>
		LEDs_SetAllLEDs(LEDMASK_USB_READY);
     420:	80 e2       	ldi	r24, 0x20	; 32
     422:	99 de       	rcall	.-718    	; 0x156 <LEDs_SetAllLEDs>
     424:	58 cf       	rjmp	.-336    	; 0x2d6 <MassStorage_Task+0x92>
		if (IsMassStoreReset)
     426:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
     42a:	88 23       	and	r24, r24
     42c:	c9 f2       	breq	.-78     	; 0x3e0 <MassStorage_Task+0x19c>
     42e:	f8 cf       	rjmp	.-16     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
	                                &BytesTransferred) == ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     430:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
     434:	88 23       	and	r24, r24
     436:	d1 f2       	breq	.-76     	; 0x3ec <MassStorage_Task+0x1a8>
     438:	f3 cf       	rjmp	.-26     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>

0000043a <main>:
	serialBegin();
     43a:	70 d0       	rcall	.+224    	; 0x51c <serialBegin>
	if(!sd_raw_init())
     43c:	a0 d3       	rcall	.+1856   	; 0xb7e <sd_raw_init>
     43e:	81 11       	cpse	r24, r1
     440:	08 c0       	rjmp	.+16     	; 0x452 <main+0x18>
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     442:	81 e8       	ldi	r24, 0x81	; 129
     444:	88 de       	rcall	.-752    	; 0x156 <LEDs_SetAllLEDs>
		serialWriteArray(sderrormsg, 20);
     446:	64 e1       	ldi	r22, 0x14	; 20
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	8e e3       	ldi	r24, 0x3E	; 62
     44c:	91 e0       	ldi	r25, 0x01	; 1
     44e:	7d d0       	rcall	.+250    	; 0x54a <serialWriteArray>
     450:	ff cf       	rjmp	.-2      	; 0x450 <main+0x16>
	DDRB &= ~(1 << DDB7) & ~(1 << DDB6);
     452:	84 b1       	in	r24, 0x04	; 4
     454:	8f 73       	andi	r24, 0x3F	; 63
     456:	84 b9       	out	0x04, r24	; 4
	if(PINB & (1 << PB6))
     458:	1e 9b       	sbis	0x03, 6	; 3
     45a:	28 c0       	rjmp	.+80     	; 0x4ac <main+0x72>
		sd_raw_write(0x00100047, "SPUR-MODE01", 11);
     45c:	9b e0       	ldi	r25, 0x0B	; 11
     45e:	e9 2e       	mov	r14, r25
     460:	f1 2c       	mov	r15, r1
     462:	08 e9       	ldi	r16, 0x98	; 152
     464:	12 e0       	ldi	r17, 0x02	; 2
		sd_raw_write(0x00100047, "SPUR_MODE02", 11);
     466:	27 e4       	ldi	r18, 0x47	; 71
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	40 e1       	ldi	r20, 0x10	; 16
     46c:	50 e0       	ldi	r21, 0x00	; 0
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	45 d4       	rcall	.+2186   	; 0xd02 <sd_raw_write>
		sd_raw_write(0x00100c47, "SPUR_MODE02", 11);
     478:	27 e4       	ldi	r18, 0x47	; 71
     47a:	3c e0       	ldi	r19, 0x0C	; 12
     47c:	40 e1       	ldi	r20, 0x10	; 16
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	3c d4       	rcall	.+2168   	; 0xd02 <sd_raw_write>
		sd_raw_write(0x00300200, "SPUR_MODE02", 11);
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	32 e0       	ldi	r19, 0x02	; 2
     48e:	40 e3       	ldi	r20, 0x30	; 48
     490:	50 e0       	ldi	r21, 0x00	; 0
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	33 d4       	rcall	.+2150   	; 0xd02 <sd_raw_write>
	SetupHardware();
     49c:	70 de       	rcall	.-800    	; 0x17e <SetupHardware>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	5a de       	rcall	.-844    	; 0x156 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     4a2:	78 94       	sei
		MassStorage_Task();
     4a4:	cf de       	rcall	.-610    	; 0x244 <MassStorage_Task>
		USB_USBTask();
     4a6:	0e 94 66 0c 	call	0x18cc	; 0x18cc <USB_USBTask>
     4aa:	fc cf       	rjmp	.-8      	; 0x4a4 <main+0x6a>
	else if(PINB & (1 << PB7))
     4ac:	1f 9b       	sbis	0x03, 7	; 3
     4ae:	f6 cf       	rjmp	.-20     	; 0x49c <main+0x62>
		sd_raw_write(0x00100047, "SPUR_MODE02", 11);
     4b0:	8b e0       	ldi	r24, 0x0B	; 11
     4b2:	e8 2e       	mov	r14, r24
     4b4:	f1 2c       	mov	r15, r1
     4b6:	04 ea       	ldi	r16, 0xA4	; 164
     4b8:	12 e0       	ldi	r17, 0x02	; 2
     4ba:	d5 cf       	rjmp	.-86     	; 0x466 <main+0x2c>

000004bc <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     4bc:	29 2f       	mov	r18, r25
     4be:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4c0:	22 30       	cpi	r18, 0x02	; 2
     4c2:	31 05       	cpc	r19, r1
     4c4:	71 f0       	breq	.+28     	; 0x4e2 <CALLBACK_USB_GetDescriptor+0x26>
     4c6:	23 30       	cpi	r18, 0x03	; 3
     4c8:	31 05       	cpc	r19, r1
     4ca:	81 f0       	breq	.+32     	; 0x4ec <CALLBACK_USB_GetDescriptor+0x30>
     4cc:	21 30       	cpi	r18, 0x01	; 1
     4ce:	31 05       	cpc	r19, r1
     4d0:	a1 f4       	brne	.+40     	; 0x4fa <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4d2:	82 e1       	ldi	r24, 0x12	; 18
     4d4:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     4d6:	2a e0       	ldi	r18, 0x0A	; 10
     4d8:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     4da:	fa 01       	movw	r30, r20
     4dc:	31 83       	std	Z+1, r19	; 0x01
     4de:	20 83       	st	Z, r18
	return Size;
}
     4e0:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
     4e2:	80 e2       	ldi	r24, 0x20	; 32
     4e4:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     4e6:	2a ee       	ldi	r18, 0xEA	; 234
     4e8:	30 e0       	ldi	r19, 0x00	; 0
			break;
     4ea:	f7 cf       	rjmp	.-18     	; 0x4da <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
     4ec:	99 27       	eor	r25, r25
     4ee:	81 30       	cpi	r24, 0x01	; 1
     4f0:	91 05       	cpc	r25, r1
     4f2:	71 f0       	breq	.+28     	; 0x510 <CALLBACK_USB_GetDescriptor+0x54>
     4f4:	38 f0       	brcs	.+14     	; 0x504 <CALLBACK_USB_GetDescriptor+0x48>
     4f6:	02 97       	sbiw	r24, 0x02	; 2
     4f8:	71 f0       	breq	.+28     	; 0x516 <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	90 e0       	ldi	r25, 0x00	; 0
	const void* Address = NULL;
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	eb cf       	rjmp	.-42     	; 0x4da <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     504:	e6 ee       	ldi	r30, 0xE6	; 230
     506:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     508:	84 91       	lpm	r24, Z
     50a:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     50c:	9f 01       	movw	r18, r30
					break;
     50e:	e5 cf       	rjmp	.-54     	; 0x4da <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     510:	ea ed       	ldi	r30, 0xDA	; 218
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	f9 cf       	rjmp	.-14     	; 0x508 <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     516:	ec ea       	ldi	r30, 0xAC	; 172
     518:	f0 e0       	ldi	r31, 0x00	; 0
     51a:	f6 cf       	rjmp	.-20     	; 0x508 <CALLBACK_USB_GetDescriptor+0x4c>

0000051c <serialBegin>:

// initialize the hardware uart: 57600 baud, 8 bits, no parity, 2 stop bits
void serialBegin()
{
	const unsigned int baud = 57600;
	UBRR1 = (F_CPU / 4 / baud - 1) / 2;
     51c:	82 e2       	ldi	r24, 0x22	; 34
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     524:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
	UCSR1A = (1<<U2X1);		// set double transmission speed
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);
     52e:	88 e9       	ldi	r24, 0x98	; 152
     530:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
	UCSR1C = (1<<USBS1)|(3<<UCSZ10);
     534:	8e e0       	ldi	r24, 0x0E	; 14
     536:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
     53a:	08 95       	ret

0000053c <serialWrite>:

// output a single byte to uart
void serialWrite( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR1A & (1<<UDRE1)) )
     53c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     540:	95 ff       	sbrs	r25, 5
     542:	fc cf       	rjmp	.-8      	; 0x53c <serialWrite>
	;
	/* Put data into buffer, sends the data */
	UDR1 = (uint8_t)data;
     544:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     548:	08 95       	ret

0000054a <serialWriteArray>:
}

// output a string to uart
void serialWriteArray( unsigned char data[], unsigned int len)
{
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	ec 01       	movw	r28, r24
     554:	8c 01       	movw	r16, r24
     556:	06 0f       	add	r16, r22
     558:	17 1f       	adc	r17, r23
	for(int i = 0; i < len; i++)
     55a:	c0 17       	cp	r28, r16
     55c:	d1 07       	cpc	r29, r17
     55e:	29 f4       	brne	.+10     	; 0x56a <serialWriteArray+0x20>
	{
		serialWrite(*(data + i));
	}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	08 95       	ret
		serialWrite(*(data + i));
     56a:	89 91       	ld	r24, Y+
     56c:	e7 df       	rcall	.-50     	; 0x53c <serialWrite>
     56e:	f5 cf       	rjmp	.-22     	; 0x55a <serialWriteArray+0x10>

00000570 <readData>:
unsigned char readcmdmsg2[] = {' ', 'l', 'e', 'n', 'g', 't', 'h', ' '};
unsigned char digitLookup[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};
uint32_t test = 1234567890;

void readData(const uint32_t BlockAddress, uint16_t TotalBlocks)
{
     570:	3f 92       	push	r3
     572:	4f 92       	push	r4
     574:	5f 92       	push	r5
     576:	6f 92       	push	r6
     578:	7f 92       	push	r7
     57a:	8f 92       	push	r8
     57c:	9f 92       	push	r9
     57e:	af 92       	push	r10
     580:	bf 92       	push	r11
     582:	cf 92       	push	r12
     584:	df 92       	push	r13
     586:	ef 92       	push	r14
     588:	ff 92       	push	r15
     58a:	0f 93       	push	r16
     58c:	1f 93       	push	r17
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	2b 97       	sbiw	r28, 0x0b	; 11
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	2b 01       	movw	r4, r22
     5a4:	3c 01       	movw	r6, r24
     5a6:	6a 01       	movw	r12, r20
	}
	serialWrite('\n');
	serialWrite('\r');*/

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     5a8:	a4 d6       	rcall	.+3400   	; 0x12f2 <Endpoint_WaitUntilReady>
     5aa:	81 11       	cpse	r24, r1
     5ac:	61 c0       	rjmp	.+194    	; 0x670 <readData+0x100>
	uint32_t offset = BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE;
     5ae:	29 e0       	ldi	r18, 0x09	; 9
     5b0:	44 0c       	add	r4, r4
     5b2:	55 1c       	adc	r5, r5
     5b4:	66 1c       	adc	r6, r6
     5b6:	77 1c       	adc	r7, r7
     5b8:	2a 95       	dec	r18
     5ba:	d1 f7       	brne	.-12     	; 0x5b0 <readData+0x40>
	  return;

	while (TotalBlocks)
     5bc:	c1 14       	cp	r12, r1
     5be:	d1 04       	cpc	r13, r1
     5c0:	51 f4       	brne	.+20     	; 0x5d6 <readData+0x66>
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		/* Decrement the blocks remaining counter */
		TotalBlocks--;
	}

	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     5c6:	85 fd       	sbrc	r24, 5
     5c8:	53 c0       	rjmp	.+166    	; 0x670 <readData+0x100>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5ce:	8e 77       	andi	r24, 0x7E	; 126
     5d0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     5d4:	4d c0       	rjmp	.+154    	; 0x670 <readData+0x100>
     5d6:	90 e2       	ldi	r25, 0x20	; 32
     5d8:	39 2e       	mov	r3, r25
				return ((UEINTX & (1 << RWAL)) ? true : false);
     5da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (!(Endpoint_IsReadWriteAllowed()))
     5de:	85 ff       	sbrs	r24, 5
     5e0:	3e c0       	rjmp	.+124    	; 0x65e <readData+0xee>
     5e2:	53 01       	movw	r10, r6
     5e4:	42 01       	movw	r8, r4
     5e6:	20 e1       	ldi	r18, 0x10	; 16
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	3b 87       	std	Y+11, r19	; 0x0b
     5ec:	2a 87       	std	Y+10, r18	; 0x0a
				sd_raw_read(offset, &buffer, 1);
     5ee:	a5 01       	movw	r20, r10
     5f0:	94 01       	movw	r18, r8
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	cb 01       	movw	r24, r22
     5f8:	8a 82       	std	Y+2, r8	; 0x02
     5fa:	3b 83       	std	Y+3, r19	; 0x03
     5fc:	4c 83       	std	Y+4, r20	; 0x04
     5fe:	5d 83       	std	Y+5, r21	; 0x05
     600:	6e 83       	std	Y+6, r22	; 0x06
     602:	7f 83       	std	Y+7, r23	; 0x07
     604:	88 87       	std	Y+8, r24	; 0x08
     606:	99 87       	std	Y+9, r25	; 0x09
     608:	ee 24       	eor	r14, r14
     60a:	e3 94       	inc	r14
     60c:	f1 2c       	mov	r15, r1
     60e:	8e 01       	movw	r16, r28
     610:	0f 5f       	subi	r16, 0xFF	; 255
     612:	1f 4f       	sbci	r17, 0xFF	; 255
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	70 e0       	ldi	r23, 0x00	; 0
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	b2 d1       	rcall	.+868    	; 0x982 <sd_raw_read>
				Endpoint_Write_8(buffer);
     61e:	89 81       	ldd	r24, Y+1	; 0x01
				UEDATX = Data;
     620:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				offset++;
     624:	3f ef       	ldi	r19, 0xFF	; 255
     626:	83 1a       	sub	r8, r19
     628:	93 0a       	sbc	r9, r19
     62a:	a3 0a       	sbc	r10, r19
     62c:	b3 0a       	sbc	r11, r19
     62e:	4a 85       	ldd	r20, Y+10	; 0x0a
     630:	5b 85       	ldd	r21, Y+11	; 0x0b
     632:	41 50       	subi	r20, 0x01	; 1
     634:	51 09       	sbc	r21, r1
     636:	5b 87       	std	Y+11, r21	; 0x0b
     638:	4a 87       	std	Y+10, r20	; 0x0a
			for(int j = 0; j < 16; j++)
     63a:	45 2b       	or	r20, r21
     63c:	c1 f6       	brne	.-80     	; 0x5ee <readData+0x7e>
     63e:	50 e1       	ldi	r21, 0x10	; 16
     640:	45 0e       	add	r4, r21
     642:	51 1c       	adc	r5, r1
     644:	61 1c       	adc	r6, r1
     646:	71 1c       	adc	r7, r1
			if (IsMassStoreReset)
     648:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
     64c:	81 11       	cpse	r24, r1
     64e:	10 c0       	rjmp	.+32     	; 0x670 <readData+0x100>
     650:	3a 94       	dec	r3
		while (BytesInBlockDiv16 < (VIRTUAL_MEMORY_BLOCK_SIZE >> 4))
     652:	31 10       	cpse	r3, r1
     654:	c2 cf       	rjmp	.-124    	; 0x5da <readData+0x6a>
		TotalBlocks--;
     656:	61 e0       	ldi	r22, 0x01	; 1
     658:	c6 1a       	sub	r12, r22
     65a:	d1 08       	sbc	r13, r1
     65c:	af cf       	rjmp	.-162    	; 0x5bc <readData+0x4c>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     65e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     662:	8e 77       	andi	r24, 0x7E	; 126
     664:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				if (Endpoint_WaitUntilReady())
     668:	44 d6       	rcall	.+3208   	; 0x12f2 <Endpoint_WaitUntilReady>
     66a:	88 23       	and	r24, r24
     66c:	09 f4       	brne	.+2      	; 0x670 <readData+0x100>
     66e:	b9 cf       	rjmp	.-142    	; 0x5e2 <readData+0x72>
	  Endpoint_ClearIN();
     670:	2b 96       	adiw	r28, 0x0b	; 11
     672:	0f b6       	in	r0, 0x3f	; 63
     674:	f8 94       	cli
     676:	de bf       	out	0x3e, r29	; 62
     678:	0f be       	out	0x3f, r0	; 63
     67a:	cd bf       	out	0x3d, r28	; 61
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	ef 90       	pop	r14
     688:	df 90       	pop	r13
     68a:	cf 90       	pop	r12
     68c:	bf 90       	pop	r11
     68e:	af 90       	pop	r10
     690:	9f 90       	pop	r9
     692:	8f 90       	pop	r8
     694:	7f 90       	pop	r7
     696:	6f 90       	pop	r6
     698:	5f 90       	pop	r5
     69a:	4f 90       	pop	r4
     69c:	3f 90       	pop	r3
     69e:	08 95       	ret

000006a0 <SCSI_DecodeSCSICommand>:
 *  a command failure due to a ILLEGAL REQUEST.
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(void)
{
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     6a8:	80 91 c9 04 	lds	r24, 0x04C9	; 0x8004c9 <CommandBlock+0xf>
     6ac:	8d 31       	cpi	r24, 0x1D	; 29
     6ae:	b9 f0       	breq	.+46     	; 0x6de <SCSI_DecodeSCSICommand+0x3e>
     6b0:	f8 f4       	brcc	.+62     	; 0x6f0 <SCSI_DecodeSCSICommand+0x50>
     6b2:	82 31       	cpi	r24, 0x12	; 18
     6b4:	09 f4       	brne	.+2      	; 0x6b8 <SCSI_DecodeSCSICommand+0x18>
     6b6:	53 c0       	rjmp	.+166    	; 0x75e <SCSI_DecodeSCSICommand+0xbe>
     6b8:	68 f4       	brcc	.+26     	; 0x6d4 <SCSI_DecodeSCSICommand+0x34>
     6ba:	88 23       	and	r24, r24
     6bc:	81 f0       	breq	.+32     	; 0x6de <SCSI_DecodeSCSICommand+0x3e>
     6be:	83 30       	cpi	r24, 0x03	; 3
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <SCSI_DecodeSCSICommand+0x24>
     6c2:	a2 c0       	rjmp	.+324    	; 0x808 <SCSI_DecodeSCSICommand+0x168>
			CommandSuccess = true;
			CommandBlock.DataTransferLength = 0;
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     6c4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SenseData+0x2>
     6c8:	80 7f       	andi	r24, 0xF0	; 240
     6ca:	85 60       	ori	r24, 0x05	; 5
     6cc:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <SenseData+0x2>
     6d0:	80 e2       	ldi	r24, 0x20	; 32
     6d2:	5a c0       	rjmp	.+180    	; 0x788 <SCSI_DecodeSCSICommand+0xe8>
	switch (CommandBlock.SCSICommandData[0])
     6d4:	8a 31       	cpi	r24, 0x1A	; 26
     6d6:	09 f4       	brne	.+2      	; 0x6da <SCSI_DecodeSCSICommand+0x3a>
     6d8:	fc c0       	rjmp	.+504    	; 0x8d2 <SCSI_DecodeSCSICommand+0x232>
     6da:	8b 31       	cpi	r24, 0x1B	; 27
     6dc:	99 f7       	brne	.-26     	; 0x6c4 <SCSI_DecodeSCSICommand+0x24>
			CommandBlock.DataTransferLength = 0;
     6de:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <CommandBlock+0x8>
     6e2:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <CommandBlock+0x9>
     6e6:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <CommandBlock+0xa>
     6ea:	10 92 c5 04 	sts	0x04C5, r1	; 0x8004c5 <CommandBlock+0xb>
			break;
     6ee:	81 c0       	rjmp	.+258    	; 0x7f2 <SCSI_DecodeSCSICommand+0x152>
	switch (CommandBlock.SCSICommandData[0])
     6f0:	88 32       	cpi	r24, 0x28	; 40
     6f2:	09 f4       	brne	.+2      	; 0x6f6 <SCSI_DecodeSCSICommand+0x56>
     6f4:	b8 c0       	rjmp	.+368    	; 0x866 <SCSI_DecodeSCSICommand+0x1c6>
     6f6:	68 f5       	brcc	.+90     	; 0x752 <SCSI_DecodeSCSICommand+0xb2>
     6f8:	8e 31       	cpi	r24, 0x1E	; 30
     6fa:	89 f3       	breq	.-30     	; 0x6de <SCSI_DecodeSCSICommand+0x3e>
     6fc:	85 32       	cpi	r24, 0x25	; 37
     6fe:	11 f7       	brne	.-60     	; 0x6c4 <SCSI_DecodeSCSICommand+0x24>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_BE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_BE(const uint32_t Data)
			{
				UEDATX = (Data >> 24);
     700:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     704:	8c ee       	ldi	r24, 0xEC	; 236
     706:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     70a:	8f ed       	ldi	r24, 0xDF	; 223
     70c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 24);
     716:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 16);
     71a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data &  0xFF);
     724:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_32_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     728:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
     72c:	81 11       	cpse	r24, r1
     72e:	30 c0       	rjmp	.+96     	; 0x790 <SCSI_DecodeSCSICommand+0xf0>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     730:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     734:	8e 77       	andi	r24, 0x7E	; 126
     736:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     73a:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <CommandBlock+0x8>
     73e:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <CommandBlock+0x9>
     742:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <CommandBlock+0xa>
     746:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <CommandBlock+0xb>
     74a:	08 97       	sbiw	r24, 0x08	; 8
     74c:	a1 09       	sbc	r26, r1
     74e:	b1 09       	sbc	r27, r1
     750:	48 c0       	rjmp	.+144    	; 0x7e2 <SCSI_DecodeSCSICommand+0x142>
	switch (CommandBlock.SCSICommandData[0])
     752:	8a 32       	cpi	r24, 0x2A	; 42
     754:	09 f4       	brne	.+2      	; 0x758 <SCSI_DecodeSCSICommand+0xb8>
     756:	7f c0       	rjmp	.+254    	; 0x856 <SCSI_DecodeSCSICommand+0x1b6>
     758:	8f 32       	cpi	r24, 0x2F	; 47
     75a:	09 f2       	breq	.-126    	; 0x6de <SCSI_DecodeSCSICommand+0x3e>
     75c:	b3 cf       	rjmp	.-154    	; 0x6c4 <SCSI_DecodeSCSICommand+0x24>

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
     75e:	20 91 cd 04 	lds	r18, 0x04CD	; 0x8004cd <CommandBlock+0x13>
     762:	c2 2f       	mov	r28, r18
     764:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <CommandBlock+0x12>
     768:	d8 2f       	mov	r29, r24
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     76a:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <CommandBlock+0x10>
     76e:	83 70       	andi	r24, 0x03	; 3
     770:	21 f4       	brne	.+8      	; 0x77a <SCSI_DecodeSCSICommand+0xda>
     772:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <CommandBlock+0x11>
     776:	88 23       	and	r24, r24
     778:	89 f0       	breq	.+34     	; 0x79c <SCSI_DecodeSCSICommand+0xfc>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     77a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SenseData+0x2>
     77e:	80 7f       	andi	r24, 0xF0	; 240
     780:	85 60       	ori	r24, 0x05	; 5
     782:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <SenseData+0x2>
     786:	84 e2       	ldi	r24, 0x24	; 36
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     788:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <SenseData+0xc>
     78c:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <SenseData+0xd>
	return false;
     790:	80 e0       	ldi	r24, 0x00	; 0
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	08 95       	ret
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     79c:	8e 01       	movw	r16, r28
     79e:	c5 32       	cpi	r28, 0x25	; 37
     7a0:	d1 05       	cpc	r29, r1
     7a2:	10 f0       	brcs	.+4      	; 0x7a8 <SCSI_DecodeSCSICommand+0x108>
     7a4:	04 e2       	ldi	r16, 0x24	; 36
     7a6:	10 e0       	ldi	r17, 0x00	; 0
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     7a8:	40 e0       	ldi	r20, 0x00	; 0
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	b8 01       	movw	r22, r16
     7ae:	84 e7       	ldi	r24, 0x74	; 116
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	f6 d3       	rcall	.+2028   	; 0xfa0 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	ce 01       	movw	r24, r28
     7ba:	80 1b       	sub	r24, r16
     7bc:	91 0b       	sbc	r25, r17
     7be:	ad d3       	rcall	.+1882   	; 0xf1a <Endpoint_Null_Stream>
     7c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     7c4:	8e 77       	andi	r24, 0x7E	; 126
     7c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     7ca:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <CommandBlock+0x8>
     7ce:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <CommandBlock+0x9>
     7d2:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <CommandBlock+0xa>
     7d6:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <CommandBlock+0xb>
     7da:	80 1b       	sub	r24, r16
     7dc:	91 0b       	sbc	r25, r17
     7de:	a1 09       	sbc	r26, r1
     7e0:	b1 09       	sbc	r27, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= 4;
     7e2:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <CommandBlock+0x8>
     7e6:	90 93 c3 04 	sts	0x04C3, r25	; 0x8004c3 <CommandBlock+0x9>
     7ea:	a0 93 c4 04 	sts	0x04C4, r26	; 0x8004c4 <CommandBlock+0xa>
     7ee:	b0 93 c5 04 	sts	0x04C5, r27	; 0x8004c5 <CommandBlock+0xb>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     7f2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SenseData+0x2>
     7f6:	80 7f       	andi	r24, 0xF0	; 240
     7f8:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <SenseData+0x2>
     7fc:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <SenseData+0xc>
     800:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <SenseData+0xd>
		return true;
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	c5 cf       	rjmp	.-118    	; 0x792 <SCSI_DecodeSCSICommand+0xf2>
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     808:	c0 91 cd 04 	lds	r28, 0x04CD	; 0x8004cd <CommandBlock+0x13>
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     80c:	dc 2f       	mov	r29, r28
     80e:	c3 31       	cpi	r28, 0x13	; 19
     810:	08 f0       	brcs	.+2      	; 0x814 <SCSI_DecodeSCSICommand+0x174>
     812:	d2 e1       	ldi	r29, 0x12	; 18
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     814:	0d 2f       	mov	r16, r29
     816:	10 e0       	ldi	r17, 0x00	; 0
     818:	40 e0       	ldi	r20, 0x00	; 0
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	b8 01       	movw	r22, r16
     81e:	82 e7       	ldi	r24, 0x72	; 114
     820:	91 e0       	ldi	r25, 0x01	; 1
     822:	be d3       	rcall	.+1916   	; 0xfa0 <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     824:	8c 2f       	mov	r24, r28
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	70 e0       	ldi	r23, 0x00	; 0
     82c:	80 1b       	sub	r24, r16
     82e:	91 0b       	sbc	r25, r17
     830:	74 d3       	rcall	.+1768   	; 0xf1a <Endpoint_Null_Stream>
     832:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     836:	8e 77       	andi	r24, 0x7E	; 126
     838:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= BytesTransferred;
     83c:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <CommandBlock+0x8>
     840:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <CommandBlock+0x9>
     844:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <CommandBlock+0xa>
     848:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <CommandBlock+0xb>
     84c:	8d 1b       	sub	r24, r29
     84e:	91 09       	sbc	r25, r1
     850:	a1 09       	sbc	r26, r1
     852:	b1 09       	sbc	r27, r1
     854:	c6 cf       	rjmp	.-116    	; 0x7e2 <SCSI_DecodeSCSICommand+0x142>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_DATA_PROTECT,
     856:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SenseData+0x2>
     85a:	80 7f       	andi	r24, 0xF0	; 240
     85c:	87 60       	ori	r24, 0x07	; 7
     85e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <SenseData+0x2>
     862:	87 e2       	ldi	r24, 0x27	; 39
     864:	91 cf       	rjmp	.-222    	; 0x788 <SCSI_DecodeSCSICommand+0xe8>

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     866:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <CommandBlock+0x14>
     86a:	70 91 cd 04 	lds	r23, 0x04CD	; 0x8004cd <CommandBlock+0x13>
     86e:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <CommandBlock+0x12>
     872:	90 91 cb 04 	lds	r25, 0x04CB	; 0x8004cb <CommandBlock+0x11>
				return Data.Word;
     876:	20 91 d1 04 	lds	r18, 0x04D1	; 0x8004d1 <CommandBlock+0x17>
     87a:	c2 2f       	mov	r28, r18
     87c:	20 91 d0 04 	lds	r18, 0x04D0	; 0x8004d0 <CommandBlock+0x16>
     880:	d2 2f       	mov	r29, r18
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     882:	61 15       	cp	r22, r1
     884:	20 ee       	ldi	r18, 0xE0	; 224
     886:	72 07       	cpc	r23, r18
     888:	2c ee       	ldi	r18, 0xEC	; 236
     88a:	82 07       	cpc	r24, r18
     88c:	91 05       	cpc	r25, r1
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <SCSI_DecodeSCSICommand+0x200>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     890:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SenseData+0x2>
     894:	80 7f       	andi	r24, 0xF0	; 240
     896:	85 60       	ori	r24, 0x05	; 5
     898:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <SenseData+0x2>
     89c:	81 e2       	ldi	r24, 0x21	; 33
     89e:	74 cf       	rjmp	.-280    	; 0x788 <SCSI_DecodeSCSICommand+0xe8>
	readData(BlockAddress, TotalBlocks);
     8a0:	ae 01       	movw	r20, r28
     8a2:	66 de       	rcall	.-820    	; 0x570 <readData>
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     8a4:	ae 01       	movw	r20, r28
     8a6:	60 e0       	ldi	r22, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	89 e0       	ldi	r24, 0x09	; 9
     8ac:	44 0f       	add	r20, r20
     8ae:	55 1f       	adc	r21, r21
     8b0:	66 1f       	adc	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	8a 95       	dec	r24
     8b6:	d1 f7       	brne	.-12     	; 0x8ac <SCSI_DecodeSCSICommand+0x20c>
     8b8:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <CommandBlock+0x8>
     8bc:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <CommandBlock+0x9>
     8c0:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <CommandBlock+0xa>
     8c4:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <CommandBlock+0xb>
     8c8:	84 1b       	sub	r24, r20
     8ca:	95 0b       	sbc	r25, r21
     8cc:	a6 0b       	sbc	r26, r22
     8ce:	b7 0b       	sbc	r27, r23
     8d0:	88 cf       	rjmp	.-240    	; 0x7e2 <SCSI_DecodeSCSICommand+0x142>
				UEDATX = Data;
     8d2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8d6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8da:	80 e8       	ldi	r24, 0x80	; 128
     8dc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     8e0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     8e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     8e8:	8e 77       	andi	r24, 0x7E	; 126
     8ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	CommandBlock.DataTransferLength -= 4;
     8ee:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <CommandBlock+0x8>
     8f2:	90 91 c3 04 	lds	r25, 0x04C3	; 0x8004c3 <CommandBlock+0x9>
     8f6:	a0 91 c4 04 	lds	r26, 0x04C4	; 0x8004c4 <CommandBlock+0xa>
     8fa:	b0 91 c5 04 	lds	r27, 0x04C5	; 0x8004c5 <CommandBlock+0xb>
     8fe:	04 97       	sbiw	r24, 0x04	; 4
     900:	a1 09       	sbc	r26, r1
     902:	b1 09       	sbc	r27, r1
     904:	6e cf       	rjmp	.-292    	; 0x7e2 <SCSI_DecodeSCSICommand+0x142>

00000906 <sd_raw_send_byte>:
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
     906:	8e bd       	out	0x2e, r24	; 46
     908:	0d b4       	in	r0, 0x2d	; 45
     90a:	07 fe       	sbrs	r0, 7
     90c:	fd cf       	rjmp	.-6      	; 0x908 <sd_raw_send_byte+0x2>
     90e:	8d b5       	in	r24, 0x2d	; 45
     910:	8f 77       	andi	r24, 0x7F	; 127
     912:	8d bd       	out	0x2d, r24	; 45
     914:	08 95       	ret

00000916 <sd_raw_rec_byte>:
     916:	8f ef       	ldi	r24, 0xFF	; 255
     918:	8e bd       	out	0x2e, r24	; 46
     91a:	0d b4       	in	r0, 0x2d	; 45
     91c:	07 fe       	sbrs	r0, 7
     91e:	fd cf       	rjmp	.-6      	; 0x91a <sd_raw_rec_byte+0x4>
     920:	8d b5       	in	r24, 0x2d	; 45
     922:	8f 77       	andi	r24, 0x7F	; 127
     924:	8d bd       	out	0x2d, r24	; 45
     926:	8e b5       	in	r24, 0x2e	; 46
     928:	08 95       	ret

0000092a <sd_raw_send_command>:
     92a:	ff 92       	push	r15
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	c8 2f       	mov	r28, r24
     936:	d4 2f       	mov	r29, r20
     938:	15 2f       	mov	r17, r21
     93a:	06 2f       	mov	r16, r22
     93c:	f7 2e       	mov	r15, r23
     93e:	eb df       	rcall	.-42     	; 0x916 <sd_raw_rec_byte>
     940:	8c 2f       	mov	r24, r28
     942:	80 64       	ori	r24, 0x40	; 64
     944:	e0 df       	rcall	.-64     	; 0x906 <sd_raw_send_byte>
     946:	8f 2d       	mov	r24, r15
     948:	de df       	rcall	.-68     	; 0x906 <sd_raw_send_byte>
     94a:	80 2f       	mov	r24, r16
     94c:	dc df       	rcall	.-72     	; 0x906 <sd_raw_send_byte>
     94e:	81 2f       	mov	r24, r17
     950:	da df       	rcall	.-76     	; 0x906 <sd_raw_send_byte>
     952:	8d 2f       	mov	r24, r29
     954:	d8 df       	rcall	.-80     	; 0x906 <sd_raw_send_byte>
     956:	cc 23       	and	r28, r28
     958:	21 f0       	breq	.+8      	; 0x962 <sd_raw_send_command+0x38>
     95a:	c8 30       	cpi	r28, 0x08	; 8
     95c:	81 f0       	breq	.+32     	; 0x97e <sd_raw_send_command+0x54>
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	01 c0       	rjmp	.+2      	; 0x964 <sd_raw_send_command+0x3a>
     962:	85 e9       	ldi	r24, 0x95	; 149
     964:	d0 df       	rcall	.-96     	; 0x906 <sd_raw_send_byte>
     966:	ca e0       	ldi	r28, 0x0A	; 10
     968:	d6 df       	rcall	.-84     	; 0x916 <sd_raw_rec_byte>
     96a:	8f 3f       	cpi	r24, 0xFF	; 255
     96c:	11 f4       	brne	.+4      	; 0x972 <sd_raw_send_command+0x48>
     96e:	c1 50       	subi	r28, 0x01	; 1
     970:	d9 f7       	brne	.-10     	; 0x968 <sd_raw_send_command+0x3e>
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	08 95       	ret
     97e:	87 e8       	ldi	r24, 0x87	; 135
     980:	f1 cf       	rjmp	.-30     	; 0x964 <sd_raw_send_command+0x3a>

00000982 <sd_raw_read>:
     982:	2f 92       	push	r2
     984:	3f 92       	push	r3
     986:	4f 92       	push	r4
     988:	5f 92       	push	r5
     98a:	6f 92       	push	r6
     98c:	7f 92       	push	r7
     98e:	8f 92       	push	r8
     990:	9f 92       	push	r9
     992:	af 92       	push	r10
     994:	bf 92       	push	r11
     996:	cf 92       	push	r12
     998:	df 92       	push	r13
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	60 97       	sbiw	r28, 0x10	; 16
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	de bf       	out	0x3e, r29	; 62
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	cd bf       	out	0x3d, r28	; 61
     9b6:	29 83       	std	Y+1, r18	; 0x01
     9b8:	3a 83       	std	Y+2, r19	; 0x02
     9ba:	4b 83       	std	Y+3, r20	; 0x03
     9bc:	5c 83       	std	Y+4, r21	; 0x04
     9be:	6d 83       	std	Y+5, r22	; 0x05
     9c0:	7e 83       	std	Y+6, r23	; 0x06
     9c2:	8f 83       	std	Y+7, r24	; 0x07
     9c4:	98 87       	std	Y+8, r25	; 0x08
     9c6:	1a 87       	std	Y+10, r17	; 0x0a
     9c8:	09 87       	std	Y+9, r16	; 0x09
     9ca:	fc 86       	std	Y+12, r15	; 0x0c
     9cc:	eb 86       	std	Y+11, r14	; 0x0b
     9ce:	2b 85       	ldd	r18, Y+11	; 0x0b
     9d0:	3c 85       	ldd	r19, Y+12	; 0x0c
     9d2:	23 2b       	or	r18, r19
     9d4:	11 f4       	brne	.+4      	; 0x9da <sd_raw_read+0x58>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	51 c0       	rjmp	.+162    	; 0xa7c <sd_raw_read+0xfa>
     9da:	29 81       	ldd	r18, Y+1	; 0x01
     9dc:	3a 81       	ldd	r19, Y+2	; 0x02
     9de:	31 70       	andi	r19, 0x01	; 1
     9e0:	3e 87       	std	Y+14, r19	; 0x0e
     9e2:	2d 87       	std	Y+13, r18	; 0x0d
     9e4:	19 01       	movw	r2, r18
     9e6:	29 81       	ldd	r18, Y+1	; 0x01
     9e8:	3a 81       	ldd	r19, Y+2	; 0x02
     9ea:	4b 81       	ldd	r20, Y+3	; 0x03
     9ec:	5c 81       	ldd	r21, Y+4	; 0x04
     9ee:	6d 81       	ldd	r22, Y+5	; 0x05
     9f0:	7e 81       	ldd	r23, Y+6	; 0x06
     9f2:	8f 81       	ldd	r24, Y+7	; 0x07
     9f4:	98 85       	ldd	r25, Y+8	; 0x08
     9f6:	51 01       	movw	r10, r2
     9f8:	c1 2c       	mov	r12, r1
     9fa:	d1 2c       	mov	r13, r1
     9fc:	e1 2c       	mov	r14, r1
     9fe:	f1 2c       	mov	r15, r1
     a00:	00 e0       	ldi	r16, 0x00	; 0
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	a5 d7       	rcall	.+3914   	; 0x1950 <__subdi3>
     a06:	39 01       	movw	r6, r18
     a08:	4a 01       	movw	r8, r20
     a0a:	1b 01       	movw	r2, r22
     a0c:	2c 01       	movw	r4, r24
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	ed 85       	ldd	r30, Y+13	; 0x0d
     a14:	fe 85       	ldd	r31, Y+14	; 0x0e
     a16:	8e 1b       	sub	r24, r30
     a18:	9f 0b       	sbc	r25, r31
     a1a:	2b 85       	ldd	r18, Y+11	; 0x0b
     a1c:	3c 85       	ldd	r19, Y+12	; 0x0c
     a1e:	38 8b       	std	Y+16, r19	; 0x10
     a20:	2f 87       	std	Y+15, r18	; 0x0f
     a22:	82 17       	cp	r24, r18
     a24:	93 07       	cpc	r25, r19
     a26:	10 f4       	brcc	.+4      	; 0xa2c <sd_raw_read+0xaa>
     a28:	98 8b       	std	Y+16, r25	; 0x10
     a2a:	8f 87       	std	Y+15, r24	; 0x0f
     a2c:	a0 90 b2 02 	lds	r10, 0x02B2	; 0x8002b2 <raw_block_address>
     a30:	b0 90 b3 02 	lds	r11, 0x02B3	; 0x8002b3 <raw_block_address+0x1>
     a34:	c0 90 b4 02 	lds	r12, 0x02B4	; 0x8002b4 <raw_block_address+0x2>
     a38:	d0 90 b5 02 	lds	r13, 0x02B5	; 0x8002b5 <raw_block_address+0x3>
     a3c:	e0 90 b6 02 	lds	r14, 0x02B6	; 0x8002b6 <raw_block_address+0x4>
     a40:	f0 90 b7 02 	lds	r15, 0x02B7	; 0x8002b7 <raw_block_address+0x5>
     a44:	00 91 b8 02 	lds	r16, 0x02B8	; 0x8002b8 <raw_block_address+0x6>
     a48:	10 91 b9 02 	lds	r17, 0x02B9	; 0x8002b9 <raw_block_address+0x7>
     a4c:	93 01       	movw	r18, r6
     a4e:	a4 01       	movw	r20, r8
     a50:	b1 01       	movw	r22, r2
     a52:	c2 01       	movw	r24, r4
     a54:	86 d7       	rcall	.+3852   	; 0x1962 <__cmpdi2>
     a56:	09 f4       	brne	.+2      	; 0xa5a <sd_raw_read+0xd8>
     a58:	80 c0       	rjmp	.+256    	; 0xb5a <__stack+0x5b>
     a5a:	28 98       	cbi	0x05, 0	; 5
     a5c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <sd_raw_card_type>
     a60:	82 ff       	sbrs	r24, 2
     a62:	25 c0       	rjmp	.+74     	; 0xaae <sd_raw_read+0x12c>
     a64:	84 2d       	mov	r24, r4
     a66:	09 e0       	ldi	r16, 0x09	; 9
     a68:	4e d7       	rcall	.+3740   	; 0x1906 <__lshrdi3>
     a6a:	ba 01       	movw	r22, r20
     a6c:	42 2f       	mov	r20, r18
     a6e:	53 2f       	mov	r21, r19
     a70:	81 e1       	ldi	r24, 0x11	; 17
     a72:	5b df       	rcall	.-330    	; 0x92a <sd_raw_send_command>
     a74:	88 23       	and	r24, r24
     a76:	f1 f0       	breq	.+60     	; 0xab4 <sd_raw_read+0x132>
     a78:	28 9a       	sbi	0x05, 0	; 5
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	60 96       	adiw	r28, 0x10	; 16
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	de bf       	out	0x3e, r29	; 62
     a84:	0f be       	out	0x3f, r0	; 63
     a86:	cd bf       	out	0x3d, r28	; 61
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	1f 91       	pop	r17
     a8e:	0f 91       	pop	r16
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	bf 90       	pop	r11
     a9a:	af 90       	pop	r10
     a9c:	9f 90       	pop	r9
     a9e:	8f 90       	pop	r8
     aa0:	7f 90       	pop	r7
     aa2:	6f 90       	pop	r6
     aa4:	5f 90       	pop	r5
     aa6:	4f 90       	pop	r4
     aa8:	3f 90       	pop	r3
     aaa:	2f 90       	pop	r2
     aac:	08 95       	ret
     aae:	a3 01       	movw	r20, r6
     ab0:	b4 01       	movw	r22, r8
     ab2:	de cf       	rjmp	.-68     	; 0xa70 <sd_raw_read+0xee>
     ab4:	30 df       	rcall	.-416    	; 0x916 <sd_raw_rec_byte>
     ab6:	8e 3f       	cpi	r24, 0xFE	; 254
     ab8:	e9 f7       	brne	.-6      	; 0xab4 <sd_raw_read+0x132>
     aba:	0a eb       	ldi	r16, 0xBA	; 186
     abc:	12 e0       	ldi	r17, 0x02	; 2
     abe:	2b df       	rcall	.-426    	; 0x916 <sd_raw_rec_byte>
     ac0:	f8 01       	movw	r30, r16
     ac2:	81 93       	st	Z+, r24
     ac4:	8f 01       	movw	r16, r30
     ac6:	f4 e0       	ldi	r31, 0x04	; 4
     ac8:	0a 3b       	cpi	r16, 0xBA	; 186
     aca:	1f 07       	cpc	r17, r31
     acc:	c1 f7       	brne	.-16     	; 0xabe <sd_raw_read+0x13c>
     ace:	60 92 b2 02 	sts	0x02B2, r6	; 0x8002b2 <raw_block_address>
     ad2:	70 92 b3 02 	sts	0x02B3, r7	; 0x8002b3 <raw_block_address+0x1>
     ad6:	80 92 b4 02 	sts	0x02B4, r8	; 0x8002b4 <raw_block_address+0x2>
     ada:	90 92 b5 02 	sts	0x02B5, r9	; 0x8002b5 <raw_block_address+0x3>
     ade:	20 92 b6 02 	sts	0x02B6, r2	; 0x8002b6 <raw_block_address+0x4>
     ae2:	30 92 b7 02 	sts	0x02B7, r3	; 0x8002b7 <raw_block_address+0x5>
     ae6:	40 92 b8 02 	sts	0x02B8, r4	; 0x8002b8 <raw_block_address+0x6>
     aea:	50 92 b9 02 	sts	0x02B9, r5	; 0x8002b9 <raw_block_address+0x7>
     aee:	6d 85       	ldd	r22, Y+13	; 0x0d
     af0:	7e 85       	ldd	r23, Y+14	; 0x0e
     af2:	66 54       	subi	r22, 0x46	; 70
     af4:	7d 4f       	sbci	r23, 0xFD	; 253
     af6:	4f 85       	ldd	r20, Y+15	; 0x0f
     af8:	58 89       	ldd	r21, Y+16	; 0x10
     afa:	89 85       	ldd	r24, Y+9	; 0x09
     afc:	9a 85       	ldd	r25, Y+10	; 0x0a
     afe:	3a d7       	rcall	.+3700   	; 0x1974 <memcpy>
     b00:	29 85       	ldd	r18, Y+9	; 0x09
     b02:	3a 85       	ldd	r19, Y+10	; 0x0a
     b04:	8f 85       	ldd	r24, Y+15	; 0x0f
     b06:	98 89       	ldd	r25, Y+16	; 0x10
     b08:	28 0f       	add	r18, r24
     b0a:	39 1f       	adc	r19, r25
     b0c:	3a 87       	std	Y+10, r19	; 0x0a
     b0e:	29 87       	std	Y+9, r18	; 0x09
     b10:	02 df       	rcall	.-508    	; 0x916 <sd_raw_rec_byte>
     b12:	01 df       	rcall	.-510    	; 0x916 <sd_raw_rec_byte>
     b14:	28 9a       	sbi	0x05, 0	; 5
     b16:	ff de       	rcall	.-514    	; 0x916 <sd_raw_rec_byte>
     b18:	8b 85       	ldd	r24, Y+11	; 0x0b
     b1a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b1c:	ef 85       	ldd	r30, Y+15	; 0x0f
     b1e:	f8 89       	ldd	r31, Y+16	; 0x10
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 87       	std	Y+12, r25	; 0x0c
     b26:	8b 87       	std	Y+11, r24	; 0x0b
     b28:	9f 01       	movw	r18, r30
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a9 80       	ldd	r10, Y+1	; 0x01
     b38:	ba 80       	ldd	r11, Y+2	; 0x02
     b3a:	cb 80       	ldd	r12, Y+3	; 0x03
     b3c:	dc 80       	ldd	r13, Y+4	; 0x04
     b3e:	ed 80       	ldd	r14, Y+5	; 0x05
     b40:	fe 80       	ldd	r15, Y+6	; 0x06
     b42:	0f 81       	ldd	r16, Y+7	; 0x07
     b44:	18 85       	ldd	r17, Y+8	; 0x08
     b46:	fb d6       	rcall	.+3574   	; 0x193e <__adddi3>
     b48:	29 83       	std	Y+1, r18	; 0x01
     b4a:	3a 83       	std	Y+2, r19	; 0x02
     b4c:	4b 83       	std	Y+3, r20	; 0x03
     b4e:	5c 83       	std	Y+4, r21	; 0x04
     b50:	6d 83       	std	Y+5, r22	; 0x05
     b52:	7e 83       	std	Y+6, r23	; 0x06
     b54:	8f 83       	std	Y+7, r24	; 0x07
     b56:	98 87       	std	Y+8, r25	; 0x08
     b58:	3a cf       	rjmp	.-396    	; 0x9ce <sd_raw_read+0x4c>
     b5a:	6d 85       	ldd	r22, Y+13	; 0x0d
     b5c:	7e 85       	ldd	r23, Y+14	; 0x0e
     b5e:	66 54       	subi	r22, 0x46	; 70
     b60:	7d 4f       	sbci	r23, 0xFD	; 253
     b62:	4f 85       	ldd	r20, Y+15	; 0x0f
     b64:	58 89       	ldd	r21, Y+16	; 0x10
     b66:	89 85       	ldd	r24, Y+9	; 0x09
     b68:	9a 85       	ldd	r25, Y+10	; 0x0a
     b6a:	04 d7       	rcall	.+3592   	; 0x1974 <memcpy>
     b6c:	e9 85       	ldd	r30, Y+9	; 0x09
     b6e:	fa 85       	ldd	r31, Y+10	; 0x0a
     b70:	2f 85       	ldd	r18, Y+15	; 0x0f
     b72:	38 89       	ldd	r19, Y+16	; 0x10
     b74:	e2 0f       	add	r30, r18
     b76:	f3 1f       	adc	r31, r19
     b78:	fa 87       	std	Y+10, r31	; 0x0a
     b7a:	e9 87       	std	Y+9, r30	; 0x09
     b7c:	cd cf       	rjmp	.-102    	; 0xb18 <__stack+0x19>

00000b7e <sd_raw_init>:
     b7e:	cf 92       	push	r12
     b80:	df 92       	push	r13
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	22 9a       	sbi	0x04, 2	; 4
     b90:	21 9a       	sbi	0x04, 1	; 4
     b92:	24 9a       	sbi	0x04, 4	; 4
     b94:	23 98       	cbi	0x04, 3	; 4
     b96:	28 9a       	sbi	0x05, 0	; 5
     b98:	83 e5       	ldi	r24, 0x53	; 83
     b9a:	8c bd       	out	0x2c, r24	; 44
     b9c:	8d b5       	in	r24, 0x2d	; 45
     b9e:	8e 7f       	andi	r24, 0xFE	; 254
     ba0:	8d bd       	out	0x2d, r24	; 45
     ba2:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <sd_raw_card_type>
     ba6:	ca e0       	ldi	r28, 0x0A	; 10
     ba8:	b6 de       	rcall	.-660    	; 0x916 <sd_raw_rec_byte>
     baa:	c1 50       	subi	r28, 0x01	; 1
     bac:	e9 f7       	brne	.-6      	; 0xba8 <sd_raw_init+0x2a>
     bae:	28 98       	cbi	0x05, 0	; 5
     bb0:	c0 e0       	ldi	r28, 0x00	; 0
     bb2:	d2 e0       	ldi	r29, 0x02	; 2
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	ba 01       	movw	r22, r20
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	b6 de       	rcall	.-660    	; 0x92a <sd_raw_send_command>
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	21 f0       	breq	.+8      	; 0xbca <sd_raw_init+0x4c>
     bc2:	21 97       	sbiw	r28, 0x01	; 1
     bc4:	b9 f7       	brne	.-18     	; 0xbb4 <sd_raw_init+0x36>
     bc6:	28 9a       	sbi	0x05, 0	; 5
     bc8:	0d c0       	rjmp	.+26     	; 0xbe4 <sd_raw_init+0x66>
     bca:	4a ea       	ldi	r20, 0xAA	; 170
     bcc:	51 e0       	ldi	r21, 0x01	; 1
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	88 e0       	ldi	r24, 0x08	; 8
     bd4:	aa de       	rcall	.-684    	; 0x92a <sd_raw_send_command>
     bd6:	82 fd       	sbrc	r24, 2
     bd8:	2b c0       	rjmp	.+86     	; 0xc30 <sd_raw_init+0xb2>
     bda:	9d de       	rcall	.-710    	; 0x916 <sd_raw_rec_byte>
     bdc:	9c de       	rcall	.-712    	; 0x916 <sd_raw_rec_byte>
     bde:	9b de       	rcall	.-714    	; 0x916 <sd_raw_rec_byte>
     be0:	80 fd       	sbrc	r24, 0
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <sd_raw_init+0x6a>
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	83 c0       	rjmp	.+262    	; 0xcee <sd_raw_init+0x170>
     be8:	96 de       	rcall	.-724    	; 0x916 <sd_raw_rec_byte>
     bea:	8a 3a       	cpi	r24, 0xAA	; 170
     bec:	d9 f7       	brne	.-10     	; 0xbe4 <sd_raw_init+0x66>
     bee:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <sd_raw_card_type>
     bf2:	82 60       	ori	r24, 0x02	; 2
     bf4:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <sd_raw_card_type>
     bf8:	c0 e0       	ldi	r28, 0x00	; 0
     bfa:	d0 e8       	ldi	r29, 0x80	; 128
     bfc:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <sd_raw_card_type>
     c00:	98 2f       	mov	r25, r24
     c02:	93 70       	andi	r25, 0x03	; 3
     c04:	49 f1       	breq	.+82     	; 0xc58 <sd_raw_init+0xda>
     c06:	81 ff       	sbrs	r24, 1
     c08:	23 c0       	rjmp	.+70     	; 0xc50 <sd_raw_init+0xd2>
     c0a:	c1 2c       	mov	r12, r1
     c0c:	d1 2c       	mov	r13, r1
     c0e:	e1 2c       	mov	r14, r1
     c10:	90 e4       	ldi	r25, 0x40	; 64
     c12:	f9 2e       	mov	r15, r25
     c14:	40 e0       	ldi	r20, 0x00	; 0
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	ba 01       	movw	r22, r20
     c1a:	87 e3       	ldi	r24, 0x37	; 55
     c1c:	86 de       	rcall	.-756    	; 0x92a <sd_raw_send_command>
     c1e:	b7 01       	movw	r22, r14
     c20:	a6 01       	movw	r20, r12
     c22:	89 e2       	ldi	r24, 0x29	; 41
     c24:	82 de       	rcall	.-764    	; 0x92a <sd_raw_send_command>
     c26:	80 ff       	sbrs	r24, 0
     c28:	1c c0       	rjmp	.+56     	; 0xc62 <sd_raw_init+0xe4>
     c2a:	21 97       	sbiw	r28, 0x01	; 1
     c2c:	39 f7       	brne	.-50     	; 0xbfc <sd_raw_init+0x7e>
     c2e:	cb cf       	rjmp	.-106    	; 0xbc6 <sd_raw_init+0x48>
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	ba 01       	movw	r22, r20
     c36:	87 e3       	ldi	r24, 0x37	; 55
     c38:	78 de       	rcall	.-784    	; 0x92a <sd_raw_send_command>
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	ba 01       	movw	r22, r20
     c40:	89 e2       	ldi	r24, 0x29	; 41
     c42:	73 de       	rcall	.-794    	; 0x92a <sd_raw_send_command>
     c44:	82 fd       	sbrc	r24, 2
     c46:	d8 cf       	rjmp	.-80     	; 0xbf8 <sd_raw_init+0x7a>
     c48:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <sd_raw_card_type>
     c4c:	81 60       	ori	r24, 0x01	; 1
     c4e:	d2 cf       	rjmp	.-92     	; 0xbf4 <sd_raw_init+0x76>
     c50:	c1 2c       	mov	r12, r1
     c52:	d1 2c       	mov	r13, r1
     c54:	76 01       	movw	r14, r12
     c56:	de cf       	rjmp	.-68     	; 0xc14 <sd_raw_init+0x96>
     c58:	40 e0       	ldi	r20, 0x00	; 0
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	ba 01       	movw	r22, r20
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	e1 cf       	rjmp	.-62     	; 0xc24 <sd_raw_init+0xa6>
     c62:	c0 91 b1 02 	lds	r28, 0x02B1	; 0x8002b1 <sd_raw_card_type>
     c66:	c1 ff       	sbrs	r28, 1
     c68:	10 c0       	rjmp	.+32     	; 0xc8a <sd_raw_init+0x10c>
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	ba 01       	movw	r22, r20
     c70:	8a e3       	ldi	r24, 0x3A	; 58
     c72:	5b de       	rcall	.-842    	; 0x92a <sd_raw_send_command>
     c74:	81 11       	cpse	r24, r1
     c76:	a7 cf       	rjmp	.-178    	; 0xbc6 <sd_raw_init+0x48>
     c78:	4e de       	rcall	.-868    	; 0x916 <sd_raw_rec_byte>
     c7a:	86 ff       	sbrs	r24, 6
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <sd_raw_init+0x106>
     c7e:	c4 60       	ori	r28, 0x04	; 4
     c80:	c0 93 b1 02 	sts	0x02B1, r28	; 0x8002b1 <sd_raw_card_type>
     c84:	48 de       	rcall	.-880    	; 0x916 <sd_raw_rec_byte>
     c86:	47 de       	rcall	.-882    	; 0x916 <sd_raw_rec_byte>
     c88:	46 de       	rcall	.-884    	; 0x916 <sd_raw_rec_byte>
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	52 e0       	ldi	r21, 0x02	; 2
     c8e:	60 e0       	ldi	r22, 0x00	; 0
     c90:	70 e0       	ldi	r23, 0x00	; 0
     c92:	80 e1       	ldi	r24, 0x10	; 16
     c94:	4a de       	rcall	.-876    	; 0x92a <sd_raw_send_command>
     c96:	28 9a       	sbi	0x05, 0	; 5
     c98:	81 11       	cpse	r24, r1
     c9a:	a4 cf       	rjmp	.-184    	; 0xbe4 <sd_raw_init+0x66>
     c9c:	8c b5       	in	r24, 0x2c	; 44
     c9e:	8c 7f       	andi	r24, 0xFC	; 252
     ca0:	8c bd       	out	0x2c, r24	; 44
     ca2:	8d b5       	in	r24, 0x2d	; 45
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8d bd       	out	0x2d, r24	; 45
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	80 93 b2 02 	sts	0x02B2, r24	; 0x8002b2 <raw_block_address>
     cae:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <raw_block_address+0x1>
     cb2:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <raw_block_address+0x2>
     cb6:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <raw_block_address+0x3>
     cba:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <raw_block_address+0x4>
     cbe:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <raw_block_address+0x5>
     cc2:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <raw_block_address+0x6>
     cc6:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <raw_block_address+0x7>
     cca:	e1 2c       	mov	r14, r1
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	f8 2e       	mov	r15, r24
     cd0:	0a eb       	ldi	r16, 0xBA	; 186
     cd2:	12 e0       	ldi	r17, 0x02	; 2
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	40 e0       	ldi	r20, 0x00	; 0
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	4e de       	rcall	.-868    	; 0x982 <sd_raw_read>
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	88 23       	and	r24, r24
     cea:	09 f4       	brne	.+2      	; 0xcee <sd_raw_init+0x170>
     cec:	7b cf       	rjmp	.-266    	; 0xbe4 <sd_raw_init+0x66>
     cee:	89 2f       	mov	r24, r25
     cf0:	df 91       	pop	r29
     cf2:	cf 91       	pop	r28
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
     d00:	08 95       	ret

00000d02 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
     d02:	2f 92       	push	r2
     d04:	3f 92       	push	r3
     d06:	4f 92       	push	r4
     d08:	5f 92       	push	r5
     d0a:	6f 92       	push	r6
     d0c:	7f 92       	push	r7
     d0e:	8f 92       	push	r8
     d10:	9f 92       	push	r9
     d12:	af 92       	push	r10
     d14:	bf 92       	push	r11
     d16:	cf 92       	push	r12
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	60 97       	sbiw	r28, 0x10	; 16
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	29 83       	std	Y+1, r18	; 0x01
     d38:	3a 83       	std	Y+2, r19	; 0x02
     d3a:	4b 83       	std	Y+3, r20	; 0x03
     d3c:	5c 83       	std	Y+4, r21	; 0x04
     d3e:	6d 83       	std	Y+5, r22	; 0x05
     d40:	7e 83       	std	Y+6, r23	; 0x06
     d42:	8f 83       	std	Y+7, r24	; 0x07
     d44:	98 87       	std	Y+8, r25	; 0x08
     d46:	1e 87       	std	Y+14, r17	; 0x0e
     d48:	0d 87       	std	Y+13, r16	; 0x0d
     d4a:	fa 86       	std	Y+10, r15	; 0x0a
     d4c:	e9 86       	std	Y+9, r14	; 0x09
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
     d4e:	89 85       	ldd	r24, Y+9	; 0x09
     d50:	9a 85       	ldd	r25, Y+10	; 0x0a
     d52:	89 2b       	or	r24, r25
     d54:	11 f4       	brne	.+4      	; 0xd5a <sd_raw_write+0x58>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	87 c0       	rjmp	.+270    	; 0xe68 <sd_raw_write+0x166>
        block_offset = offset & 0x01ff;
     d5a:	29 81       	ldd	r18, Y+1	; 0x01
     d5c:	3a 81       	ldd	r19, Y+2	; 0x02
     d5e:	31 70       	andi	r19, 0x01	; 1
     d60:	3c 87       	std	Y+12, r19	; 0x0c
     d62:	2b 87       	std	Y+11, r18	; 0x0b
        block_address = offset - block_offset;
     d64:	19 01       	movw	r2, r18
     d66:	29 81       	ldd	r18, Y+1	; 0x01
     d68:	3a 81       	ldd	r19, Y+2	; 0x02
     d6a:	4b 81       	ldd	r20, Y+3	; 0x03
     d6c:	5c 81       	ldd	r21, Y+4	; 0x04
     d6e:	6d 81       	ldd	r22, Y+5	; 0x05
     d70:	7e 81       	ldd	r23, Y+6	; 0x06
     d72:	8f 81       	ldd	r24, Y+7	; 0x07
     d74:	98 85       	ldd	r25, Y+8	; 0x08
     d76:	51 01       	movw	r10, r2
     d78:	c1 2c       	mov	r12, r1
     d7a:	d1 2c       	mov	r13, r1
     d7c:	e1 2c       	mov	r14, r1
     d7e:	f1 2c       	mov	r15, r1
     d80:	00 e0       	ldi	r16, 0x00	; 0
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	e5 d5       	rcall	.+3018   	; 0x1950 <__subdi3>
     d86:	39 01       	movw	r6, r18
     d88:	4a 01       	movw	r8, r20
     d8a:	1b 01       	movw	r2, r22
     d8c:	2c 01       	movw	r4, r24
        write_length = 512 - block_offset; /* write up to block border */
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	eb 85       	ldd	r30, Y+11	; 0x0b
     d94:	fc 85       	ldd	r31, Y+12	; 0x0c
     d96:	8e 1b       	sub	r24, r30
     d98:	9f 0b       	sbc	r25, r31
     d9a:	29 85       	ldd	r18, Y+9	; 0x09
     d9c:	3a 85       	ldd	r19, Y+10	; 0x0a
     d9e:	38 8b       	std	Y+16, r19	; 0x10
     da0:	2f 87       	std	Y+15, r18	; 0x0f
     da2:	82 17       	cp	r24, r18
     da4:	93 07       	cpc	r25, r19
     da6:	10 f4       	brcc	.+4      	; 0xdac <sd_raw_write+0xaa>
     da8:	98 8b       	std	Y+16, r25	; 0x10
     daa:	8f 87       	std	Y+15, r24	; 0x0f
        if(block_address != raw_block_address)
     dac:	a0 90 b2 02 	lds	r10, 0x02B2	; 0x8002b2 <raw_block_address>
     db0:	b0 90 b3 02 	lds	r11, 0x02B3	; 0x8002b3 <raw_block_address+0x1>
     db4:	c0 90 b4 02 	lds	r12, 0x02B4	; 0x8002b4 <raw_block_address+0x2>
     db8:	d0 90 b5 02 	lds	r13, 0x02B5	; 0x8002b5 <raw_block_address+0x3>
     dbc:	e0 90 b6 02 	lds	r14, 0x02B6	; 0x8002b6 <raw_block_address+0x4>
     dc0:	f0 90 b7 02 	lds	r15, 0x02B7	; 0x8002b7 <raw_block_address+0x5>
     dc4:	00 91 b8 02 	lds	r16, 0x02B8	; 0x8002b8 <raw_block_address+0x6>
     dc8:	10 91 b9 02 	lds	r17, 0x02B9	; 0x8002b9 <raw_block_address+0x7>
     dcc:	93 01       	movw	r18, r6
     dce:	a4 01       	movw	r20, r8
     dd0:	b1 01       	movw	r22, r2
     dd2:	c2 01       	movw	r24, r4
     dd4:	c6 d5       	rcall	.+2956   	; 0x1962 <__cmpdi2>
     dd6:	c9 f0       	breq	.+50     	; 0xe0a <sd_raw_write+0x108>
            if(block_offset || write_length < 512)
     dd8:	8b 85       	ldd	r24, Y+11	; 0x0b
     dda:	9c 85       	ldd	r25, Y+12	; 0x0c
     ddc:	89 2b       	or	r24, r25
     dde:	c1 f5       	brne	.+112    	; 0xe50 <sd_raw_write+0x14e>
     de0:	ef 85       	ldd	r30, Y+15	; 0x0f
     de2:	f8 89       	ldd	r31, Y+16	; 0x10
     de4:	e1 15       	cp	r30, r1
     de6:	f2 40       	sbci	r31, 0x02	; 2
     de8:	99 f5       	brne	.+102    	; 0xe50 <sd_raw_write+0x14e>
            raw_block_address = block_address;
     dea:	60 92 b2 02 	sts	0x02B2, r6	; 0x8002b2 <raw_block_address>
     dee:	70 92 b3 02 	sts	0x02B3, r7	; 0x8002b3 <raw_block_address+0x1>
     df2:	80 92 b4 02 	sts	0x02B4, r8	; 0x8002b4 <raw_block_address+0x2>
     df6:	90 92 b5 02 	sts	0x02B5, r9	; 0x8002b5 <raw_block_address+0x3>
     dfa:	20 92 b6 02 	sts	0x02B6, r2	; 0x8002b6 <raw_block_address+0x4>
     dfe:	30 92 b7 02 	sts	0x02B7, r3	; 0x8002b7 <raw_block_address+0x5>
     e02:	40 92 b8 02 	sts	0x02B8, r4	; 0x8002b8 <raw_block_address+0x6>
     e06:	50 92 b9 02 	sts	0x02B9, r5	; 0x8002b9 <raw_block_address+0x7>
        if(buffer != raw_block)
     e0a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0e:	e2 e0       	ldi	r30, 0x02	; 2
     e10:	8a 3b       	cpi	r24, 0xBA	; 186
     e12:	9e 07       	cpc	r25, r30
     e14:	41 f0       	breq	.+16     	; 0xe26 <sd_raw_write+0x124>
            memcpy(raw_block + block_offset, buffer, write_length);
     e16:	4f 85       	ldd	r20, Y+15	; 0x0f
     e18:	58 89       	ldd	r21, Y+16	; 0x10
     e1a:	bc 01       	movw	r22, r24
     e1c:	8b 85       	ldd	r24, Y+11	; 0x0b
     e1e:	9c 85       	ldd	r25, Y+12	; 0x0c
     e20:	86 54       	subi	r24, 0x46	; 70
     e22:	9d 4f       	sbci	r25, 0xFD	; 253
     e24:	a7 d5       	rcall	.+2894   	; 0x1974 <memcpy>
        select_card();
     e26:	28 98       	cbi	0x05, 0	; 5
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
     e28:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <sd_raw_card_type>
     e2c:	82 ff       	sbrs	r24, 2
     e2e:	35 c0       	rjmp	.+106    	; 0xe9a <sd_raw_write+0x198>
     e30:	93 01       	movw	r18, r6
     e32:	a4 01       	movw	r20, r8
     e34:	b1 01       	movw	r22, r2
     e36:	c2 01       	movw	r24, r4
     e38:	09 e0       	ldi	r16, 0x09	; 9
     e3a:	65 d5       	rcall	.+2762   	; 0x1906 <__lshrdi3>
     e3c:	ba 01       	movw	r22, r20
     e3e:	42 2f       	mov	r20, r18
     e40:	53 2f       	mov	r21, r19
     e42:	88 e1       	ldi	r24, 0x18	; 24
     e44:	72 dd       	rcall	.-1308   	; 0x92a <sd_raw_send_command>
     e46:	88 23       	and	r24, r24
     e48:	59 f1       	breq	.+86     	; 0xea0 <sd_raw_write+0x19e>
            unselect_card();
     e4a:	28 9a       	sbi	0x05, 0	; 5
            return 0;
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	0c c0       	rjmp	.+24     	; 0xe68 <sd_raw_write+0x166>
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
     e50:	e1 2c       	mov	r14, r1
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	f8 2e       	mov	r15, r24
     e56:	0a eb       	ldi	r16, 0xBA	; 186
     e58:	12 e0       	ldi	r17, 0x02	; 2
     e5a:	93 01       	movw	r18, r6
     e5c:	a4 01       	movw	r20, r8
     e5e:	b1 01       	movw	r22, r2
     e60:	c2 01       	movw	r24, r4
     e62:	8f dd       	rcall	.-1250   	; 0x982 <sd_raw_read>
     e64:	81 11       	cpse	r24, r1
     e66:	c1 cf       	rjmp	.-126    	; 0xdea <sd_raw_write+0xe8>
}
     e68:	60 96       	adiw	r28, 0x10	; 16
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	bf 90       	pop	r11
     e86:	af 90       	pop	r10
     e88:	9f 90       	pop	r9
     e8a:	8f 90       	pop	r8
     e8c:	7f 90       	pop	r7
     e8e:	6f 90       	pop	r6
     e90:	5f 90       	pop	r5
     e92:	4f 90       	pop	r4
     e94:	3f 90       	pop	r3
     e96:	2f 90       	pop	r2
     e98:	08 95       	ret
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
     e9a:	a3 01       	movw	r20, r6
     e9c:	b4 01       	movw	r22, r8
     e9e:	d1 cf       	rjmp	.-94     	; 0xe42 <sd_raw_write+0x140>
        sd_raw_send_byte(0xfe);
     ea0:	8e ef       	ldi	r24, 0xFE	; 254
     ea2:	31 dd       	rcall	.-1438   	; 0x906 <sd_raw_send_byte>
     ea4:	0a eb       	ldi	r16, 0xBA	; 186
     ea6:	12 e0       	ldi	r17, 0x02	; 2
            sd_raw_send_byte(*cache++);
     ea8:	f8 01       	movw	r30, r16
     eaa:	81 91       	ld	r24, Z+
     eac:	8f 01       	movw	r16, r30
     eae:	2b dd       	rcall	.-1450   	; 0x906 <sd_raw_send_byte>
        for(uint16_t i = 0; i < 512; ++i)
     eb0:	2a eb       	ldi	r18, 0xBA	; 186
     eb2:	34 e0       	ldi	r19, 0x04	; 4
     eb4:	20 17       	cp	r18, r16
     eb6:	31 07       	cpc	r19, r17
     eb8:	b9 f7       	brne	.-18     	; 0xea8 <sd_raw_write+0x1a6>
        sd_raw_send_byte(0xff);
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	24 dd       	rcall	.-1464   	; 0x906 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	22 dd       	rcall	.-1468   	; 0x906 <sd_raw_send_byte>
        while(sd_raw_rec_byte() != 0xff);
     ec2:	29 dd       	rcall	.-1454   	; 0x916 <sd_raw_rec_byte>
     ec4:	8f 3f       	cpi	r24, 0xFF	; 255
     ec6:	e9 f7       	brne	.-6      	; 0xec2 <sd_raw_write+0x1c0>
        sd_raw_rec_byte();
     ec8:	26 dd       	rcall	.-1460   	; 0x916 <sd_raw_rec_byte>
        unselect_card();
     eca:	28 9a       	sbi	0x05, 0	; 5
        buffer += write_length;
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	ef 85       	ldd	r30, Y+15	; 0x0f
     ed2:	f8 89       	ldd	r31, Y+16	; 0x10
     ed4:	8e 0f       	add	r24, r30
     ed6:	9f 1f       	adc	r25, r31
     ed8:	9e 87       	std	Y+14, r25	; 0x0e
     eda:	8d 87       	std	Y+13, r24	; 0x0d
        offset += write_length;
     edc:	9f 01       	movw	r18, r30
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a9 80       	ldd	r10, Y+1	; 0x01
     eec:	ba 80       	ldd	r11, Y+2	; 0x02
     eee:	cb 80       	ldd	r12, Y+3	; 0x03
     ef0:	dc 80       	ldd	r13, Y+4	; 0x04
     ef2:	ed 80       	ldd	r14, Y+5	; 0x05
     ef4:	fe 80       	ldd	r15, Y+6	; 0x06
     ef6:	0f 81       	ldd	r16, Y+7	; 0x07
     ef8:	18 85       	ldd	r17, Y+8	; 0x08
     efa:	21 d5       	rcall	.+2626   	; 0x193e <__adddi3>
     efc:	29 83       	std	Y+1, r18	; 0x01
     efe:	3a 83       	std	Y+2, r19	; 0x02
     f00:	4b 83       	std	Y+3, r20	; 0x03
     f02:	5c 83       	std	Y+4, r21	; 0x04
     f04:	6d 83       	std	Y+5, r22	; 0x05
     f06:	7e 83       	std	Y+6, r23	; 0x06
     f08:	8f 83       	std	Y+7, r24	; 0x07
     f0a:	98 87       	std	Y+8, r25	; 0x08
        length -= write_length;
     f0c:	29 85       	ldd	r18, Y+9	; 0x09
     f0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     f10:	2e 1b       	sub	r18, r30
     f12:	3f 0b       	sbc	r19, r31
     f14:	3a 87       	std	Y+10, r19	; 0x0a
     f16:	29 87       	std	Y+9, r18	; 0x09
     f18:	1a cf       	rjmp	.-460    	; 0xd4e <sd_raw_write+0x4c>

00000f1a <Endpoint_Null_Stream>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	ec 01       	movw	r28, r24
     f2a:	8b 01       	movw	r16, r22
     f2c:	e2 d1       	rcall	.+964    	; 0x12f2 <Endpoint_WaitUntilReady>
     f2e:	f8 2e       	mov	r15, r24
     f30:	81 11       	cpse	r24, r1
     f32:	21 c0       	rjmp	.+66     	; 0xf76 <Endpoint_Null_Stream+0x5c>
     f34:	01 15       	cp	r16, r1
     f36:	11 05       	cpc	r17, r1
     f38:	29 f0       	breq	.+10     	; 0xf44 <Endpoint_Null_Stream+0x2a>
     f3a:	f8 01       	movw	r30, r16
     f3c:	80 81       	ld	r24, Z
     f3e:	91 81       	ldd	r25, Z+1	; 0x01
     f40:	c8 1b       	sub	r28, r24
     f42:	d9 0b       	sbc	r29, r25
     f44:	c1 2c       	mov	r12, r1
     f46:	d1 2c       	mov	r13, r1
     f48:	20 97       	sbiw	r28, 0x00	; 0
     f4a:	a9 f0       	breq	.+42     	; 0xf76 <Endpoint_Null_Stream+0x5c>
     f4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f50:	85 fd       	sbrc	r24, 5
     f52:	1f c0       	rjmp	.+62     	; 0xf92 <Endpoint_Null_Stream+0x78>
     f54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f58:	8e 77       	andi	r24, 0x7E	; 126
     f5a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     f5e:	01 15       	cp	r16, r1
     f60:	11 05       	cpc	r17, r1
     f62:	91 f0       	breq	.+36     	; 0xf88 <Endpoint_Null_Stream+0x6e>
     f64:	f8 01       	movw	r30, r16
     f66:	80 81       	ld	r24, Z
     f68:	91 81       	ldd	r25, Z+1	; 0x01
     f6a:	c8 0e       	add	r12, r24
     f6c:	d9 1e       	adc	r13, r25
     f6e:	d1 82       	std	Z+1, r13	; 0x01
     f70:	c0 82       	st	Z, r12
     f72:	85 e0       	ldi	r24, 0x05	; 5
     f74:	f8 2e       	mov	r15, r24
     f76:	8f 2d       	mov	r24, r15
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	1f 91       	pop	r17
     f7e:	0f 91       	pop	r16
     f80:	ff 90       	pop	r15
     f82:	df 90       	pop	r13
     f84:	cf 90       	pop	r12
     f86:	08 95       	ret
     f88:	b4 d1       	rcall	.+872    	; 0x12f2 <Endpoint_WaitUntilReady>
     f8a:	88 23       	and	r24, r24
     f8c:	e9 f2       	breq	.-70     	; 0xf48 <Endpoint_Null_Stream+0x2e>
     f8e:	f8 2e       	mov	r15, r24
     f90:	f2 cf       	rjmp	.-28     	; 0xf76 <Endpoint_Null_Stream+0x5c>
     f92:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     f96:	21 97       	sbiw	r28, 0x01	; 1
     f98:	ff ef       	ldi	r31, 0xFF	; 255
     f9a:	cf 1a       	sub	r12, r31
     f9c:	df 0a       	sbc	r13, r31
     f9e:	d4 cf       	rjmp	.-88     	; 0xf48 <Endpoint_Null_Stream+0x2e>

00000fa0 <Endpoint_Write_Stream_LE>:
     fa0:	af 92       	push	r10
     fa2:	bf 92       	push	r11
     fa4:	df 92       	push	r13
     fa6:	ef 92       	push	r14
     fa8:	ff 92       	push	r15
     faa:	0f 93       	push	r16
     fac:	1f 93       	push	r17
     fae:	cf 93       	push	r28
     fb0:	df 93       	push	r29
     fb2:	ec 01       	movw	r28, r24
     fb4:	8b 01       	movw	r16, r22
     fb6:	7a 01       	movw	r14, r20
     fb8:	9c d1       	rcall	.+824    	; 0x12f2 <Endpoint_WaitUntilReady>
     fba:	d8 2e       	mov	r13, r24
     fbc:	81 11       	cpse	r24, r1
     fbe:	24 c0       	rjmp	.+72     	; 0x1008 <Endpoint_Write_Stream_LE+0x68>
     fc0:	e1 14       	cp	r14, r1
     fc2:	f1 04       	cpc	r15, r1
     fc4:	39 f0       	breq	.+14     	; 0xfd4 <Endpoint_Write_Stream_LE+0x34>
     fc6:	f7 01       	movw	r30, r14
     fc8:	80 81       	ld	r24, Z
     fca:	91 81       	ldd	r25, Z+1	; 0x01
     fcc:	08 1b       	sub	r16, r24
     fce:	19 0b       	sbc	r17, r25
     fd0:	c8 0f       	add	r28, r24
     fd2:	d9 1f       	adc	r29, r25
     fd4:	a1 2c       	mov	r10, r1
     fd6:	b1 2c       	mov	r11, r1
     fd8:	01 15       	cp	r16, r1
     fda:	11 05       	cpc	r17, r1
     fdc:	a9 f0       	breq	.+42     	; 0x1008 <Endpoint_Write_Stream_LE+0x68>
     fde:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fe2:	85 fd       	sbrc	r24, 5
     fe4:	21 c0       	rjmp	.+66     	; 0x1028 <Endpoint_Write_Stream_LE+0x88>
     fe6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     fea:	8e 77       	andi	r24, 0x7E	; 126
     fec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ff0:	e1 14       	cp	r14, r1
     ff2:	f1 04       	cpc	r15, r1
     ff4:	a1 f0       	breq	.+40     	; 0x101e <Endpoint_Write_Stream_LE+0x7e>
     ff6:	f7 01       	movw	r30, r14
     ff8:	80 81       	ld	r24, Z
     ffa:	91 81       	ldd	r25, Z+1	; 0x01
     ffc:	a8 0e       	add	r10, r24
     ffe:	b9 1e       	adc	r11, r25
    1000:	b1 82       	std	Z+1, r11	; 0x01
    1002:	a0 82       	st	Z, r10
    1004:	85 e0       	ldi	r24, 0x05	; 5
    1006:	d8 2e       	mov	r13, r24
    1008:	8d 2d       	mov	r24, r13
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	08 95       	ret
    101e:	69 d1       	rcall	.+722    	; 0x12f2 <Endpoint_WaitUntilReady>
    1020:	88 23       	and	r24, r24
    1022:	d1 f2       	breq	.-76     	; 0xfd8 <Endpoint_Write_Stream_LE+0x38>
    1024:	d8 2e       	mov	r13, r24
    1026:	f0 cf       	rjmp	.-32     	; 0x1008 <Endpoint_Write_Stream_LE+0x68>
    1028:	89 91       	ld	r24, Y+
    102a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    102e:	01 50       	subi	r16, 0x01	; 1
    1030:	11 09       	sbc	r17, r1
    1032:	ff ef       	ldi	r31, 0xFF	; 255
    1034:	af 1a       	sub	r10, r31
    1036:	bf 0a       	sbc	r11, r31
    1038:	cf cf       	rjmp	.-98     	; 0xfd8 <Endpoint_Write_Stream_LE+0x38>

0000103a <Endpoint_Read_Stream_LE>:
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	df 92       	push	r13
    1040:	ef 92       	push	r14
    1042:	ff 92       	push	r15
    1044:	0f 93       	push	r16
    1046:	1f 93       	push	r17
    1048:	cf 93       	push	r28
    104a:	df 93       	push	r29
    104c:	ec 01       	movw	r28, r24
    104e:	8b 01       	movw	r16, r22
    1050:	7a 01       	movw	r14, r20
    1052:	4f d1       	rcall	.+670    	; 0x12f2 <Endpoint_WaitUntilReady>
    1054:	d8 2e       	mov	r13, r24
    1056:	81 11       	cpse	r24, r1
    1058:	24 c0       	rjmp	.+72     	; 0x10a2 <Endpoint_Read_Stream_LE+0x68>
    105a:	e1 14       	cp	r14, r1
    105c:	f1 04       	cpc	r15, r1
    105e:	39 f0       	breq	.+14     	; 0x106e <Endpoint_Read_Stream_LE+0x34>
    1060:	f7 01       	movw	r30, r14
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	08 1b       	sub	r16, r24
    1068:	19 0b       	sbc	r17, r25
    106a:	c8 0f       	add	r28, r24
    106c:	d9 1f       	adc	r29, r25
    106e:	a1 2c       	mov	r10, r1
    1070:	b1 2c       	mov	r11, r1
    1072:	01 15       	cp	r16, r1
    1074:	11 05       	cpc	r17, r1
    1076:	a9 f0       	breq	.+42     	; 0x10a2 <Endpoint_Read_Stream_LE+0x68>
    1078:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    107c:	85 fd       	sbrc	r24, 5
    107e:	21 c0       	rjmp	.+66     	; 0x10c2 <Endpoint_Read_Stream_LE+0x88>
    1080:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1084:	8b 77       	andi	r24, 0x7B	; 123
    1086:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    108a:	e1 14       	cp	r14, r1
    108c:	f1 04       	cpc	r15, r1
    108e:	a1 f0       	breq	.+40     	; 0x10b8 <Endpoint_Read_Stream_LE+0x7e>
    1090:	f7 01       	movw	r30, r14
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	a8 0e       	add	r10, r24
    1098:	b9 1e       	adc	r11, r25
    109a:	b1 82       	std	Z+1, r11	; 0x01
    109c:	a0 82       	st	Z, r10
    109e:	85 e0       	ldi	r24, 0x05	; 5
    10a0:	d8 2e       	mov	r13, r24
    10a2:	8d 2d       	mov	r24, r13
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	ff 90       	pop	r15
    10ae:	ef 90       	pop	r14
    10b0:	df 90       	pop	r13
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	08 95       	ret
    10b8:	1c d1       	rcall	.+568    	; 0x12f2 <Endpoint_WaitUntilReady>
    10ba:	88 23       	and	r24, r24
    10bc:	d1 f2       	breq	.-76     	; 0x1072 <Endpoint_Read_Stream_LE+0x38>
    10be:	d8 2e       	mov	r13, r24
    10c0:	f0 cf       	rjmp	.-32     	; 0x10a2 <Endpoint_Read_Stream_LE+0x68>
    10c2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    10c6:	89 93       	st	Y+, r24
    10c8:	01 50       	subi	r16, 0x01	; 1
    10ca:	11 09       	sbc	r17, r1
    10cc:	ff ef       	ldi	r31, 0xFF	; 255
    10ce:	af 1a       	sub	r10, r31
    10d0:	bf 0a       	sbc	r11, r31
    10d2:	cf cf       	rjmp	.-98     	; 0x1072 <Endpoint_Read_Stream_LE+0x38>

000010d4 <Endpoint_Write_Control_Stream_LE>:
    10d4:	20 91 e4 04 	lds	r18, 0x04E4	; 0x8004e4 <USB_ControlRequest+0x6>
    10d8:	30 91 e5 04 	lds	r19, 0x04E5	; 0x8004e5 <USB_ControlRequest+0x7>
    10dc:	26 17       	cp	r18, r22
    10de:	37 07       	cpc	r19, r23
    10e0:	a8 f0       	brcs	.+42     	; 0x110c <Endpoint_Write_Control_Stream_LE+0x38>
    10e2:	61 15       	cp	r22, r1
    10e4:	71 05       	cpc	r23, r1
    10e6:	29 f4       	brne	.+10     	; 0x10f2 <Endpoint_Write_Control_Stream_LE+0x1e>
    10e8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10ec:	2e 77       	andi	r18, 0x7E	; 126
    10ee:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    10f2:	fc 01       	movw	r30, r24
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	61 15       	cp	r22, r1
    10f8:	71 05       	cpc	r23, r1
    10fa:	51 f4       	brne	.+20     	; 0x1110 <Endpoint_Write_Control_Stream_LE+0x3c>
    10fc:	21 11       	cpse	r18, r1
    10fe:	08 c0       	rjmp	.+16     	; 0x1110 <Endpoint_Write_Control_Stream_LE+0x3c>
    1100:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1104:	82 ff       	sbrs	r24, 2
    1106:	33 c0       	rjmp	.+102    	; 0x116e <Endpoint_Write_Control_Stream_LE+0x9a>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	08 95       	ret
    110c:	b9 01       	movw	r22, r18
    110e:	f1 cf       	rjmp	.-30     	; 0x10f2 <Endpoint_Write_Control_Stream_LE+0x1e>
    1110:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <USB_DeviceState>
    1114:	88 23       	and	r24, r24
    1116:	b9 f1       	breq	.+110    	; 0x1186 <Endpoint_Write_Control_Stream_LE+0xb2>
    1118:	85 30       	cpi	r24, 0x05	; 5
    111a:	b9 f1       	breq	.+110    	; 0x118a <Endpoint_Write_Control_Stream_LE+0xb6>
    111c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1120:	83 fd       	sbrc	r24, 3
    1122:	2f c0       	rjmp	.+94     	; 0x1182 <Endpoint_Write_Control_Stream_LE+0xae>
    1124:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1128:	82 fd       	sbrc	r24, 2
    112a:	ea cf       	rjmp	.-44     	; 0x1100 <Endpoint_Write_Control_Stream_LE+0x2c>
    112c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1130:	80 ff       	sbrs	r24, 0
    1132:	e1 cf       	rjmp	.-62     	; 0x10f6 <Endpoint_Write_Control_Stream_LE+0x22>
    1134:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    1138:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	92 2b       	or	r25, r18
    1140:	61 15       	cp	r22, r1
    1142:	71 05       	cpc	r23, r1
    1144:	19 f0       	breq	.+6      	; 0x114c <Endpoint_Write_Control_Stream_LE+0x78>
    1146:	88 30       	cpi	r24, 0x08	; 8
    1148:	91 05       	cpc	r25, r1
    114a:	50 f0       	brcs	.+20     	; 0x1160 <Endpoint_Write_Control_Stream_LE+0x8c>
    114c:	21 e0       	ldi	r18, 0x01	; 1
    114e:	08 97       	sbiw	r24, 0x08	; 8
    1150:	09 f0       	breq	.+2      	; 0x1154 <Endpoint_Write_Control_Stream_LE+0x80>
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1158:	8e 77       	andi	r24, 0x7E	; 126
    115a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    115e:	cb cf       	rjmp	.-106    	; 0x10f6 <Endpoint_Write_Control_Stream_LE+0x22>
    1160:	21 91       	ld	r18, Z+
    1162:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1166:	61 50       	subi	r22, 0x01	; 1
    1168:	71 09       	sbc	r23, r1
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	e9 cf       	rjmp	.-46     	; 0x1140 <Endpoint_Write_Control_Stream_LE+0x6c>
    116e:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <USB_DeviceState>
    1172:	88 23       	and	r24, r24
    1174:	41 f0       	breq	.+16     	; 0x1186 <Endpoint_Write_Control_Stream_LE+0xb2>
    1176:	85 30       	cpi	r24, 0x05	; 5
    1178:	41 f0       	breq	.+16     	; 0x118a <Endpoint_Write_Control_Stream_LE+0xb6>
    117a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    117e:	83 ff       	sbrs	r24, 3
    1180:	bf cf       	rjmp	.-130    	; 0x1100 <Endpoint_Write_Control_Stream_LE+0x2c>
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	08 95       	ret
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	08 95       	ret
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	08 95       	ret

0000118e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    118e:	20 91 e4 04 	lds	r18, 0x04E4	; 0x8004e4 <USB_ControlRequest+0x6>
    1192:	30 91 e5 04 	lds	r19, 0x04E5	; 0x8004e5 <USB_ControlRequest+0x7>
    1196:	26 17       	cp	r18, r22
    1198:	37 07       	cpc	r19, r23
    119a:	a8 f0       	brcs	.+42     	; 0x11c6 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    119c:	61 15       	cp	r22, r1
    119e:	71 05       	cpc	r23, r1
    11a0:	29 f4       	brne	.+10     	; 0x11ac <Endpoint_Write_Control_PStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    11a2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11a6:	2e 77       	andi	r18, 0x7E	; 126
    11a8:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    11ac:	fc 01       	movw	r30, r24
    11ae:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    11b0:	61 15       	cp	r22, r1
    11b2:	71 05       	cpc	r23, r1
    11b4:	51 f4       	brne	.+20     	; 0x11ca <Endpoint_Write_Control_PStream_LE+0x3c>
    11b6:	21 11       	cpse	r18, r1
    11b8:	08 c0       	rjmp	.+16     	; 0x11ca <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    11be:	82 ff       	sbrs	r24, 2
    11c0:	34 c0       	rjmp	.+104    	; 0x122a <Endpoint_Write_Control_PStream_LE+0x9c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	08 95       	ret
    11c6:	b9 01       	movw	r22, r18
    11c8:	f1 cf       	rjmp	.-30     	; 0x11ac <Endpoint_Write_Control_PStream_LE+0x1e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    11ca:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    11ce:	88 23       	and	r24, r24
    11d0:	c1 f1       	breq	.+112    	; 0x1242 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    11d2:	85 30       	cpi	r24, 0x05	; 5
    11d4:	c1 f1       	breq	.+112    	; 0x1246 <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11d6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    11da:	83 fd       	sbrc	r24, 3
    11dc:	30 c0       	rjmp	.+96     	; 0x123e <Endpoint_Write_Control_PStream_LE+0xb0>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    11de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
    11e2:	82 fd       	sbrc	r24, 2
    11e4:	ea cf       	rjmp	.-44     	; 0x11ba <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
    11ea:	80 ff       	sbrs	r24, 0
    11ec:	e1 cf       	rjmp	.-62     	; 0x11b0 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    11ee:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
    11f2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	92 2b       	or	r25, r18
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    11fa:	61 15       	cp	r22, r1
    11fc:	71 05       	cpc	r23, r1
    11fe:	19 f0       	breq	.+6      	; 0x1206 <Endpoint_Write_Control_PStream_LE+0x78>
    1200:	88 30       	cpi	r24, 0x08	; 8
    1202:	91 05       	cpc	r25, r1
    1204:	50 f0       	brcs	.+20     	; 0x121a <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1206:	21 e0       	ldi	r18, 0x01	; 1
    1208:	08 97       	sbiw	r24, 0x08	; 8
    120a:	09 f0       	breq	.+2      	; 0x120e <Endpoint_Write_Control_PStream_LE+0x80>
    120c:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    120e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1212:	8e 77       	andi	r24, 0x7E	; 126
    1214:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1218:	cb cf       	rjmp	.-106    	; 0x11b0 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
    121a:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    121c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1220:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1222:	61 50       	subi	r22, 0x01	; 1
    1224:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    1226:	01 96       	adiw	r24, 0x01	; 1
    1228:	e8 cf       	rjmp	.-48     	; 0x11fa <Endpoint_Write_Control_PStream_LE+0x6c>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    122a:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    122e:	88 23       	and	r24, r24
    1230:	41 f0       	breq	.+16     	; 0x1242 <Endpoint_Write_Control_PStream_LE+0xb4>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1232:	85 30       	cpi	r24, 0x05	; 5
    1234:	41 f0       	breq	.+16     	; 0x1246 <Endpoint_Write_Control_PStream_LE+0xb8>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1236:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
    123a:	83 ff       	sbrs	r24, 3
    123c:	be cf       	rjmp	.-132    	; 0x11ba <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
    123e:	81 e0       	ldi	r24, 0x01	; 1
}
    1240:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1242:	82 e0       	ldi	r24, 0x02	; 2
    1244:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	08 95       	ret

0000124a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    124a:	98 2f       	mov	r25, r24
    124c:	97 30       	cpi	r25, 0x07	; 7
    124e:	28 f0       	brcs	.+10     	; 0x125a <Endpoint_ConfigureEndpoint_Prv+0x10>
    1250:	8f 70       	andi	r24, 0x0F	; 15
    1252:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	08 95       	ret
    125a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    125e:	98 17       	cp	r25, r24
    1260:	51 f0       	breq	.+20     	; 0x1276 <Endpoint_ConfigureEndpoint_Prv+0x2c>
    1262:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1266:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    126a:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    126e:	21 fd       	sbrc	r18, 1
    1270:	06 c0       	rjmp	.+12     	; 0x127e <Endpoint_ConfigureEndpoint_Prv+0x34>
    1272:	9f 5f       	subi	r25, 0xFF	; 255
    1274:	eb cf       	rjmp	.-42     	; 0x124c <Endpoint_ConfigureEndpoint_Prv+0x2>
    1276:	24 2f       	mov	r18, r20
    1278:	76 2f       	mov	r23, r22
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	f8 cf       	rjmp	.-16     	; 0x126e <Endpoint_ConfigureEndpoint_Prv+0x24>
    127e:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1282:	3e 7f       	andi	r19, 0xFE	; 254
    1284:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1288:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    128c:	3d 7f       	andi	r19, 0xFD	; 253
    128e:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    1292:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1296:	31 60       	ori	r19, 0x01	; 1
    1298:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    129c:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    12a0:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    12a4:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    12a8:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    12ac:	27 fd       	sbrc	r18, 7
    12ae:	e1 cf       	rjmp	.-62     	; 0x1272 <Endpoint_ConfigureEndpoint_Prv+0x28>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	08 95       	ret

000012b4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    12b4:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <USB_ControlRequest>
    12b8:	87 ff       	sbrs	r24, 7
    12ba:	13 c0       	rjmp	.+38     	; 0x12e2 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    12bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    12c0:	82 ff       	sbrs	r24, 2
    12c2:	06 c0       	rjmp	.+12     	; 0x12d0 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12c8:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ce:	04 c0       	rjmp	.+8      	; 0x12d8 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    12d0:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <USB_DeviceState>
    12d4:	81 11       	cpse	r24, r1
    12d6:	f2 cf       	rjmp	.-28     	; 0x12bc <Endpoint_ClearStatusStage+0x8>
    12d8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    12da:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <USB_DeviceState>
    12de:	88 23       	and	r24, r24
    12e0:	d9 f3       	breq	.-10     	; 0x12d8 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    12e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    12e6:	80 ff       	sbrs	r24, 0
    12e8:	f8 cf       	rjmp	.-16     	; 0x12da <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    12ee:	8e 77       	andi	r24, 0x7E	; 126
    12f0:	ec cf       	rjmp	.-40     	; 0x12ca <Endpoint_ClearStatusStage+0x16>

000012f2 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    12f2:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    12f6:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    12fa:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    12fc:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1300:	90 fd       	sbrc	r25, 0
    1302:	20 c0       	rjmp	.+64     	; 0x1344 <Endpoint_WaitUntilReady+0x52>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1304:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1308:	92 fd       	sbrc	r25, 2
    130a:	20 c0       	rjmp	.+64     	; 0x134c <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    130c:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1310:	99 23       	and	r25, r25
    1312:	91 f0       	breq	.+36     	; 0x1338 <Endpoint_WaitUntilReady+0x46>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1314:	95 30       	cpi	r25, 0x05	; 5
    1316:	91 f0       	breq	.+36     	; 0x133c <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1318:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    131c:	95 fd       	sbrc	r25, 5
    131e:	10 c0       	rjmp	.+32     	; 0x1340 <Endpoint_WaitUntilReady+0x4e>
    1320:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1324:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1328:	42 17       	cp	r20, r18
    132a:	53 07       	cpc	r21, r19
    132c:	39 f3       	breq	.-50     	; 0x12fc <Endpoint_WaitUntilReady+0xa>
    132e:	81 50       	subi	r24, 0x01	; 1
    1330:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1332:	21 f7       	brne	.-56     	; 0x12fc <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1334:	84 e0       	ldi	r24, 0x04	; 4
    1336:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    133c:	83 e0       	ldi	r24, 0x03	; 3
    133e:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	08 95       	ret
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1344:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
    1348:	90 ff       	sbrs	r25, 0
    134a:	e0 cf       	rjmp	.-64     	; 0x130c <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	08 95       	ret

00001350 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1358:	4b d0       	rcall	.+150    	; 0x13f0 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    135a:	52 d0       	rcall	.+164    	; 0x1400 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    135c:	c8 ed       	ldi	r28, 0xD8	; 216
    135e:	d0 e0       	ldi	r29, 0x00	; 0
    1360:	88 81       	ld	r24, Y
    1362:	8f 77       	andi	r24, 0x7F	; 127
    1364:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1366:	88 81       	ld	r24, Y
    1368:	80 68       	ori	r24, 0x80	; 128
    136a:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    136c:	88 81       	ld	r24, Y
    136e:	8f 7d       	andi	r24, 0xDF	; 223
    1370:	88 83       	st	Y, r24
				PLLCSR = 0;
    1372:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1374:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    1378:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <USB_Device_ConfigurationNumber>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    137c:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1380:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1384:	00 ee       	ldi	r16, 0xE0	; 224
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	f8 01       	movw	r30, r16
    138a:	80 81       	ld	r24, Z
    138c:	8b 7f       	andi	r24, 0xFB	; 251
    138e:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1390:	88 81       	ld	r24, Y
    1392:	81 60       	ori	r24, 0x01	; 1
    1394:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    1396:	42 e0       	ldi	r20, 0x02	; 2
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	56 df       	rcall	.-340    	; 0x124a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    139e:	e1 ee       	ldi	r30, 0xE1	; 225
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	8e 7f       	andi	r24, 0xFE	; 254
    13a6:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    13a8:	e2 ee       	ldi	r30, 0xE2	; 226
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	81 60       	ori	r24, 0x01	; 1
    13b0:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    13b2:	80 81       	ld	r24, Z
    13b4:	88 60       	ori	r24, 0x08	; 8
    13b6:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    13b8:	f8 01       	movw	r30, r16
    13ba:	80 81       	ld	r24, Z
    13bc:	8e 7f       	andi	r24, 0xFE	; 254
    13be:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    13c0:	88 81       	ld	r24, Y
    13c2:	80 61       	ori	r24, 0x10	; 16
    13c4:	88 83       	st	Y, r24
}
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	08 95       	ret

000013d0 <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    13d0:	e8 ed       	ldi	r30, 0xD8	; 216
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8f 7e       	andi	r24, 0xEF	; 239
    13d8:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    13da:	e7 ed       	ldi	r30, 0xD7	; 215
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
    13e4:	84 e0       	ldi	r24, 0x04	; 4
    13e6:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <USB_IsInitialized>
	USB_ResetInterface();
    13ee:	b0 cf       	rjmp	.-160    	; 0x1350 <USB_ResetInterface>

000013f0 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    13f0:	e8 ed       	ldi	r30, 0xD8	; 216
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8e 7f       	andi	r24, 0xFE	; 254
    13f8:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    13fa:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    13fe:	08 95       	ret

00001400 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1400:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1404:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1408:	08 95       	ret

0000140a <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	2f 93       	push	r18
    1416:	3f 93       	push	r19
    1418:	4f 93       	push	r20
    141a:	5f 93       	push	r21
    141c:	6f 93       	push	r22
    141e:	7f 93       	push	r23
    1420:	8f 93       	push	r24
    1422:	9f 93       	push	r25
    1424:	af 93       	push	r26
    1426:	bf 93       	push	r27
    1428:	ef 93       	push	r30
    142a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    142c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1430:	82 ff       	sbrs	r24, 2
    1432:	0a c0       	rjmp	.+20     	; 0x1448 <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
    1434:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1438:	82 ff       	sbrs	r24, 2
    143a:	06 c0       	rjmp	.+12     	; 0x1448 <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
    143c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1440:	8b 7f       	andi	r24, 0xFB	; 251
    1442:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1446:	41 d2       	rcall	.+1154   	; 0x18ca <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    1448:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    144c:	80 ff       	sbrs	r24, 0
    144e:	19 c0       	rjmp	.+50     	; 0x1482 <__vector_10+0x78>
						return (USBCON & (1 << VBUSTE));
    1450:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1454:	80 ff       	sbrs	r24, 0
    1456:	15 c0       	rjmp	.+42     	; 0x1482 <__vector_10+0x78>
						USBINT &= ~(1 << VBUSTI);
    1458:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    145c:	8e 7f       	andi	r24, 0xFE	; 254
    145e:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1462:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1466:	80 ff       	sbrs	r24, 0
    1468:	90 c0       	rjmp	.+288    	; 0x158a <__vector_10+0x180>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    146a:	80 e1       	ldi	r24, 0x10	; 16
    146c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    146e:	82 e1       	ldi	r24, 0x12	; 18
    1470:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1472:	09 b4       	in	r0, 0x29	; 41
    1474:	00 fe       	sbrs	r0, 0
    1476:	fd cf       	rjmp	.-6      	; 0x1472 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <USB_DeviceState>
			EVENT_USB_Device_Connect();
    147e:	0e 94 de 00 	call	0x1bc	; 0x1bc <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    1482:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1486:	80 ff       	sbrs	r24, 0
    1488:	18 c0       	rjmp	.+48     	; 0x14ba <__vector_10+0xb0>
						return (UDIEN  & (1 << SUSPE));
    148a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    148e:	80 ff       	sbrs	r24, 0
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <__vector_10+0xb0>
						UDIEN  &= ~(1 << SUSPE);
    1492:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1496:	8e 7f       	andi	r24, 0xFE	; 254
    1498:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    149c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14a0:	80 61       	ori	r24, 0x10	; 16
    14a2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    14a6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    14aa:	80 62       	ori	r24, 0x20	; 32
    14ac:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    14b0:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    14b2:	85 e0       	ldi	r24, 0x05	; 5
    14b4:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    14b8:	08 d2       	rcall	.+1040   	; 0x18ca <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
    14ba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    14be:	84 ff       	sbrs	r24, 4
    14c0:	28 c0       	rjmp	.+80     	; 0x1512 <__vector_10+0x108>
						return (UDIEN  & (1 << WAKEUPE));
    14c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14c6:	84 ff       	sbrs	r24, 4
    14c8:	24 c0       	rjmp	.+72     	; 0x1512 <__vector_10+0x108>
				PLLCSR = USB_PLL_PSC;
    14ca:	80 e1       	ldi	r24, 0x10	; 16
    14cc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    14ce:	82 e1       	ldi	r24, 0x12	; 18
    14d0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    14d2:	09 b4       	in	r0, 0x29	; 41
    14d4:	00 fe       	sbrs	r0, 0
    14d6:	fd cf       	rjmp	.-6      	; 0x14d2 <__vector_10+0xc8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    14d8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    14dc:	8f 7d       	andi	r24, 0xDF	; 223
    14de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    14e2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    14e6:	8f 7e       	andi	r24, 0xEF	; 239
    14e8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    14ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14f0:	8f 7e       	andi	r24, 0xEF	; 239
    14f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    14f6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    14fa:	81 60       	ori	r24, 0x01	; 1
    14fc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1500:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <USB_Device_ConfigurationNumber>
    1504:	88 23       	and	r24, r24
    1506:	09 f4       	brne	.+2      	; 0x150a <__vector_10+0x100>
    1508:	46 c0       	rjmp	.+140    	; 0x1596 <__vector_10+0x18c>
		  USB_DeviceState = DEVICE_STATE_Configured;
    150a:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    150c:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1510:	dc d1       	rcall	.+952    	; 0x18ca <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
    1512:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1516:	83 ff       	sbrs	r24, 3
    1518:	27 c0       	rjmp	.+78     	; 0x1568 <__vector_10+0x15e>
						return (UDIEN  & (1 << EORSTE));
    151a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    151e:	83 ff       	sbrs	r24, 3
    1520:	23 c0       	rjmp	.+70     	; 0x1568 <__vector_10+0x15e>
						UDINT  &= ~(1 << EORSTI);
    1522:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1526:	87 7f       	andi	r24, 0xF7	; 247
    1528:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1532:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
    1536:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    153a:	8e 7f       	andi	r24, 0xFE	; 254
    153c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    1540:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1544:	8e 7f       	andi	r24, 0xFE	; 254
    1546:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    154a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    154e:	80 61       	ori	r24, 0x10	; 16
    1550:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1554:	42 e0       	ldi	r20, 0x02	; 2
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	77 de       	rcall	.-786    	; 0x124a <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    155c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1560:	88 60       	ori	r24, 0x08	; 8
    1562:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1566:	b1 d1       	rcall	.+866    	; 0x18ca <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1568:	ff 91       	pop	r31
    156a:	ef 91       	pop	r30
    156c:	bf 91       	pop	r27
    156e:	af 91       	pop	r26
    1570:	9f 91       	pop	r25
    1572:	8f 91       	pop	r24
    1574:	7f 91       	pop	r23
    1576:	6f 91       	pop	r22
    1578:	5f 91       	pop	r21
    157a:	4f 91       	pop	r20
    157c:	3f 91       	pop	r19
    157e:	2f 91       	pop	r18
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti
				PLLCSR = 0;
    158a:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    158c:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1590:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <EVENT_USB_Device_Disconnect>
    1594:	76 cf       	rjmp	.-276    	; 0x1482 <__vector_10+0x78>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1596:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    159a:	87 fd       	sbrc	r24, 7
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <__vector_10+0x198>
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	b5 cf       	rjmp	.-150    	; 0x150c <__vector_10+0x102>
    15a2:	83 e0       	ldi	r24, 0x03	; 3
    15a4:	b3 cf       	rjmp	.-154    	; 0x150c <__vector_10+0x102>

000015a6 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    15a6:	1f 92       	push	r1
    15a8:	0f 92       	push	r0
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	0f 92       	push	r0
    15ae:	11 24       	eor	r1, r1
    15b0:	2f 93       	push	r18
    15b2:	3f 93       	push	r19
    15b4:	4f 93       	push	r20
    15b6:	5f 93       	push	r21
    15b8:	6f 93       	push	r22
    15ba:	7f 93       	push	r23
    15bc:	8f 93       	push	r24
    15be:	9f 93       	push	r25
    15c0:	af 93       	push	r26
    15c2:	bf 93       	push	r27
    15c4:	cf 93       	push	r28
    15c6:	ef 93       	push	r30
    15c8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    15ca:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    15ce:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    15d0:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    15d4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    15d8:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    15dc:	87 7f       	andi	r24, 0xF7	; 247
    15de:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    15e2:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    15e4:	1b d0       	rcall	.+54     	; 0x161c <USB_Device_ProcessControlRequest>
    15e6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    15ea:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    15ee:	88 60       	ori	r24, 0x08	; 8
    15f0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    15f4:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    15f8:	ff 91       	pop	r31
    15fa:	ef 91       	pop	r30
    15fc:	cf 91       	pop	r28
    15fe:	bf 91       	pop	r27
    1600:	af 91       	pop	r26
    1602:	9f 91       	pop	r25
    1604:	8f 91       	pop	r24
    1606:	7f 91       	pop	r23
    1608:	6f 91       	pop	r22
    160a:	5f 91       	pop	r21
    160c:	4f 91       	pop	r20
    160e:	3f 91       	pop	r19
    1610:	2f 91       	pop	r18
    1612:	0f 90       	pop	r0
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	0f 90       	pop	r0
    1618:	1f 90       	pop	r1
    161a:	18 95       	reti

0000161c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	aa 97       	sbiw	r28, 0x2a	; 42
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	ee ed       	ldi	r30, 0xDE	; 222
    1634:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1636:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    163a:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    163c:	24 e0       	ldi	r18, 0x04	; 4
    163e:	e6 3e       	cpi	r30, 0xE6	; 230
    1640:	f2 07       	cpc	r31, r18
    1642:	c9 f7       	brne	.-14     	; 0x1636 <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1644:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1648:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    164c:	83 ff       	sbrs	r24, 3
    164e:	10 c0       	rjmp	.+32     	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1650:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1654:	90 91 df 04 	lds	r25, 0x04DF	; 0x8004df <USB_ControlRequest+0x1>
    1658:	95 30       	cpi	r25, 0x05	; 5
    165a:	09 f4       	brne	.+2      	; 0x165e <USB_Device_ProcessControlRequest+0x42>
    165c:	d2 c0       	rjmp	.+420    	; 0x1802 <USB_Device_ProcessControlRequest+0x1e6>
    165e:	00 f5       	brcc	.+64     	; 0x16a0 <USB_Device_ProcessControlRequest+0x84>
    1660:	91 30       	cpi	r25, 0x01	; 1
    1662:	09 f4       	brne	.+2      	; 0x1666 <USB_Device_ProcessControlRequest+0x4a>
    1664:	88 c0       	rjmp	.+272    	; 0x1776 <USB_Device_ProcessControlRequest+0x15a>
    1666:	08 f4       	brcc	.+2      	; 0x166a <USB_Device_ProcessControlRequest+0x4e>
    1668:	61 c0       	rjmp	.+194    	; 0x172c <USB_Device_ProcessControlRequest+0x110>
    166a:	93 30       	cpi	r25, 0x03	; 3
    166c:	09 f4       	brne	.+2      	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
    166e:	83 c0       	rjmp	.+262    	; 0x1776 <USB_Device_ProcessControlRequest+0x15a>
    1670:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1674:	83 ff       	sbrs	r24, 3
    1676:	0a c0       	rjmp	.+20     	; 0x168c <USB_Device_ProcessControlRequest+0x70>
				UEINTX &= ~(1 << RXSTPI);
    1678:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    167c:	87 7f       	andi	r24, 0xF7	; 247
    167e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    1682:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1686:	80 62       	ori	r24, 0x20	; 32
    1688:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    168c:	aa 96       	adiw	r28, 0x2a	; 42
    168e:	0f b6       	in	r0, 0x3f	; 63
    1690:	f8 94       	cli
    1692:	de bf       	out	0x3e, r29	; 62
    1694:	0f be       	out	0x3f, r0	; 63
    1696:	cd bf       	out	0x3d, r28	; 61
    1698:	df 91       	pop	r29
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
    16a0:	98 30       	cpi	r25, 0x08	; 8
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <USB_Device_ProcessControlRequest+0x8a>
    16a4:	e6 c0       	rjmp	.+460    	; 0x1872 <USB_Device_ProcessControlRequest+0x256>
    16a6:	99 30       	cpi	r25, 0x09	; 9
    16a8:	09 f4       	brne	.+2      	; 0x16ac <USB_Device_ProcessControlRequest+0x90>
    16aa:	f0 c0       	rjmp	.+480    	; 0x188c <USB_Device_ProcessControlRequest+0x270>
    16ac:	96 30       	cpi	r25, 0x06	; 6
    16ae:	01 f7       	brne	.-64     	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    16b0:	80 58       	subi	r24, 0x80	; 128
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	e8 f6       	brcc	.-70     	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    16b6:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <USB_ControlRequest+0x2>
    16ba:	90 91 e1 04 	lds	r25, 0x04E1	; 0x8004e1 <USB_ControlRequest+0x3>
    16be:	8c 3d       	cpi	r24, 0xDC	; 220
    16c0:	23 e0       	ldi	r18, 0x03	; 3
    16c2:	92 07       	cpc	r25, r18
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <USB_Device_ProcessControlRequest+0xac>
    16c6:	c1 c0       	rjmp	.+386    	; 0x184a <USB_Device_ProcessControlRequest+0x22e>
	SignatureDescriptor.Header.Type = DTYPE_String;
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    16cc:	8a e2       	ldi	r24, 0x2A	; 42
    16ce:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    16d0:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    16d2:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    16d4:	de 01       	movw	r26, r28
    16d6:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    16d8:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    16da:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    16dc:	51 e2       	ldi	r21, 0x21	; 33
    16de:	e3 2f       	mov	r30, r19
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    16e6:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    16e8:	20 ff       	sbrs	r18, 0
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <USB_Device_ProcessControlRequest+0xd6>
					{
						SerialByte >>= 4;
    16ec:	e2 95       	swap	r30
    16ee:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    16f0:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    16f2:	ef 70       	andi	r30, 0x0F	; 15
    16f4:	8e 2f       	mov	r24, r30
    16f6:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    16f8:	ea 30       	cpi	r30, 0x0A	; 10
    16fa:	08 f4       	brcc	.+2      	; 0x16fe <USB_Device_ProcessControlRequest+0xe2>
    16fc:	a4 c0       	rjmp	.+328    	; 0x1846 <USB_Device_ProcessControlRequest+0x22a>
    16fe:	c7 96       	adiw	r24, 0x37	; 55
    1700:	8d 93       	st	X+, r24
    1702:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1704:	2f 5f       	subi	r18, 0xFF	; 255
    1706:	24 31       	cpi	r18, 0x14	; 20
    1708:	51 f7       	brne	.-44     	; 0x16de <USB_Device_ProcessControlRequest+0xc2>
				SREG = GlobalIntState;
    170a:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    170c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1710:	87 7f       	andi	r24, 0xF7	; 247
    1712:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1716:	6a e2       	ldi	r22, 0x2A	; 42
    1718:	70 e0       	ldi	r23, 0x00	; 0
    171a:	ce 01       	movw	r24, r28
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	da dc       	rcall	.-1612   	; 0x10d4 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1720:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1724:	8b 77       	andi	r24, 0x7B	; 123
    1726:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    172a:	a2 cf       	rjmp	.-188    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    172c:	80 38       	cpi	r24, 0x80	; 128
    172e:	81 f0       	breq	.+32     	; 0x1750 <USB_Device_ProcessControlRequest+0x134>
    1730:	82 38       	cpi	r24, 0x82	; 130
    1732:	09 f0       	breq	.+2      	; 0x1736 <USB_Device_ProcessControlRequest+0x11a>
    1734:	9d cf       	rjmp	.-198    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1736:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <USB_ControlRequest+0x4>
    173a:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    173c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1740:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1744:	85 fb       	bst	r24, 5
    1746:	88 27       	eor	r24, r24
    1748:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    174a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    174e:	06 c0       	rjmp	.+12     	; 0x175c <USB_Device_ProcessControlRequest+0x140>
	uint8_t CurrentStatus = 0;
    1750:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    1754:	90 91 db 04 	lds	r25, 0x04DB	; 0x8004db <USB_Device_RemoteWakeupEnabled>
    1758:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    175a:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    175c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1760:	97 7f       	andi	r25, 0xF7	; 247
    1762:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1766:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    176a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    176e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1772:	8e 77       	andi	r24, 0x7E	; 126
    1774:	2f c0       	rjmp	.+94     	; 0x17d4 <USB_Device_ProcessControlRequest+0x1b8>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1776:	28 2f       	mov	r18, r24
    1778:	2d 7f       	andi	r18, 0xFD	; 253
    177a:	09 f0       	breq	.+2      	; 0x177e <USB_Device_ProcessControlRequest+0x162>
    177c:	79 cf       	rjmp	.-270    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    177e:	88 23       	and	r24, r24
    1780:	d1 f0       	breq	.+52     	; 0x17b6 <USB_Device_ProcessControlRequest+0x19a>
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	09 f0       	breq	.+2      	; 0x1788 <USB_Device_ProcessControlRequest+0x16c>
    1786:	74 cf       	rjmp	.-280    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1788:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <USB_ControlRequest+0x2>
    178c:	81 11       	cpse	r24, r1
    178e:	1d c0       	rjmp	.+58     	; 0x17ca <USB_Device_ProcessControlRequest+0x1ae>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1790:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <USB_ControlRequest+0x4>
    1794:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1796:	09 f4       	brne	.+2      	; 0x179a <USB_Device_ProcessControlRequest+0x17e>
    1798:	6b cf       	rjmp	.-298    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    179a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    179e:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    17a2:	20 ff       	sbrs	r18, 0
    17a4:	12 c0       	rjmp	.+36     	; 0x17ca <USB_Device_ProcessControlRequest+0x1ae>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    17a6:	93 30       	cpi	r25, 0x03	; 3
    17a8:	c9 f4       	brne	.+50     	; 0x17dc <USB_Device_ProcessControlRequest+0x1c0>
				UECONX |= (1 << STALLRQ);
    17aa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    17ae:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    17b0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    17b4:	0a c0       	rjmp	.+20     	; 0x17ca <USB_Device_ProcessControlRequest+0x1ae>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    17b6:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <USB_ControlRequest+0x2>
    17ba:	81 30       	cpi	r24, 0x01	; 1
    17bc:	09 f0       	breq	.+2      	; 0x17c0 <USB_Device_ProcessControlRequest+0x1a4>
    17be:	58 cf       	rjmp	.-336    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    17c0:	93 30       	cpi	r25, 0x03	; 3
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <USB_Device_ProcessControlRequest+0x1aa>
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17ca:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    17ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    17d2:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    17d4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    17d8:	6d dd       	rcall	.-1318   	; 0x12b4 <Endpoint_ClearStatusStage>
    17da:	4a cf       	rjmp	.-364    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
				UECONX |= (1 << STALLRQC);
    17dc:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    17e0:	90 61       	ori	r25, 0x10	; 16
    17e2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    17e6:	21 e0       	ldi	r18, 0x01	; 1
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	01 c0       	rjmp	.+2      	; 0x17ee <USB_Device_ProcessControlRequest+0x1d2>
    17ec:	22 0f       	add	r18, r18
    17ee:	8a 95       	dec	r24
    17f0:	ea f7       	brpl	.-6      	; 0x17ec <USB_Device_ProcessControlRequest+0x1d0>
    17f2:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    17f6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    17fa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    17fe:	88 60       	ori	r24, 0x08	; 8
    1800:	d7 cf       	rjmp	.-82     	; 0x17b0 <USB_Device_ProcessControlRequest+0x194>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1802:	81 11       	cpse	r24, r1
    1804:	35 cf       	rjmp	.-406    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1806:	10 91 e0 04 	lds	r17, 0x04E0	; 0x8004e0 <USB_ControlRequest+0x2>
    180a:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    180c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1810:	80 78       	andi	r24, 0x80	; 128
    1812:	81 2b       	or	r24, r17
    1814:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    1818:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    181c:	87 7f       	andi	r24, 0xF7	; 247
    181e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1822:	48 dd       	rcall	.-1392   	; 0x12b4 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1824:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    1828:	80 ff       	sbrs	r24, 0
    182a:	fc cf       	rjmp	.-8      	; 0x1824 <USB_Device_ProcessControlRequest+0x208>
				UDADDR |= (1 << ADDEN);
    182c:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1830:	80 68       	ori	r24, 0x80	; 128
    1832:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1836:	11 11       	cpse	r17, r1
    1838:	04 c0       	rjmp	.+8      	; 0x1842 <USB_Device_ProcessControlRequest+0x226>
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <USB_DeviceState>
    1840:	17 cf       	rjmp	.-466    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	fb cf       	rjmp	.-10     	; 0x183c <USB_Device_ProcessControlRequest+0x220>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1846:	c0 96       	adiw	r24, 0x30	; 48
    1848:	5b cf       	rjmp	.-330    	; 0x1700 <USB_Device_ProcessControlRequest+0xe4>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    184a:	ae 01       	movw	r20, r28
    184c:	4f 5f       	subi	r20, 0xFF	; 255
    184e:	5f 4f       	sbci	r21, 0xFF	; 255
    1850:	60 91 e2 04 	lds	r22, 0x04E2	; 0x8004e2 <USB_ControlRequest+0x4>
    1854:	0e 94 5e 02 	call	0x4bc	; 0x4bc <CALLBACK_USB_GetDescriptor>
    1858:	bc 01       	movw	r22, r24
    185a:	89 2b       	or	r24, r25
    185c:	09 f4       	brne	.+2      	; 0x1860 <USB_Device_ProcessControlRequest+0x244>
    185e:	08 cf       	rjmp	.-496    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    1860:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1864:	97 7f       	andi	r25, 0xF7	; 247
    1866:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	9a 81       	ldd	r25, Y+2	; 0x02
    186e:	8f dc       	rcall	.-1762   	; 0x118e <Endpoint_Write_Control_PStream_LE>
    1870:	57 cf       	rjmp	.-338    	; 0x1720 <USB_Device_ProcessControlRequest+0x104>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    1872:	80 38       	cpi	r24, 0x80	; 128
    1874:	09 f0       	breq	.+2      	; 0x1878 <USB_Device_ProcessControlRequest+0x25c>
    1876:	fc ce       	rjmp	.-520    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
    1878:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    187c:	87 7f       	andi	r24, 0xF7	; 247
    187e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1882:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
    1886:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    188a:	71 cf       	rjmp	.-286    	; 0x176e <USB_Device_ProcessControlRequest+0x152>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    188c:	81 11       	cpse	r24, r1
    188e:	f0 ce       	rjmp	.-544    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1890:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <USB_ControlRequest+0x2>
    1894:	92 30       	cpi	r25, 0x02	; 2
    1896:	08 f0       	brcs	.+2      	; 0x189a <USB_Device_ProcessControlRequest+0x27e>
    1898:	eb ce       	rjmp	.-554    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    189a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    189e:	87 7f       	andi	r24, 0xF7	; 247
    18a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    18a4:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
    18a8:	05 dd       	rcall	.-1526   	; 0x12b4 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    18aa:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <USB_Device_ConfigurationNumber>
    18ae:	88 23       	and	r24, r24
    18b0:	11 f0       	breq	.+4      	; 0x18b6 <USB_Device_ProcessControlRequest+0x29a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    18b2:	84 e0       	ldi	r24, 0x04	; 4
    18b4:	05 c0       	rjmp	.+10     	; 0x18c0 <USB_Device_ProcessControlRequest+0x2a4>
				return (UDADDR & (1 << ADDEN));
    18b6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    18ba:	87 fd       	sbrc	r24, 7
    18bc:	fa cf       	rjmp	.-12     	; 0x18b2 <USB_Device_ProcessControlRequest+0x296>
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    18c4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <EVENT_USB_Device_ConfigurationChanged>
    18c8:	d3 ce       	rjmp	.-602    	; 0x1670 <USB_Device_ProcessControlRequest+0x54>

000018ca <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    18ca:	08 95       	ret

000018cc <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    18cc:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    18ce:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <USB_DeviceState>
    18d2:	88 23       	and	r24, r24
    18d4:	91 f0       	breq	.+36     	; 0x18fa <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    18d6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    18da:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    18dc:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    18e0:	80 fd       	sbrc	r24, 0
    18e2:	0d c0       	rjmp	.+26     	; 0x18fe <USB_USBTask+0x32>
    18e4:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    18e6:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18e8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    18f0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    18f2:	94 de       	rcall	.-728    	; 0x161c <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18f4:	cf 70       	andi	r28, 0x0F	; 15
    18f6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    18fe:	80 e8       	ldi	r24, 0x80	; 128
    1900:	f2 cf       	rjmp	.-28     	; 0x18e6 <USB_USBTask+0x1a>

00001902 <__ashrdi3>:
    1902:	97 fb       	bst	r25, 7
    1904:	10 f8       	bld	r1, 0

00001906 <__lshrdi3>:
    1906:	16 94       	lsr	r1
    1908:	00 08       	sbc	r0, r0
    190a:	0f 93       	push	r16
    190c:	08 30       	cpi	r16, 0x08	; 8
    190e:	98 f0       	brcs	.+38     	; 0x1936 <__lshrdi3+0x30>
    1910:	08 50       	subi	r16, 0x08	; 8
    1912:	23 2f       	mov	r18, r19
    1914:	34 2f       	mov	r19, r20
    1916:	45 2f       	mov	r20, r21
    1918:	56 2f       	mov	r21, r22
    191a:	67 2f       	mov	r22, r23
    191c:	78 2f       	mov	r23, r24
    191e:	89 2f       	mov	r24, r25
    1920:	90 2d       	mov	r25, r0
    1922:	f4 cf       	rjmp	.-24     	; 0x190c <__lshrdi3+0x6>
    1924:	05 94       	asr	r0
    1926:	97 95       	ror	r25
    1928:	87 95       	ror	r24
    192a:	77 95       	ror	r23
    192c:	67 95       	ror	r22
    192e:	57 95       	ror	r21
    1930:	47 95       	ror	r20
    1932:	37 95       	ror	r19
    1934:	27 95       	ror	r18
    1936:	0a 95       	dec	r16
    1938:	aa f7       	brpl	.-22     	; 0x1924 <__lshrdi3+0x1e>
    193a:	0f 91       	pop	r16
    193c:	08 95       	ret

0000193e <__adddi3>:
    193e:	2a 0d       	add	r18, r10
    1940:	3b 1d       	adc	r19, r11
    1942:	4c 1d       	adc	r20, r12
    1944:	5d 1d       	adc	r21, r13
    1946:	6e 1d       	adc	r22, r14
    1948:	7f 1d       	adc	r23, r15
    194a:	80 1f       	adc	r24, r16
    194c:	91 1f       	adc	r25, r17
    194e:	08 95       	ret

00001950 <__subdi3>:
    1950:	2a 19       	sub	r18, r10
    1952:	3b 09       	sbc	r19, r11
    1954:	4c 09       	sbc	r20, r12
    1956:	5d 09       	sbc	r21, r13
    1958:	6e 09       	sbc	r22, r14
    195a:	7f 09       	sbc	r23, r15
    195c:	80 0b       	sbc	r24, r16
    195e:	91 0b       	sbc	r25, r17
    1960:	08 95       	ret

00001962 <__cmpdi2>:
    1962:	2a 15       	cp	r18, r10
    1964:	3b 05       	cpc	r19, r11
    1966:	4c 05       	cpc	r20, r12
    1968:	5d 05       	cpc	r21, r13
    196a:	6e 05       	cpc	r22, r14
    196c:	7f 05       	cpc	r23, r15
    196e:	80 07       	cpc	r24, r16
    1970:	91 07       	cpc	r25, r17
    1972:	08 95       	ret

00001974 <memcpy>:
    1974:	fb 01       	movw	r30, r22
    1976:	dc 01       	movw	r26, r24
    1978:	02 c0       	rjmp	.+4      	; 0x197e <memcpy+0xa>
    197a:	01 90       	ld	r0, Z+
    197c:	0d 92       	st	X+, r0
    197e:	41 50       	subi	r20, 0x01	; 1
    1980:	50 40       	sbci	r21, 0x00	; 0
    1982:	d8 f7       	brcc	.-10     	; 0x197a <memcpy+0x6>
    1984:	08 95       	ret

00001986 <_exit>:
    1986:	f8 94       	cli

00001988 <__stop_program>:
    1988:	ff cf       	rjmp	.-2      	; 0x1988 <__stop_program>
