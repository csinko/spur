
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00001934  000019c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001934  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800170  00800170  00001a38  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008df7  00000000  00000000  00001d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000025de  00000000  00000000  0000ab8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000461e  00000000  00000000  0000d169  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009c8  00000000  00000000  00011788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000285f  00000000  00000000  00012150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004860  00000000  00000000  000149af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000718  00000000  00000000  0001920f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	8b c0       	rjmp	.+278    	; 0x118 <__ctors_end>
       2:	00 00       	nop
       4:	a7 c0       	rjmp	.+334    	; 0x154 <__bad_interrupt>
       6:	00 00       	nop
       8:	a5 c0       	rjmp	.+330    	; 0x154 <__bad_interrupt>
       a:	00 00       	nop
       c:	a3 c0       	rjmp	.+326    	; 0x154 <__bad_interrupt>
       e:	00 00       	nop
      10:	a1 c0       	rjmp	.+322    	; 0x154 <__bad_interrupt>
      12:	00 00       	nop
      14:	9f c0       	rjmp	.+318    	; 0x154 <__bad_interrupt>
      16:	00 00       	nop
      18:	9d c0       	rjmp	.+314    	; 0x154 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	9b c0       	rjmp	.+310    	; 0x154 <__bad_interrupt>
      1e:	00 00       	nop
      20:	99 c0       	rjmp	.+306    	; 0x154 <__bad_interrupt>
      22:	00 00       	nop
      24:	97 c0       	rjmp	.+302    	; 0x154 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_10>
      2c:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__vector_11>
      30:	91 c0       	rjmp	.+290    	; 0x154 <__bad_interrupt>
      32:	00 00       	nop
      34:	8f c0       	rjmp	.+286    	; 0x154 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	8b c0       	rjmp	.+278    	; 0x154 <__bad_interrupt>
      3e:	00 00       	nop
      40:	89 c0       	rjmp	.+274    	; 0x154 <__bad_interrupt>
      42:	00 00       	nop
      44:	87 c0       	rjmp	.+270    	; 0x154 <__bad_interrupt>
      46:	00 00       	nop
      48:	85 c0       	rjmp	.+266    	; 0x154 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	83 c0       	rjmp	.+262    	; 0x154 <__bad_interrupt>
      4e:	00 00       	nop
      50:	81 c0       	rjmp	.+258    	; 0x154 <__bad_interrupt>
      52:	00 00       	nop
      54:	7f c0       	rjmp	.+254    	; 0x154 <__bad_interrupt>
      56:	00 00       	nop
      58:	7d c0       	rjmp	.+250    	; 0x154 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	7b c0       	rjmp	.+246    	; 0x154 <__bad_interrupt>
      5e:	00 00       	nop
      60:	79 c0       	rjmp	.+242    	; 0x154 <__bad_interrupt>
      62:	00 00       	nop
      64:	77 c0       	rjmp	.+238    	; 0x154 <__bad_interrupt>
      66:	00 00       	nop
      68:	75 c0       	rjmp	.+234    	; 0x154 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	73 c0       	rjmp	.+230    	; 0x154 <__bad_interrupt>
      6e:	00 00       	nop
      70:	71 c0       	rjmp	.+226    	; 0x154 <__bad_interrupt>
      72:	00 00       	nop
      74:	6f c0       	rjmp	.+222    	; 0x154 <__bad_interrupt>
      76:	00 00       	nop
      78:	6d c0       	rjmp	.+218    	; 0x154 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	6b c0       	rjmp	.+214    	; 0x154 <__bad_interrupt>
      7e:	00 00       	nop
      80:	69 c0       	rjmp	.+210    	; 0x154 <__bad_interrupt>
      82:	00 00       	nop
      84:	67 c0       	rjmp	.+206    	; 0x154 <__bad_interrupt>
      86:	00 00       	nop
      88:	65 c0       	rjmp	.+202    	; 0x154 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	63 c0       	rjmp	.+198    	; 0x154 <__bad_interrupt>
      8e:	00 00       	nop
      90:	61 c0       	rjmp	.+194    	; 0x154 <__bad_interrupt>
      92:	00 00       	nop
      94:	5f c0       	rjmp	.+190    	; 0x154 <__bad_interrupt>
      96:	00 00       	nop

00000098 <ProductString>:
      98:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
      a8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      b8:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

000000c8 <ManufacturerString>:
      c8:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      d8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e2 <LanguageString>:
      e2:	04 03 09 04                                         ....

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
      f6:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..

00000106 <DeviceDescriptor>:
     106:	12 01 10 01 00 00 00 08 eb 03 45 20 01 00 01 02     ..........E ....
     116:	dc 01                                               ..

00000118 <__ctors_end>:
     118:	11 24       	eor	r1, r1
     11a:	1f be       	out	0x3f, r1	; 63
     11c:	cf ef       	ldi	r28, 0xFF	; 255
     11e:	d0 e2       	ldi	r29, 0x20	; 32
     120:	de bf       	out	0x3e, r29	; 62
     122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	e4 e3       	ldi	r30, 0x34	; 52
     12c:	f9 e1       	ldi	r31, 0x19	; 25
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	0b bf       	out	0x3b, r16	; 59
     132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
     134:	07 90       	elpm	r0, Z+
     136:	0d 92       	st	X+, r0
     138:	a0 37       	cpi	r26, 0x70	; 112
     13a:	b1 07       	cpc	r27, r17
     13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
     13e:	21 e0       	ldi	r18, 0x01	; 1
     140:	a0 e7       	ldi	r26, 0x70	; 112
     142:	b1 e0       	ldi	r27, 0x01	; 1
     144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
     146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
     148:	ad 37       	cpi	r26, 0x7D	; 125
     14a:	b2 07       	cpc	r27, r18
     14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
     14e:	40 d0       	rcall	.+128    	; 0x1d0 <main>
     150:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <_exit>

00000154 <__bad_interrupt>:
     154:	55 cf       	rjmp	.-342    	; 0x0 <__vectors>

00000156 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     156:	9b b1       	in	r25, 0x0b	; 11
     158:	9f 70       	andi	r25, 0x0F	; 15
     15a:	89 2b       	or	r24, r25
     15c:	8b b9       	out	0x0b, r24	; 11
     15e:	08 95       	ret

00000160 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     160:	84 b7       	in	r24, 0x34	; 52
     162:	87 7f       	andi	r24, 0xF7	; 247
     164:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	a8 95       	wdr
     16c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     170:	88 61       	ori	r24, 0x18	; 24
     172:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     176:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     17a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	80 e8       	ldi	r24, 0x80	; 128
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	f8 94       	cli
     184:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     188:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     18c:	0f be       	out	0x3f, r0	; 63
				DDRD  |=  LEDS_ALL_LEDS;
     18e:	8a b1       	in	r24, 0x0a	; 10
     190:	80 6f       	ori	r24, 0xF0	; 240
     192:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     194:	8b b1       	in	r24, 0x0b	; 11
     196:	8f 70       	andi	r24, 0x0F	; 15
     198:	8b b9       	out	0x0b, r24	; 11
			/** Initializes the dataflash driver so that commands and data may be sent to an attached dataflash IC.
			 *  The appropriate SPI interface will be automatically configured.
			 */
			static inline void Dataflash_Init(void)
			{
				DATAFLASH_CHIPCS_DDR  |= DATAFLASH_CHIPCS_MASK;
     19a:	8d b1       	in	r24, 0x0d	; 13
     19c:	83 60       	ori	r24, 0x03	; 3
     19e:	8d b9       	out	0x0d, r24	; 13
				DATAFLASH_CHIPCS_PORT |= DATAFLASH_CHIPCS_MASK;
     1a0:	8e b1       	in	r24, 0x0e	; 14
     1a2:	83 60       	ori	r24, 0x03	; 3
     1a4:	8e b9       	out	0x0e, r24	; 14
			 */
			static inline void SPI_Init(const uint8_t SPIOptions);
			static inline void SPI_Init(const uint8_t SPIOptions)
			{
				/* Prevent high rise times on PB.0 (/SS) from forcing a change to SPI slave mode */
				DDRB  |= (1 << 0);
     1a6:	20 9a       	sbi	0x04, 0	; 4
				PORTB |= (1 << 0);
     1a8:	28 9a       	sbi	0x05, 0	; 5

				DDRB  |=  ((1 << 1) | (1 << 2));
     1aa:	84 b1       	in	r24, 0x04	; 4
     1ac:	86 60       	ori	r24, 0x06	; 6
     1ae:	84 b9       	out	0x04, r24	; 4
				DDRB  &= ~(1 << 3);
     1b0:	23 98       	cbi	0x04, 3	; 4
				PORTB |=  (1 << 3);
     1b2:	2b 9a       	sbi	0x05, 3	; 5

				if (SPIOptions & SPI_USE_DOUBLESPEED)
				  SPSR |= (1 << SPI2X);
     1b4:	8d b5       	in	r24, 0x2d	; 45
     1b6:	81 60       	ori	r24, 0x01	; 1
     1b8:	8d bd       	out	0x2d, r24	; 45
				else
				  SPSR &= ~(1 << SPI2X);

				/* Switch /SS to input mode after configuration to allow for forced mode changes */
				DDRB &= ~(1 << 0);
     1ba:	20 98       	cbi	0x04, 0	; 4

				SPCR  = ((1 << SPE) | SPIOptions);
     1bc:	8c e5       	ldi	r24, 0x5C	; 92
     1be:	8c bd       	out	0x2c, r24	; 44
#endif

	/* Hardware Initialization */
	LEDs_Init();
	Dataflash_Init();
	USB_Init();
     1c0:	a4 d7       	rcall	.+3912   	; 0x110a <USB_Init>

	/* Check if the Dataflash is working, abort if not */
	if (!(DataflashManager_CheckDataflashOperation()))
     1c2:	33 d3       	rcall	.+1638   	; 0x82a <DataflashManager_CheckDataflashOperation>
     1c4:	81 11       	cpse	r24, r1
     1c6:	03 c0       	rjmp	.+6      	; 0x1ce <SetupHardware+0x6e>
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
     1c8:	80 e9       	ldi	r24, 0x90	; 144
     1ca:	c5 df       	rcall	.-118    	; 0x156 <LEDs_SetAllLEDs>
     1cc:	ff cf       	rjmp	.-2      	; 0x1cc <SetupHardware+0x6c>
		for(;;);
	}

	/* Clear Dataflash sector protections, if enabled */
	DataflashManager_ResetDataflashProtections();
     1ce:	dd c2       	rjmp	.+1466   	; 0x78a <DataflashManager_ResetDataflashProtections>

000001d0 <main>:
	SetupHardware();
     1d0:	c7 df       	rcall	.-114    	; 0x160 <SetupHardware>
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1d2:	80 e1       	ldi	r24, 0x10	; 16
     1d4:	c0 df       	rcall	.-128    	; 0x156 <LEDs_SetAllLEDs>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1d6:	78 94       	sei
		MS_Device_USBTask(&Disk_MS_Interface);
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <MS_Device_USBTask>
		USB_USBTask();
     1e0:	0e 94 08 0b 	call	0x1610	; 0x1610 <USB_USBTask>
     1e4:	f9 cf       	rjmp	.-14     	; 0x1d8 <main+0x8>

000001e6 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
     1e6:	80 ea       	ldi	r24, 0xA0	; 160
     1e8:	b6 cf       	rjmp	.-148    	; 0x156 <LEDs_SetAllLEDs>

000001ea <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
     1ea:	80 e1       	ldi	r24, 0x10	; 16
     1ec:	b4 cf       	rjmp	.-152    	; 0x156 <LEDs_SetAllLEDs>

000001ee <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <MS_Device_ConfigureEndpoints>

	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     1f6:	81 11       	cpse	r24, r1
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <EVENT_USB_Device_ConfigurationChanged+0x10>
     1fa:	80 e9       	ldi	r24, 0x90	; 144
     1fc:	ac cf       	rjmp	.-168    	; 0x156 <LEDs_SetAllLEDs>
     1fe:	80 e6       	ldi	r24, 0x60	; 96
     200:	fd cf       	rjmp	.-6      	; 0x1fc <EVENT_USB_Device_ConfigurationChanged+0xe>

00000202 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	0c 94 23 0b 	jmp	0x1646	; 0x1646 <MS_Device_ProcessControlRequest>

0000020a <CALLBACK_MS_Device_SCSICommandReceived>:
/** Mass Storage class driver callback function the reception of SCSI commands from the host, which must be processed.
 *
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface configuration structure being referenced
 */
bool CALLBACK_MS_Device_SCSICommandReceived(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	ec 01       	movw	r28, r24
	bool CommandSuccess;

	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
     210:	80 e2       	ldi	r24, 0x20	; 32
     212:	a1 df       	rcall	.-190    	; 0x156 <LEDs_SetAllLEDs>
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     214:	ce 01       	movw	r24, r28
     216:	75 d3       	rcall	.+1770   	; 0x902 <SCSI_DecodeSCSICommand>
     218:	c8 2f       	mov	r28, r24
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
     21a:	80 e6       	ldi	r24, 0x60	; 96
     21c:	9c df       	rcall	.-200    	; 0x156 <LEDs_SetAllLEDs>

	return CommandSuccess;
}
     21e:	8c 2f       	mov	r24, r28
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	08 95       	ret

00000226 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     226:	29 2f       	mov	r18, r25
     228:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     22a:	22 30       	cpi	r18, 0x02	; 2
     22c:	31 05       	cpc	r19, r1
     22e:	71 f0       	breq	.+28     	; 0x24c <CALLBACK_USB_GetDescriptor+0x26>
     230:	23 30       	cpi	r18, 0x03	; 3
     232:	31 05       	cpc	r19, r1
     234:	81 f0       	breq	.+32     	; 0x256 <CALLBACK_USB_GetDescriptor+0x30>
     236:	21 30       	cpi	r18, 0x01	; 1
     238:	31 05       	cpc	r19, r1
     23a:	a1 f4       	brne	.+40     	; 0x264 <CALLBACK_USB_GetDescriptor+0x3e>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     23c:	82 e1       	ldi	r24, 0x12	; 18
     23e:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     240:	26 e0       	ldi	r18, 0x06	; 6
     242:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
     244:	fa 01       	movw	r30, r20
     246:	31 83       	std	Z+1, r19	; 0x01
     248:	20 83       	st	Z, r18
	return Size;
}
     24a:	08 95       	ret
			Size    = sizeof(USB_Descriptor_Configuration_t);
     24c:	80 e2       	ldi	r24, 0x20	; 32
     24e:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     250:	26 ee       	ldi	r18, 0xE6	; 230
     252:	30 e0       	ldi	r19, 0x00	; 0
			break;
     254:	f7 cf       	rjmp	.-18     	; 0x244 <CALLBACK_USB_GetDescriptor+0x1e>
			switch (DescriptorNumber)
     256:	99 27       	eor	r25, r25
     258:	81 30       	cpi	r24, 0x01	; 1
     25a:	91 05       	cpc	r25, r1
     25c:	71 f0       	breq	.+28     	; 0x27a <CALLBACK_USB_GetDescriptor+0x54>
     25e:	38 f0       	brcs	.+14     	; 0x26e <CALLBACK_USB_GetDescriptor+0x48>
     260:	02 97       	sbiw	r24, 0x02	; 2
     262:	71 f0       	breq	.+28     	; 0x280 <CALLBACK_USB_GetDescriptor+0x5a>
	uint16_t    Size    = NO_DESCRIPTOR;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
	const void* Address = NULL;
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	eb cf       	rjmp	.-42     	; 0x244 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     26e:	e2 ee       	ldi	r30, 0xE2	; 226
     270:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     272:	84 91       	lpm	r24, Z
     274:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     276:	9f 01       	movw	r18, r30
					break;
     278:	e5 cf       	rjmp	.-54     	; 0x244 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     27a:	e8 ec       	ldi	r30, 0xC8	; 200
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	f9 cf       	rjmp	.-14     	; 0x272 <CALLBACK_USB_GetDescriptor+0x4c>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     280:	e8 e9       	ldi	r30, 0x98	; 152
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	f6 cf       	rjmp	.-20     	; 0x272 <CALLBACK_USB_GetDescriptor+0x4c>

00000286 <Dataflash_ToggleSelectedChipCS>:
		TotalBlocks--;
	}

	/* Deselect all Dataflash chips */
	Dataflash_DeselectChip();
}
     286:	8e b1       	in	r24, 0x0e	; 14
     288:	9e b1       	in	r25, 0x0e	; 14
     28a:	93 60       	ori	r25, 0x03	; 3
     28c:	9e b9       	out	0x0e, r25	; 14
     28e:	9e b1       	in	r25, 0x0e	; 14
     290:	8c 6f       	ori	r24, 0xFC	; 252
     292:	93 60       	ori	r25, 0x03	; 3
     294:	89 23       	and	r24, r25
     296:	8e b9       	out	0x0e, r24	; 14
     298:	08 95       	ret

0000029a <Dataflash_WaitWhileBusy>:
     29a:	f5 df       	rcall	.-22     	; 0x286 <Dataflash_ToggleSelectedChipCS>
     29c:	87 ed       	ldi	r24, 0xD7	; 215
     29e:	8e bd       	out	0x2e, r24	; 46
     2a0:	0d b4       	in	r0, 0x2d	; 45
     2a2:	07 fe       	sbrs	r0, 7
     2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <Dataflash_WaitWhileBusy+0x6>
     2a6:	1e bc       	out	0x2e, r1	; 46
     2a8:	0d b4       	in	r0, 0x2d	; 45
     2aa:	07 fe       	sbrs	r0, 7
     2ac:	fd cf       	rjmp	.-6      	; 0x2a8 <Dataflash_WaitWhileBusy+0xe>
     2ae:	0e b4       	in	r0, 0x2e	; 46
     2b0:	07 fe       	sbrs	r0, 7
     2b2:	f9 cf       	rjmp	.-14     	; 0x2a6 <Dataflash_WaitWhileBusy+0xc>
     2b4:	e8 cf       	rjmp	.-48     	; 0x286 <Dataflash_ToggleSelectedChipCS>

000002b6 <Dataflash_SendAddressBytes>:
     2b6:	9c 01       	movw	r18, r24
     2b8:	36 95       	lsr	r19
     2ba:	27 95       	ror	r18
     2bc:	56 e0       	ldi	r21, 0x06	; 6
     2be:	96 95       	lsr	r25
     2c0:	87 95       	ror	r24
     2c2:	5a 95       	dec	r21
     2c4:	e1 f7       	brne	.-8      	; 0x2be <Dataflash_SendAddressBytes+0x8>
     2c6:	8e bd       	out	0x2e, r24	; 46
     2c8:	0d b4       	in	r0, 0x2d	; 45
     2ca:	07 fe       	sbrs	r0, 7
     2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <Dataflash_SendAddressBytes+0x12>
     2ce:	22 0f       	add	r18, r18
     2d0:	22 0f       	add	r18, r18
     2d2:	22 0f       	add	r18, r18
     2d4:	72 2b       	or	r23, r18
     2d6:	7e bd       	out	0x2e, r23	; 46
     2d8:	0d b4       	in	r0, 0x2d	; 45
     2da:	07 fe       	sbrs	r0, 7
     2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <Dataflash_SendAddressBytes+0x22>
     2de:	6e bd       	out	0x2e, r22	; 46
     2e0:	0d b4       	in	r0, 0x2d	; 45
     2e2:	07 fe       	sbrs	r0, 7
     2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <Dataflash_SendAddressBytes+0x2a>
     2e6:	08 95       	ret

000002e8 <Dataflash_SelectChipFromPage>:
     2e8:	9c 01       	movw	r18, r24
     2ea:	9e b1       	in	r25, 0x0e	; 14
     2ec:	93 60       	ori	r25, 0x03	; 3
     2ee:	9e b9       	out	0x0e, r25	; 14
     2f0:	21 15       	cp	r18, r1
     2f2:	80 e4       	ldi	r24, 0x40	; 64
     2f4:	38 07       	cpc	r19, r24
     2f6:	30 f4       	brcc	.+12     	; 0x304 <Dataflash_SelectChipFromPage+0x1c>
     2f8:	8e b1       	in	r24, 0x0e	; 14
     2fa:	83 60       	ori	r24, 0x03	; 3
     2fc:	20 ff       	sbrs	r18, 0
     2fe:	03 c0       	rjmp	.+6      	; 0x306 <Dataflash_SelectChipFromPage+0x1e>
     300:	8d 7f       	andi	r24, 0xFD	; 253
     302:	8e b9       	out	0x0e, r24	; 14
     304:	08 95       	ret
     306:	8e 7f       	andi	r24, 0xFE	; 254
     308:	fc cf       	rjmp	.-8      	; 0x302 <Dataflash_SelectChipFromPage+0x1a>

0000030a <DataflashManager_WriteBlocks>:
     30a:	8f 92       	push	r8
     30c:	9f 92       	push	r9
     30e:	af 92       	push	r10
     310:	bf 92       	push	r11
     312:	cf 92       	push	r12
     314:	df 92       	push	r13
     316:	ef 92       	push	r14
     318:	ff 92       	push	r15
     31a:	0f 93       	push	r16
     31c:	1f 93       	push	r17
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	6c 01       	movw	r12, r24
     324:	79 01       	movw	r14, r18
     326:	4a 01       	movw	r8, r20
     328:	5b 01       	movw	r10, r22
     32a:	39 e0       	ldi	r19, 0x09	; 9
     32c:	88 0c       	add	r8, r8
     32e:	99 1c       	adc	r9, r9
     330:	aa 1c       	adc	r10, r10
     332:	bb 1c       	adc	r11, r11
     334:	3a 95       	dec	r19
     336:	d1 f7       	brne	.-12     	; 0x32c <DataflashManager_WriteBlocks+0x22>
     338:	6a e0       	ldi	r22, 0x0A	; 10
     33a:	b6 94       	lsr	r11
     33c:	a7 94       	ror	r10
     33e:	97 94       	ror	r9
     340:	87 94       	ror	r8
     342:	6a 95       	dec	r22
     344:	d1 f7       	brne	.-12     	; 0x33a <DataflashManager_WriteBlocks+0x30>
     346:	84 01       	movw	r16, r8
     348:	ea 01       	movw	r28, r20
     34a:	dc 2f       	mov	r29, r28
     34c:	cc 27       	eor	r28, r28
     34e:	dd 0f       	add	r29, r29
     350:	cc 27       	eor	r28, r28
     352:	d2 70       	andi	r29, 0x02	; 2
     354:	c4 01       	movw	r24, r8
     356:	c8 df       	rcall	.-112    	; 0x2e8 <Dataflash_SelectChipFromPage>
     358:	83 e5       	ldi	r24, 0x53	; 83
     35a:	8e bd       	out	0x2e, r24	; 46
     35c:	0d b4       	in	r0, 0x2d	; 45
     35e:	07 fe       	sbrs	r0, 7
     360:	fd cf       	rjmp	.-6      	; 0x35c <DataflashManager_WriteBlocks+0x52>
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	c4 01       	movw	r24, r8
     368:	a6 df       	rcall	.-180    	; 0x2b6 <Dataflash_SendAddressBytes>
     36a:	97 df       	rcall	.-210    	; 0x29a <Dataflash_WaitWhileBusy>
     36c:	84 e8       	ldi	r24, 0x84	; 132
     36e:	8e bd       	out	0x2e, r24	; 46
     370:	0d b4       	in	r0, 0x2d	; 45
     372:	07 fe       	sbrs	r0, 7
     374:	fd cf       	rjmp	.-6      	; 0x370 <DataflashManager_WriteBlocks+0x66>
     376:	be 01       	movw	r22, r28
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	9c df       	rcall	.-200    	; 0x2b6 <Dataflash_SendAddressBytes>
     37e:	51 d6       	rcall	.+3234   	; 0x1022 <Endpoint_WaitUntilReady>
     380:	81 11       	cpse	r24, r1
     382:	df c0       	rjmp	.+446    	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
     384:	94 e0       	ldi	r25, 0x04	; 4
     386:	d6 95       	lsr	r29
     388:	c7 95       	ror	r28
     38a:	9a 95       	dec	r25
     38c:	e1 f7       	brne	.-8      	; 0x386 <DataflashManager_WriteBlocks+0x7c>
     38e:	57 01       	movw	r10, r14
     390:	25 e0       	ldi	r18, 0x05	; 5
     392:	aa 0c       	add	r10, r10
     394:	bb 1c       	adc	r11, r11
     396:	2a 95       	dec	r18
     398:	e1 f7       	brne	.-8      	; 0x392 <DataflashManager_WriteBlocks+0x88>
     39a:	d0 e0       	ldi	r29, 0x00	; 0
     39c:	88 24       	eor	r8, r8
     39e:	83 94       	inc	r8
     3a0:	e1 14       	cp	r14, r1
     3a2:	f1 04       	cpc	r15, r1
     3a4:	d1 f4       	brne	.+52     	; 0x3da <DataflashManager_WriteBlocks+0xd0>
     3a6:	79 df       	rcall	.-270    	; 0x29a <Dataflash_WaitWhileBusy>
     3a8:	d1 11       	cpse	r29, r1
     3aa:	de c0       	rjmp	.+444    	; 0x568 <__FUSE_REGION_LENGTH__+0x168>
     3ac:	83 e8       	ldi	r24, 0x83	; 131
     3ae:	8e bd       	out	0x2e, r24	; 46
     3b0:	0d b4       	in	r0, 0x2d	; 45
     3b2:	07 fe       	sbrs	r0, 7
     3b4:	fd cf       	rjmp	.-6      	; 0x3b0 <DataflashManager_WriteBlocks+0xa6>
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	c8 01       	movw	r24, r16
     3bc:	7c df       	rcall	.-264    	; 0x2b6 <Dataflash_SendAddressBytes>
     3be:	6d df       	rcall	.-294    	; 0x29a <Dataflash_WaitWhileBusy>
     3c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3c4:	85 fd       	sbrc	r24, 5
     3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <DataflashManager_WriteBlocks+0xc8>
     3c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3cc:	8b 77       	andi	r24, 0x7B	; 123
     3ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3d2:	8e b1       	in	r24, 0x0e	; 14
     3d4:	83 60       	ori	r24, 0x03	; 3
     3d6:	8e b9       	out	0x0e, r24	; 14
     3d8:	b4 c0       	rjmp	.+360    	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
     3da:	80 e2       	ldi	r24, 0x20	; 32
     3dc:	98 2e       	mov	r9, r24
     3de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3e2:	85 ff       	sbrs	r24, 5
     3e4:	a5 c0       	rjmp	.+330    	; 0x530 <__FUSE_REGION_LENGTH__+0x130>
     3e6:	c0 34       	cpi	r28, 0x40	; 64
     3e8:	a1 f5       	brne	.+104    	; 0x452 <__FUSE_REGION_LENGTH__+0x52>
     3ea:	57 df       	rcall	.-338    	; 0x29a <Dataflash_WaitWhileBusy>
     3ec:	d1 11       	cpse	r29, r1
     3ee:	b6 c0       	rjmp	.+364    	; 0x55c <__FUSE_REGION_LENGTH__+0x15c>
     3f0:	83 e8       	ldi	r24, 0x83	; 131
     3f2:	8e bd       	out	0x2e, r24	; 46
     3f4:	0d b4       	in	r0, 0x2d	; 45
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <DataflashManager_WriteBlocks+0xea>
     3fa:	60 e0       	ldi	r22, 0x00	; 0
     3fc:	70 e0       	ldi	r23, 0x00	; 0
     3fe:	c8 01       	movw	r24, r16
     400:	5a df       	rcall	.-332    	; 0x2b6 <Dataflash_SendAddressBytes>
     402:	0f 5f       	subi	r16, 0xFF	; 255
     404:	1f 4f       	sbci	r17, 0xFF	; 255
     406:	8e b1       	in	r24, 0x0e	; 14
     408:	80 95       	com	r24
     40a:	83 70       	andi	r24, 0x03	; 3
     40c:	82 30       	cpi	r24, 0x02	; 2
     40e:	09 f4       	brne	.+2      	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
     410:	d8 25       	eor	r29, r8
     412:	c8 01       	movw	r24, r16
     414:	69 df       	rcall	.-302    	; 0x2e8 <Dataflash_SelectChipFromPage>
     416:	80 e4       	ldi	r24, 0x40	; 64
     418:	a8 16       	cp	r10, r24
     41a:	b1 04       	cpc	r11, r1
     41c:	68 f4       	brcc	.+26     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
     41e:	3d df       	rcall	.-390    	; 0x29a <Dataflash_WaitWhileBusy>
     420:	d1 11       	cpse	r29, r1
     422:	9e c0       	rjmp	.+316    	; 0x560 <__FUSE_REGION_LENGTH__+0x160>
     424:	83 e5       	ldi	r24, 0x53	; 83
     426:	8e bd       	out	0x2e, r24	; 46
     428:	0d b4       	in	r0, 0x2d	; 45
     42a:	07 fe       	sbrs	r0, 7
     42c:	fd cf       	rjmp	.-6      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     42e:	60 e0       	ldi	r22, 0x00	; 0
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	c8 01       	movw	r24, r16
     434:	40 df       	rcall	.-384    	; 0x2b6 <Dataflash_SendAddressBytes>
     436:	31 df       	rcall	.-414    	; 0x29a <Dataflash_WaitWhileBusy>
     438:	d1 11       	cpse	r29, r1
     43a:	94 c0       	rjmp	.+296    	; 0x564 <__FUSE_REGION_LENGTH__+0x164>
     43c:	84 e8       	ldi	r24, 0x84	; 132
     43e:	8e bd       	out	0x2e, r24	; 46
     440:	0d b4       	in	r0, 0x2d	; 45
     442:	07 fe       	sbrs	r0, 7
     444:	fd cf       	rjmp	.-6      	; 0x440 <__FUSE_REGION_LENGTH__+0x40>
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	33 df       	rcall	.-410    	; 0x2b6 <Dataflash_SendAddressBytes>
     450:	c0 e0       	ldi	r28, 0x00	; 0
     452:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     456:	8e bd       	out	0x2e, r24	; 46
     458:	0d b4       	in	r0, 0x2d	; 45
     45a:	07 fe       	sbrs	r0, 7
     45c:	fd cf       	rjmp	.-6      	; 0x458 <__FUSE_REGION_LENGTH__+0x58>
     45e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     462:	8e bd       	out	0x2e, r24	; 46
     464:	0d b4       	in	r0, 0x2d	; 45
     466:	07 fe       	sbrs	r0, 7
     468:	fd cf       	rjmp	.-6      	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
     46a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     46e:	8e bd       	out	0x2e, r24	; 46
     470:	0d b4       	in	r0, 0x2d	; 45
     472:	07 fe       	sbrs	r0, 7
     474:	fd cf       	rjmp	.-6      	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
     476:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     47a:	8e bd       	out	0x2e, r24	; 46
     47c:	0d b4       	in	r0, 0x2d	; 45
     47e:	07 fe       	sbrs	r0, 7
     480:	fd cf       	rjmp	.-6      	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
     482:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     486:	8e bd       	out	0x2e, r24	; 46
     488:	0d b4       	in	r0, 0x2d	; 45
     48a:	07 fe       	sbrs	r0, 7
     48c:	fd cf       	rjmp	.-6      	; 0x488 <__FUSE_REGION_LENGTH__+0x88>
     48e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     492:	8e bd       	out	0x2e, r24	; 46
     494:	0d b4       	in	r0, 0x2d	; 45
     496:	07 fe       	sbrs	r0, 7
     498:	fd cf       	rjmp	.-6      	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
     49a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     49e:	8e bd       	out	0x2e, r24	; 46
     4a0:	0d b4       	in	r0, 0x2d	; 45
     4a2:	07 fe       	sbrs	r0, 7
     4a4:	fd cf       	rjmp	.-6      	; 0x4a0 <__FUSE_REGION_LENGTH__+0xa0>
     4a6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4aa:	8e bd       	out	0x2e, r24	; 46
     4ac:	0d b4       	in	r0, 0x2d	; 45
     4ae:	07 fe       	sbrs	r0, 7
     4b0:	fd cf       	rjmp	.-6      	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
     4b2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4b6:	8e bd       	out	0x2e, r24	; 46
     4b8:	0d b4       	in	r0, 0x2d	; 45
     4ba:	07 fe       	sbrs	r0, 7
     4bc:	fd cf       	rjmp	.-6      	; 0x4b8 <__FUSE_REGION_LENGTH__+0xb8>
     4be:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4c2:	8e bd       	out	0x2e, r24	; 46
     4c4:	0d b4       	in	r0, 0x2d	; 45
     4c6:	07 fe       	sbrs	r0, 7
     4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
     4ca:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4ce:	8e bd       	out	0x2e, r24	; 46
     4d0:	0d b4       	in	r0, 0x2d	; 45
     4d2:	07 fe       	sbrs	r0, 7
     4d4:	fd cf       	rjmp	.-6      	; 0x4d0 <__FUSE_REGION_LENGTH__+0xd0>
     4d6:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4da:	8e bd       	out	0x2e, r24	; 46
     4dc:	0d b4       	in	r0, 0x2d	; 45
     4de:	07 fe       	sbrs	r0, 7
     4e0:	fd cf       	rjmp	.-6      	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
     4e2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4e6:	8e bd       	out	0x2e, r24	; 46
     4e8:	0d b4       	in	r0, 0x2d	; 45
     4ea:	07 fe       	sbrs	r0, 7
     4ec:	fd cf       	rjmp	.-6      	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
     4ee:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4f2:	8e bd       	out	0x2e, r24	; 46
     4f4:	0d b4       	in	r0, 0x2d	; 45
     4f6:	07 fe       	sbrs	r0, 7
     4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <__FUSE_REGION_LENGTH__+0xf4>
     4fa:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     4fe:	8e bd       	out	0x2e, r24	; 46
     500:	0d b4       	in	r0, 0x2d	; 45
     502:	07 fe       	sbrs	r0, 7
     504:	fd cf       	rjmp	.-6      	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
     506:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     50a:	8e bd       	out	0x2e, r24	; 46
     50c:	0d b4       	in	r0, 0x2d	; 45
     50e:	07 fe       	sbrs	r0, 7
     510:	fd cf       	rjmp	.-6      	; 0x50c <__FUSE_REGION_LENGTH__+0x10c>
     512:	cf 5f       	subi	r28, 0xFF	; 255
     514:	f6 01       	movw	r30, r12
     516:	80 ad       	ldd	r24, Z+56	; 0x38
     518:	81 11       	cpse	r24, r1
     51a:	13 c0       	rjmp	.+38     	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
     51c:	9a 94       	dec	r9
     51e:	91 10       	cpse	r9, r1
     520:	5e cf       	rjmp	.-324    	; 0x3de <DataflashManager_WriteBlocks+0xd4>
     522:	f1 e0       	ldi	r31, 0x01	; 1
     524:	ef 1a       	sub	r14, r31
     526:	f1 08       	sbc	r15, r1
     528:	80 e2       	ldi	r24, 0x20	; 32
     52a:	a8 1a       	sub	r10, r24
     52c:	b1 08       	sbc	r11, r1
     52e:	38 cf       	rjmp	.-400    	; 0x3a0 <DataflashManager_WriteBlocks+0x96>
     530:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     534:	8b 77       	andi	r24, 0x7B	; 123
     536:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     53a:	73 d5       	rcall	.+2790   	; 0x1022 <Endpoint_WaitUntilReady>
     53c:	88 23       	and	r24, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
     540:	52 cf       	rjmp	.-348    	; 0x3e6 <DataflashManager_WriteBlocks+0xdc>
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	df 90       	pop	r13
     550:	cf 90       	pop	r12
     552:	bf 90       	pop	r11
     554:	af 90       	pop	r10
     556:	9f 90       	pop	r9
     558:	8f 90       	pop	r8
     55a:	08 95       	ret
     55c:	86 e8       	ldi	r24, 0x86	; 134
     55e:	49 cf       	rjmp	.-366    	; 0x3f2 <DataflashManager_WriteBlocks+0xe8>
     560:	85 e5       	ldi	r24, 0x55	; 85
     562:	61 cf       	rjmp	.-318    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     564:	87 e8       	ldi	r24, 0x87	; 135
     566:	6b cf       	rjmp	.-298    	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     568:	86 e8       	ldi	r24, 0x86	; 134
     56a:	21 cf       	rjmp	.-446    	; 0x3ae <DataflashManager_WriteBlocks+0xa4>

0000056c <DataflashManager_ReadBlocks>:
     56c:	8f 92       	push	r8
     56e:	9f 92       	push	r9
     570:	af 92       	push	r10
     572:	bf 92       	push	r11
     574:	cf 92       	push	r12
     576:	df 92       	push	r13
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	6c 01       	movw	r12, r24
     586:	79 01       	movw	r14, r18
     588:	4a 01       	movw	r8, r20
     58a:	5b 01       	movw	r10, r22
     58c:	29 e0       	ldi	r18, 0x09	; 9
     58e:	88 0c       	add	r8, r8
     590:	99 1c       	adc	r9, r9
     592:	aa 1c       	adc	r10, r10
     594:	bb 1c       	adc	r11, r11
     596:	2a 95       	dec	r18
     598:	d1 f7       	brne	.-12     	; 0x58e <DataflashManager_ReadBlocks+0x22>
     59a:	3a e0       	ldi	r19, 0x0A	; 10
     59c:	b6 94       	lsr	r11
     59e:	a7 94       	ror	r10
     5a0:	97 94       	ror	r9
     5a2:	87 94       	ror	r8
     5a4:	3a 95       	dec	r19
     5a6:	d1 f7       	brne	.-12     	; 0x59c <DataflashManager_ReadBlocks+0x30>
     5a8:	84 01       	movw	r16, r8
     5aa:	ea 01       	movw	r28, r20
     5ac:	dc 2f       	mov	r29, r28
     5ae:	cc 27       	eor	r28, r28
     5b0:	dd 0f       	add	r29, r29
     5b2:	cc 27       	eor	r28, r28
     5b4:	d2 70       	andi	r29, 0x02	; 2
     5b6:	c4 01       	movw	r24, r8
     5b8:	97 de       	rcall	.-722    	; 0x2e8 <Dataflash_SelectChipFromPage>
     5ba:	82 ed       	ldi	r24, 0xD2	; 210
     5bc:	8e bd       	out	0x2e, r24	; 46
     5be:	0d b4       	in	r0, 0x2d	; 45
     5c0:	07 fe       	sbrs	r0, 7
     5c2:	fd cf       	rjmp	.-6      	; 0x5be <DataflashManager_ReadBlocks+0x52>
     5c4:	be 01       	movw	r22, r28
     5c6:	c4 01       	movw	r24, r8
     5c8:	76 de       	rcall	.-788    	; 0x2b6 <Dataflash_SendAddressBytes>
     5ca:	1e bc       	out	0x2e, r1	; 46
     5cc:	0d b4       	in	r0, 0x2d	; 45
     5ce:	07 fe       	sbrs	r0, 7
     5d0:	fd cf       	rjmp	.-6      	; 0x5cc <DataflashManager_ReadBlocks+0x60>
     5d2:	1e bc       	out	0x2e, r1	; 46
     5d4:	0d b4       	in	r0, 0x2d	; 45
     5d6:	07 fe       	sbrs	r0, 7
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <DataflashManager_ReadBlocks+0x68>
     5da:	1e bc       	out	0x2e, r1	; 46
     5dc:	0d b4       	in	r0, 0x2d	; 45
     5de:	07 fe       	sbrs	r0, 7
     5e0:	fd cf       	rjmp	.-6      	; 0x5dc <DataflashManager_ReadBlocks+0x70>
     5e2:	1e bc       	out	0x2e, r1	; 46
     5e4:	0d b4       	in	r0, 0x2d	; 45
     5e6:	07 fe       	sbrs	r0, 7
     5e8:	fd cf       	rjmp	.-6      	; 0x5e4 <DataflashManager_ReadBlocks+0x78>
     5ea:	1b d5       	rcall	.+2614   	; 0x1022 <Endpoint_WaitUntilReady>
     5ec:	81 11       	cpse	r24, r1
     5ee:	c0 c0       	rjmp	.+384    	; 0x770 <DataflashManager_ReadBlocks+0x204>
     5f0:	84 e0       	ldi	r24, 0x04	; 4
     5f2:	d6 95       	lsr	r29
     5f4:	c7 95       	ror	r28
     5f6:	8a 95       	dec	r24
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <DataflashManager_ReadBlocks+0x86>
     5fa:	92 ed       	ldi	r25, 0xD2	; 210
     5fc:	b9 2e       	mov	r11, r25
     5fe:	e1 14       	cp	r14, r1
     600:	f1 04       	cpc	r15, r1
     602:	69 f4       	brne	.+26     	; 0x61e <DataflashManager_ReadBlocks+0xb2>
     604:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     608:	85 fd       	sbrc	r24, 5
     60a:	05 c0       	rjmp	.+10     	; 0x616 <DataflashManager_ReadBlocks+0xaa>
     60c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     610:	8e 77       	andi	r24, 0x7E	; 126
     612:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     616:	8e b1       	in	r24, 0x0e	; 14
     618:	83 60       	ori	r24, 0x03	; 3
     61a:	8e b9       	out	0x0e, r24	; 14
     61c:	a9 c0       	rjmp	.+338    	; 0x770 <DataflashManager_ReadBlocks+0x204>
     61e:	d0 e2       	ldi	r29, 0x20	; 32
     620:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     624:	85 ff       	sbrs	r24, 5
     626:	9b c0       	rjmp	.+310    	; 0x75e <DataflashManager_ReadBlocks+0x1f2>
     628:	c0 34       	cpi	r28, 0x40	; 64
     62a:	e9 f4       	brne	.+58     	; 0x666 <DataflashManager_ReadBlocks+0xfa>
     62c:	0f 5f       	subi	r16, 0xFF	; 255
     62e:	1f 4f       	sbci	r17, 0xFF	; 255
     630:	c8 01       	movw	r24, r16
     632:	5a de       	rcall	.-844    	; 0x2e8 <Dataflash_SelectChipFromPage>
     634:	be bc       	out	0x2e, r11	; 46
     636:	0d b4       	in	r0, 0x2d	; 45
     638:	07 fe       	sbrs	r0, 7
     63a:	fd cf       	rjmp	.-6      	; 0x636 <DataflashManager_ReadBlocks+0xca>
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	c8 01       	movw	r24, r16
     642:	39 de       	rcall	.-910    	; 0x2b6 <Dataflash_SendAddressBytes>
     644:	1e bc       	out	0x2e, r1	; 46
     646:	0d b4       	in	r0, 0x2d	; 45
     648:	07 fe       	sbrs	r0, 7
     64a:	fd cf       	rjmp	.-6      	; 0x646 <DataflashManager_ReadBlocks+0xda>
     64c:	1e bc       	out	0x2e, r1	; 46
     64e:	0d b4       	in	r0, 0x2d	; 45
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <DataflashManager_ReadBlocks+0xe2>
     654:	1e bc       	out	0x2e, r1	; 46
     656:	0d b4       	in	r0, 0x2d	; 45
     658:	07 fe       	sbrs	r0, 7
     65a:	fd cf       	rjmp	.-6      	; 0x656 <DataflashManager_ReadBlocks+0xea>
     65c:	1e bc       	out	0x2e, r1	; 46
     65e:	0d b4       	in	r0, 0x2d	; 45
     660:	07 fe       	sbrs	r0, 7
     662:	fd cf       	rjmp	.-6      	; 0x65e <DataflashManager_ReadBlocks+0xf2>
     664:	c0 e0       	ldi	r28, 0x00	; 0
     666:	1e bc       	out	0x2e, r1	; 46
     668:	0d b4       	in	r0, 0x2d	; 45
     66a:	07 fe       	sbrs	r0, 7
     66c:	fd cf       	rjmp	.-6      	; 0x668 <DataflashManager_ReadBlocks+0xfc>
     66e:	8e b5       	in	r24, 0x2e	; 46
     670:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     674:	1e bc       	out	0x2e, r1	; 46
     676:	0d b4       	in	r0, 0x2d	; 45
     678:	07 fe       	sbrs	r0, 7
     67a:	fd cf       	rjmp	.-6      	; 0x676 <DataflashManager_ReadBlocks+0x10a>
     67c:	8e b5       	in	r24, 0x2e	; 46
     67e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     682:	1e bc       	out	0x2e, r1	; 46
     684:	0d b4       	in	r0, 0x2d	; 45
     686:	07 fe       	sbrs	r0, 7
     688:	fd cf       	rjmp	.-6      	; 0x684 <DataflashManager_ReadBlocks+0x118>
     68a:	8e b5       	in	r24, 0x2e	; 46
     68c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     690:	1e bc       	out	0x2e, r1	; 46
     692:	0d b4       	in	r0, 0x2d	; 45
     694:	07 fe       	sbrs	r0, 7
     696:	fd cf       	rjmp	.-6      	; 0x692 <DataflashManager_ReadBlocks+0x126>
     698:	8e b5       	in	r24, 0x2e	; 46
     69a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     69e:	1e bc       	out	0x2e, r1	; 46
     6a0:	0d b4       	in	r0, 0x2d	; 45
     6a2:	07 fe       	sbrs	r0, 7
     6a4:	fd cf       	rjmp	.-6      	; 0x6a0 <DataflashManager_ReadBlocks+0x134>
     6a6:	8e b5       	in	r24, 0x2e	; 46
     6a8:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6ac:	1e bc       	out	0x2e, r1	; 46
     6ae:	0d b4       	in	r0, 0x2d	; 45
     6b0:	07 fe       	sbrs	r0, 7
     6b2:	fd cf       	rjmp	.-6      	; 0x6ae <DataflashManager_ReadBlocks+0x142>
     6b4:	8e b5       	in	r24, 0x2e	; 46
     6b6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6ba:	1e bc       	out	0x2e, r1	; 46
     6bc:	0d b4       	in	r0, 0x2d	; 45
     6be:	07 fe       	sbrs	r0, 7
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <DataflashManager_ReadBlocks+0x150>
     6c2:	8e b5       	in	r24, 0x2e	; 46
     6c4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6c8:	1e bc       	out	0x2e, r1	; 46
     6ca:	0d b4       	in	r0, 0x2d	; 45
     6cc:	07 fe       	sbrs	r0, 7
     6ce:	fd cf       	rjmp	.-6      	; 0x6ca <DataflashManager_ReadBlocks+0x15e>
     6d0:	8e b5       	in	r24, 0x2e	; 46
     6d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6d6:	1e bc       	out	0x2e, r1	; 46
     6d8:	0d b4       	in	r0, 0x2d	; 45
     6da:	07 fe       	sbrs	r0, 7
     6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <DataflashManager_ReadBlocks+0x16c>
     6de:	8e b5       	in	r24, 0x2e	; 46
     6e0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6e4:	1e bc       	out	0x2e, r1	; 46
     6e6:	0d b4       	in	r0, 0x2d	; 45
     6e8:	07 fe       	sbrs	r0, 7
     6ea:	fd cf       	rjmp	.-6      	; 0x6e6 <DataflashManager_ReadBlocks+0x17a>
     6ec:	8e b5       	in	r24, 0x2e	; 46
     6ee:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     6f2:	1e bc       	out	0x2e, r1	; 46
     6f4:	0d b4       	in	r0, 0x2d	; 45
     6f6:	07 fe       	sbrs	r0, 7
     6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <DataflashManager_ReadBlocks+0x188>
     6fa:	8e b5       	in	r24, 0x2e	; 46
     6fc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     700:	1e bc       	out	0x2e, r1	; 46
     702:	0d b4       	in	r0, 0x2d	; 45
     704:	07 fe       	sbrs	r0, 7
     706:	fd cf       	rjmp	.-6      	; 0x702 <DataflashManager_ReadBlocks+0x196>
     708:	8e b5       	in	r24, 0x2e	; 46
     70a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     70e:	1e bc       	out	0x2e, r1	; 46
     710:	0d b4       	in	r0, 0x2d	; 45
     712:	07 fe       	sbrs	r0, 7
     714:	fd cf       	rjmp	.-6      	; 0x710 <DataflashManager_ReadBlocks+0x1a4>
     716:	8e b5       	in	r24, 0x2e	; 46
     718:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     71c:	1e bc       	out	0x2e, r1	; 46
     71e:	0d b4       	in	r0, 0x2d	; 45
     720:	07 fe       	sbrs	r0, 7
     722:	fd cf       	rjmp	.-6      	; 0x71e <DataflashManager_ReadBlocks+0x1b2>
     724:	8e b5       	in	r24, 0x2e	; 46
     726:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     72a:	1e bc       	out	0x2e, r1	; 46
     72c:	0d b4       	in	r0, 0x2d	; 45
     72e:	07 fe       	sbrs	r0, 7
     730:	fd cf       	rjmp	.-6      	; 0x72c <DataflashManager_ReadBlocks+0x1c0>
     732:	8e b5       	in	r24, 0x2e	; 46
     734:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     738:	1e bc       	out	0x2e, r1	; 46
     73a:	0d b4       	in	r0, 0x2d	; 45
     73c:	07 fe       	sbrs	r0, 7
     73e:	fd cf       	rjmp	.-6      	; 0x73a <DataflashManager_ReadBlocks+0x1ce>
     740:	8e b5       	in	r24, 0x2e	; 46
     742:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     746:	cf 5f       	subi	r28, 0xFF	; 255
     748:	f6 01       	movw	r30, r12
     74a:	80 ad       	ldd	r24, Z+56	; 0x38
     74c:	81 11       	cpse	r24, r1
     74e:	10 c0       	rjmp	.+32     	; 0x770 <DataflashManager_ReadBlocks+0x204>
     750:	d1 50       	subi	r29, 0x01	; 1
     752:	09 f0       	breq	.+2      	; 0x756 <DataflashManager_ReadBlocks+0x1ea>
     754:	65 cf       	rjmp	.-310    	; 0x620 <DataflashManager_ReadBlocks+0xb4>
     756:	f1 e0       	ldi	r31, 0x01	; 1
     758:	ef 1a       	sub	r14, r31
     75a:	f1 08       	sbc	r15, r1
     75c:	50 cf       	rjmp	.-352    	; 0x5fe <DataflashManager_ReadBlocks+0x92>
     75e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     762:	8e 77       	andi	r24, 0x7E	; 126
     764:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     768:	5c d4       	rcall	.+2232   	; 0x1022 <Endpoint_WaitUntilReady>
     76a:	88 23       	and	r24, r24
     76c:	09 f4       	brne	.+2      	; 0x770 <DataflashManager_ReadBlocks+0x204>
     76e:	5c cf       	rjmp	.-328    	; 0x628 <DataflashManager_ReadBlocks+0xbc>
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	bf 90       	pop	r11
     782:	af 90       	pop	r10
     784:	9f 90       	pop	r9
     786:	8f 90       	pop	r8
     788:	08 95       	ret

0000078a <DataflashManager_ResetDataflashProtections>:
			 *              the chip number).
			 */
			static inline void Dataflash_SelectChip(const uint8_t ChipMask) ATTR_ALWAYS_INLINE;
			static inline void Dataflash_SelectChip(const uint8_t ChipMask)
			{
				DATAFLASH_CHIPCS_PORT = ((DATAFLASH_CHIPCS_PORT | DATAFLASH_CHIPCS_MASK) & ~ChipMask);
     78a:	8e b1       	in	r24, 0x0e	; 14
     78c:	83 60       	ori	r24, 0x03	; 3
     78e:	8e 7f       	andi	r24, 0xFE	; 254
     790:	8e b9       	out	0x0e, r24	; 14
			 *  \param[in] Byte  Byte to send through the SPI interface.
			 */
			static inline void SPI_SendByte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void SPI_SendByte(const uint8_t Byte)
			{
				SPDR = Byte;
     792:	87 ed       	ldi	r24, 0xD7	; 215
     794:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     796:	0d b4       	in	r0, 0x2d	; 45
     798:	07 fe       	sbrs	r0, 7
     79a:	fd cf       	rjmp	.-6      	; 0x796 <DataflashManager_ResetDataflashProtections+0xc>
			 *  \return The response byte from the attached SPI device.
			 */
			static inline uint8_t SPI_ReceiveByte(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t SPI_ReceiveByte(void)
			{
				SPDR = 0x00;
     79c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     79e:	0d b4       	in	r0, 0x2d	; 45
     7a0:	07 fe       	sbrs	r0, 7
     7a2:	fd cf       	rjmp	.-6      	; 0x79e <DataflashManager_ResetDataflashProtections+0x14>
	/* Select first Dataflash chip, send the read status register command */
	Dataflash_SelectChip(DATAFLASH_CHIP1);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     7a4:	0e b4       	in	r0, 0x2e	; 46
     7a6:	01 fc       	sbrc	r0, 1
     7a8:	14 c0       	rjmp	.+40     	; 0x7d2 <DataflashManager_ResetDataflashProtections+0x48>
     7aa:	8e b1       	in	r24, 0x0e	; 14
     7ac:	83 60       	ori	r24, 0x03	; 3
     7ae:	8d 7f       	andi	r24, 0xFD	; 253
     7b0:	8e b9       	out	0x0e, r24	; 14
				SPDR = Byte;
     7b2:	87 ed       	ldi	r24, 0xD7	; 215
     7b4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7b6:	0d b4       	in	r0, 0x2d	; 45
     7b8:	07 fe       	sbrs	r0, 7
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <DataflashManager_ResetDataflashProtections+0x2c>
				SPDR = 0x00;
     7bc:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     7be:	0d b4       	in	r0, 0x2d	; 45
     7c0:	07 fe       	sbrs	r0, 7
     7c2:	fd cf       	rjmp	.-6      	; 0x7be <DataflashManager_ResetDataflashProtections+0x34>
	#if (DATAFLASH_TOTALCHIPS == 2)
	Dataflash_SelectChip(DATAFLASH_CHIP2);
	Dataflash_SendByte(DF_CMD_GETSTATUS);

	/* Check if sector protection is enabled */
	if (Dataflash_ReceiveByte() & DF_STATUS_SECTORPROTECTION_ON)
     7c4:	0e b4       	in	r0, 0x2e	; 46
     7c6:	01 fc       	sbrc	r0, 1
     7c8:	1a c0       	rjmp	.+52     	; 0x7fe <DataflashManager_ResetDataflashProtections+0x74>
     7ca:	8e b1       	in	r24, 0x0e	; 14
     7cc:	83 60       	ori	r24, 0x03	; 3
     7ce:	8e b9       	out	0x0e, r24	; 14
	}
	#endif

	/* Deselect current Dataflash chip */
	Dataflash_DeselectChip();
}
     7d0:	08 95       	ret
		Dataflash_ToggleSelectedChipCS();
     7d2:	59 dd       	rcall	.-1358   	; 0x286 <Dataflash_ToggleSelectedChipCS>
				SPDR = Byte;
     7d4:	8d e3       	ldi	r24, 0x3D	; 61
     7d6:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7d8:	0d b4       	in	r0, 0x2d	; 45
     7da:	07 fe       	sbrs	r0, 7
     7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <DataflashManager_ResetDataflashProtections+0x4e>
				SPDR = Byte;
     7de:	8a e2       	ldi	r24, 0x2A	; 42
     7e0:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7e2:	0d b4       	in	r0, 0x2d	; 45
     7e4:	07 fe       	sbrs	r0, 7
     7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <DataflashManager_ResetDataflashProtections+0x58>
				SPDR = Byte;
     7e8:	8f e7       	ldi	r24, 0x7F	; 127
     7ea:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7ec:	0d b4       	in	r0, 0x2d	; 45
     7ee:	07 fe       	sbrs	r0, 7
     7f0:	fd cf       	rjmp	.-6      	; 0x7ec <DataflashManager_ResetDataflashProtections+0x62>
				SPDR = Byte;
     7f2:	8a e9       	ldi	r24, 0x9A	; 154
     7f4:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     7f6:	0d b4       	in	r0, 0x2d	; 45
     7f8:	07 fe       	sbrs	r0, 7
     7fa:	fd cf       	rjmp	.-6      	; 0x7f6 <DataflashManager_ResetDataflashProtections+0x6c>
     7fc:	d6 cf       	rjmp	.-84     	; 0x7aa <DataflashManager_ResetDataflashProtections+0x20>
		Dataflash_ToggleSelectedChipCS();
     7fe:	43 dd       	rcall	.-1402   	; 0x286 <Dataflash_ToggleSelectedChipCS>
				SPDR = Byte;
     800:	8d e3       	ldi	r24, 0x3D	; 61
     802:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     804:	0d b4       	in	r0, 0x2d	; 45
     806:	07 fe       	sbrs	r0, 7
     808:	fd cf       	rjmp	.-6      	; 0x804 <DataflashManager_ResetDataflashProtections+0x7a>
				SPDR = Byte;
     80a:	8a e2       	ldi	r24, 0x2A	; 42
     80c:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     80e:	0d b4       	in	r0, 0x2d	; 45
     810:	07 fe       	sbrs	r0, 7
     812:	fd cf       	rjmp	.-6      	; 0x80e <DataflashManager_ResetDataflashProtections+0x84>
				SPDR = Byte;
     814:	8f e7       	ldi	r24, 0x7F	; 127
     816:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     818:	0d b4       	in	r0, 0x2d	; 45
     81a:	07 fe       	sbrs	r0, 7
     81c:	fd cf       	rjmp	.-6      	; 0x818 <DataflashManager_ResetDataflashProtections+0x8e>
				SPDR = Byte;
     81e:	8a e9       	ldi	r24, 0x9A	; 154
     820:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     822:	0d b4       	in	r0, 0x2d	; 45
     824:	07 fe       	sbrs	r0, 7
     826:	fd cf       	rjmp	.-6      	; 0x822 <DataflashManager_ResetDataflashProtections+0x98>
     828:	d0 cf       	rjmp	.-96     	; 0x7ca <DataflashManager_ResetDataflashProtections+0x40>

0000082a <DataflashManager_CheckDataflashOperation>:
     82a:	8e b1       	in	r24, 0x0e	; 14
     82c:	83 60       	ori	r24, 0x03	; 3
     82e:	8e 7f       	andi	r24, 0xFE	; 254
     830:	8e b9       	out	0x0e, r24	; 14
				SPDR = Byte;
     832:	8f e9       	ldi	r24, 0x9F	; 159
     834:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     836:	0d b4       	in	r0, 0x2d	; 45
     838:	07 fe       	sbrs	r0, 7
     83a:	fd cf       	rjmp	.-6      	; 0x836 <DataflashManager_CheckDataflashOperation+0xc>
				SPDR = 0x00;
     83c:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     83e:	0d b4       	in	r0, 0x2d	; 45
     840:	07 fe       	sbrs	r0, 7
     842:	fd cf       	rjmp	.-6      	; 0x83e <DataflashManager_CheckDataflashOperation+0x14>
				return SPDR;
     844:	9e b5       	in	r25, 0x2e	; 46
     846:	8e b1       	in	r24, 0x0e	; 14
     848:	83 60       	ori	r24, 0x03	; 3
     84a:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     84c:	9f 31       	cpi	r25, 0x1F	; 31
     84e:	a1 f4       	brne	.+40     	; 0x878 <DataflashManager_CheckDataflashOperation+0x4e>
     850:	8e b1       	in	r24, 0x0e	; 14
     852:	83 60       	ori	r24, 0x03	; 3
     854:	8d 7f       	andi	r24, 0xFD	; 253
     856:	8e b9       	out	0x0e, r24	; 14
				SPDR = Byte;
     858:	8f e9       	ldi	r24, 0x9F	; 159
     85a:	8e bd       	out	0x2e, r24	; 46
				while (!(SPSR & (1 << SPIF)));
     85c:	0d b4       	in	r0, 0x2d	; 45
     85e:	07 fe       	sbrs	r0, 7
     860:	fd cf       	rjmp	.-6      	; 0x85c <DataflashManager_CheckDataflashOperation+0x32>
				SPDR = 0x00;
     862:	1e bc       	out	0x2e, r1	; 46
				while (!(SPSR & (1 << SPIF)));
     864:	0d b4       	in	r0, 0x2d	; 45
     866:	07 fe       	sbrs	r0, 7
     868:	fd cf       	rjmp	.-6      	; 0x864 <DataflashManager_CheckDataflashOperation+0x3a>
				return SPDR;
     86a:	9e b5       	in	r25, 0x2e	; 46
     86c:	8e b1       	in	r24, 0x0e	; 14
     86e:	83 60       	ori	r24, 0x03	; 3
     870:	8e b9       	out	0x0e, r24	; 14
	Dataflash_SendByte(DF_CMD_READMANUFACTURERDEVICEINFO);
	ReturnByte = Dataflash_ReceiveByte();
	Dataflash_DeselectChip();

	/* If returned data is invalid, fail the command */
	if (ReturnByte != DF_MANUFACTURER_ATMEL)
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	9f 31       	cpi	r25, 0x1F	; 31
     876:	09 f0       	breq	.+2      	; 0x87a <DataflashManager_CheckDataflashOperation+0x50>
	  return false;
     878:	80 e0       	ldi	r24, 0x00	; 0
	  return false;
	#endif

	return true;
}
     87a:	08 95       	ret

0000087c <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	ec 01       	movw	r28, r24
     886:	86 2f       	mov	r24, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
     888:	48 a1       	ldd	r20, Y+32	; 0x20
     88a:	5f 8d       	ldd	r21, Y+31	; 0x1f
     88c:	6e 8d       	ldd	r22, Y+30	; 0x1e
     88e:	7d 8d       	ldd	r23, Y+29	; 0x1d
				return Data.Word;
     890:	0b a1       	ldd	r16, Y+35	; 0x23
     892:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     894:	41 15       	cp	r20, r1
     896:	90 e8       	ldi	r25, 0x80	; 128
     898:	59 07       	cpc	r21, r25
     89a:	61 05       	cpc	r22, r1
     89c:	71 05       	cpc	r23, r1
     89e:	88 f0       	brcs	.+34     	; 0x8c2 <SCSI_Command_ReadWrite_10+0x46>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     8a0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <SenseData+0x2>
     8a4:	80 7f       	andi	r24, 0xF0	; 240
     8a6:	85 60       	ori	r24, 0x05	; 5
     8a8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <SenseData+0x2>
     8ac:	81 e2       	ldi	r24, 0x21	; 33
     8ae:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <SenseData+0xc>
     8b2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <SenseData+0xd>
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
     8b6:	80 e0       	ldi	r24, 0x00	; 0

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);

	return true;
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	08 95       	ret
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8c2:	98 01       	movw	r18, r16
	if (IsDataRead == DATA_READ)
     8c4:	88 23       	and	r24, r24
     8c6:	d1 f0       	breq	.+52     	; 0x8fc <SCSI_Command_ReadWrite_10+0x80>
	  DataflashManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8c8:	ce 01       	movw	r24, r28
     8ca:	50 de       	rcall	.-864    	; 0x56c <DataflashManager_ReadBlocks>
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     8cc:	c8 01       	movw	r24, r16
     8ce:	a0 e0       	ldi	r26, 0x00	; 0
     8d0:	b0 e0       	ldi	r27, 0x00	; 0
     8d2:	29 e0       	ldi	r18, 0x09	; 9
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	aa 1f       	adc	r26, r26
     8da:	bb 1f       	adc	r27, r27
     8dc:	2a 95       	dec	r18
     8de:	d1 f7       	brne	.-12     	; 0x8d4 <SCSI_Command_ReadWrite_10+0x58>
     8e0:	4c 89       	ldd	r20, Y+20	; 0x14
     8e2:	5d 89       	ldd	r21, Y+21	; 0x15
     8e4:	6e 89       	ldd	r22, Y+22	; 0x16
     8e6:	7f 89       	ldd	r23, Y+23	; 0x17
     8e8:	48 1b       	sub	r20, r24
     8ea:	59 0b       	sbc	r21, r25
     8ec:	6a 0b       	sbc	r22, r26
     8ee:	7b 0b       	sbc	r23, r27
     8f0:	4c 8b       	std	Y+20, r20	; 0x14
     8f2:	5d 8b       	std	Y+21, r21	; 0x15
     8f4:	6e 8b       	std	Y+22, r22	; 0x16
     8f6:	7f 8b       	std	Y+23, r23	; 0x17
	return true;
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	de cf       	rjmp	.-68     	; 0x8b8 <SCSI_Command_ReadWrite_10+0x3c>
	  DataflashManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
     8fc:	ce 01       	movw	r24, r28
     8fe:	05 dd       	rcall	.-1526   	; 0x30a <DataflashManager_WriteBlocks>
     900:	e5 cf       	rjmp	.-54     	; 0x8cc <SCSI_Command_ReadWrite_10+0x50>

00000902 <SCSI_DecodeSCSICommand>:
{
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	28 97       	sbiw	r28, 0x08	; 8
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	8c 01       	movw	r16, r24
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     924:	fc 01       	movw	r30, r24
     926:	83 8d       	ldd	r24, Z+27	; 0x1b
     928:	8d 31       	cpi	r24, 0x1D	; 29
     92a:	09 f4       	brne	.+2      	; 0x92e <SCSI_DecodeSCSICommand+0x2c>
     92c:	bb c0       	rjmp	.+374    	; 0xaa4 <SCSI_DecodeSCSICommand+0x1a2>
     92e:	e0 f4       	brcc	.+56     	; 0x968 <SCSI_DecodeSCSICommand+0x66>
     930:	82 31       	cpi	r24, 0x12	; 18
     932:	09 f4       	brne	.+2      	; 0x936 <SCSI_DecodeSCSICommand+0x34>
     934:	54 c0       	rjmp	.+168    	; 0x9de <SCSI_DecodeSCSICommand+0xdc>
     936:	68 f4       	brcc	.+26     	; 0x952 <SCSI_DecodeSCSICommand+0x50>
     938:	88 23       	and	r24, r24
     93a:	81 f0       	breq	.+32     	; 0x95c <SCSI_DecodeSCSICommand+0x5a>
     93c:	83 30       	cpi	r24, 0x03	; 3
     93e:	09 f4       	brne	.+2      	; 0x942 <SCSI_DecodeSCSICommand+0x40>
     940:	8b c0       	rjmp	.+278    	; 0xa58 <SCSI_DecodeSCSICommand+0x156>
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     942:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <SenseData+0x2>
     946:	80 7f       	andi	r24, 0xF0	; 240
     948:	85 60       	ori	r24, 0x05	; 5
     94a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <SenseData+0x2>
     94e:	80 e2       	ldi	r24, 0x20	; 32
     950:	56 c0       	rjmp	.+172    	; 0x9fe <SCSI_DecodeSCSICommand+0xfc>
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     952:	8a 31       	cpi	r24, 0x1A	; 26
     954:	09 f4       	brne	.+2      	; 0x958 <SCSI_DecodeSCSICommand+0x56>
     956:	d8 c0       	rjmp	.+432    	; 0xb08 <SCSI_DecodeSCSICommand+0x206>
     958:	8b 31       	cpi	r24, 0x1B	; 27
     95a:	99 f7       	brne	.-26     	; 0x942 <SCSI_DecodeSCSICommand+0x40>
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
     95c:	f8 01       	movw	r30, r16
     95e:	14 8a       	std	Z+20, r1	; 0x14
     960:	15 8a       	std	Z+21, r1	; 0x15
     962:	16 8a       	std	Z+22, r1	; 0x16
     964:	17 8a       	std	Z+23, r1	; 0x17
			break;
     966:	c3 c0       	rjmp	.+390    	; 0xaee <SCSI_DecodeSCSICommand+0x1ec>
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     968:	88 32       	cpi	r24, 0x28	; 40
     96a:	09 f4       	brne	.+2      	; 0x96e <SCSI_DecodeSCSICommand+0x6c>
     96c:	cb c0       	rjmp	.+406    	; 0xb04 <SCSI_DecodeSCSICommand+0x202>
     96e:	80 f5       	brcc	.+96     	; 0x9d0 <SCSI_DecodeSCSICommand+0xce>
     970:	8e 31       	cpi	r24, 0x1E	; 30
     972:	a1 f3       	breq	.-24     	; 0x95c <SCSI_DecodeSCSICommand+0x5a>
     974:	85 32       	cpi	r24, 0x25	; 37
     976:	29 f7       	brne	.-54     	; 0x942 <SCSI_DecodeSCSICommand+0x40>
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	9f e7       	ldi	r25, 0x7F	; 127
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	8d 83       	std	Y+5, r24	; 0x05
     982:	9e 83       	std	Y+6, r25	; 0x06
     984:	af 83       	std	Y+7, r26	; 0x07
     986:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	a0 e0       	ldi	r26, 0x00	; 0
     98e:	b0 e0       	ldi	r27, 0x00	; 0
     990:	89 83       	std	Y+1, r24	; 0x01
     992:	9a 83       	std	Y+2, r25	; 0x02
     994:	ab 83       	std	Y+3, r26	; 0x03
     996:	bc 83       	std	Y+4, r27	; 0x04
	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
     998:	40 e0       	ldi	r20, 0x00	; 0
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	64 e0       	ldi	r22, 0x04	; 4
     99e:	70 e0       	ldi	r23, 0x00	; 0
     9a0:	ce 01       	movw	r24, r28
     9a2:	05 96       	adiw	r24, 0x05	; 5
     9a4:	57 d1       	rcall	.+686    	; 0xc54 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 e0       	ldi	r21, 0x00	; 0
     9aa:	64 e0       	ldi	r22, 0x04	; 4
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	ce 01       	movw	r24, r28
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	50 d1       	rcall	.+672    	; 0xc54 <Endpoint_Write_Stream_BE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9b8:	8e 77       	andi	r24, 0x7E	; 126
     9ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
     9be:	f8 01       	movw	r30, r16
     9c0:	84 89       	ldd	r24, Z+20	; 0x14
     9c2:	95 89       	ldd	r25, Z+21	; 0x15
     9c4:	a6 89       	ldd	r26, Z+22	; 0x16
     9c6:	b7 89       	ldd	r27, Z+23	; 0x17
     9c8:	08 97       	sbiw	r24, 0x08	; 8
     9ca:	a1 09       	sbc	r26, r1
     9cc:	b1 09       	sbc	r27, r1
     9ce:	3f c0       	rjmp	.+126    	; 0xa4e <SCSI_DecodeSCSICommand+0x14c>
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
     9d0:	8a 32       	cpi	r24, 0x2A	; 42
     9d2:	09 f4       	brne	.+2      	; 0x9d6 <SCSI_DecodeSCSICommand+0xd4>
     9d4:	87 c0       	rjmp	.+270    	; 0xae4 <SCSI_DecodeSCSICommand+0x1e2>
     9d6:	8f 32       	cpi	r24, 0x2F	; 47
     9d8:	09 f4       	brne	.+2      	; 0x9dc <SCSI_DecodeSCSICommand+0xda>
     9da:	c0 cf       	rjmp	.-128    	; 0x95c <SCSI_DecodeSCSICommand+0x5a>
     9dc:	b2 cf       	rjmp	.-156    	; 0x942 <SCSI_DecodeSCSICommand+0x40>
     9de:	f8 01       	movw	r30, r16
     9e0:	e7 8c       	ldd	r14, Z+31	; 0x1f
     9e2:	f6 8c       	ldd	r15, Z+30	; 0x1e
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     9e4:	84 8d       	ldd	r24, Z+28	; 0x1c
     9e6:	83 70       	andi	r24, 0x03	; 3
     9e8:	19 f4       	brne	.+6      	; 0x9f0 <SCSI_DecodeSCSICommand+0xee>
     9ea:	85 8d       	ldd	r24, Z+29	; 0x1d
     9ec:	88 23       	and	r24, r24
     9ee:	69 f0       	breq	.+26     	; 0xa0a <SCSI_DecodeSCSICommand+0x108>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9f0:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <SenseData+0x2>
     9f4:	80 7f       	andi	r24, 0xF0	; 240
     9f6:	85 60       	ori	r24, 0x05	; 5
     9f8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <SenseData+0x2>
     9fc:	84 e2       	ldi	r24, 0x24	; 36
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9fe:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <SenseData+0xc>
     a02:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <SenseData+0xd>
	return false;
     a06:	80 e0       	ldi	r24, 0x00	; 0
			break;
     a08:	5e c0       	rjmp	.+188    	; 0xac6 <SCSI_DecodeSCSICommand+0x1c4>
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
     a0a:	67 01       	movw	r12, r14
     a0c:	f5 e2       	ldi	r31, 0x25	; 37
     a0e:	ef 16       	cp	r14, r31
     a10:	f1 04       	cpc	r15, r1
     a12:	18 f0       	brcs	.+6      	; 0xa1a <SCSI_DecodeSCSICommand+0x118>
     a14:	94 e2       	ldi	r25, 0x24	; 36
     a16:	c9 2e       	mov	r12, r25
     a18:	d1 2c       	mov	r13, r1
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	50 e0       	ldi	r21, 0x00	; 0
     a1e:	b6 01       	movw	r22, r12
     a20:	8b e4       	ldi	r24, 0x4B	; 75
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	ca d0       	rcall	.+404    	; 0xbba <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	c7 01       	movw	r24, r14
     a2c:	8c 19       	sub	r24, r12
     a2e:	9d 09       	sbc	r25, r13
     a30:	81 d0       	rcall	.+258    	; 0xb34 <Endpoint_Null_Stream>
     a32:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a36:	8e 77       	andi	r24, 0x7E	; 126
     a38:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     a3c:	f8 01       	movw	r30, r16
     a3e:	84 89       	ldd	r24, Z+20	; 0x14
     a40:	95 89       	ldd	r25, Z+21	; 0x15
     a42:	a6 89       	ldd	r26, Z+22	; 0x16
     a44:	b7 89       	ldd	r27, Z+23	; 0x17
     a46:	8c 19       	sub	r24, r12
     a48:	9d 09       	sbc	r25, r13
     a4a:	a1 09       	sbc	r26, r1
     a4c:	b1 09       	sbc	r27, r1
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     a4e:	84 8b       	std	Z+20, r24	; 0x14
     a50:	95 8b       	std	Z+21, r25	; 0x15
     a52:	a6 8b       	std	Z+22, r26	; 0x16
     a54:	b7 8b       	std	Z+23, r27	; 0x17
			break;
     a56:	4b c0       	rjmp	.+150    	; 0xaee <SCSI_DecodeSCSICommand+0x1ec>
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
     a58:	f8 01       	movw	r30, r16
     a5a:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
     a5c:	ef 2c       	mov	r14, r15
     a5e:	f2 e1       	ldi	r31, 0x12	; 18
     a60:	ff 15       	cp	r31, r15
     a62:	10 f4       	brcc	.+4      	; 0xa68 <SCSI_DecodeSCSICommand+0x166>
     a64:	82 e1       	ldi	r24, 0x12	; 18
     a66:	e8 2e       	mov	r14, r24
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
     a68:	ce 2c       	mov	r12, r14
     a6a:	d1 2c       	mov	r13, r1
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	b6 01       	movw	r22, r12
     a72:	89 e3       	ldi	r24, 0x39	; 57
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	a1 d0       	rcall	.+322    	; 0xbba <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
     a78:	8f 2d       	mov	r24, r15
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	70 e0       	ldi	r23, 0x00	; 0
     a80:	8c 19       	sub	r24, r12
     a82:	9d 09       	sbc	r25, r13
     a84:	57 d0       	rcall	.+174    	; 0xb34 <Endpoint_Null_Stream>
     a86:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a8a:	8e 77       	andi	r24, 0x7E	; 126
     a8c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
     a90:	f8 01       	movw	r30, r16
     a92:	84 89       	ldd	r24, Z+20	; 0x14
     a94:	95 89       	ldd	r25, Z+21	; 0x15
     a96:	a6 89       	ldd	r26, Z+22	; 0x16
     a98:	b7 89       	ldd	r27, Z+23	; 0x17
     a9a:	8e 19       	sub	r24, r14
     a9c:	91 09       	sbc	r25, r1
     a9e:	a1 09       	sbc	r26, r1
     aa0:	b1 09       	sbc	r27, r1
     aa2:	d5 cf       	rjmp	.-86     	; 0xa4e <SCSI_DecodeSCSICommand+0x14c>
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
     aa4:	f8 01       	movw	r30, r16
     aa6:	84 8d       	ldd	r24, Z+28	; 0x1c
     aa8:	82 ff       	sbrs	r24, 2
     aaa:	a2 cf       	rjmp	.-188    	; 0x9f0 <SCSI_DecodeSCSICommand+0xee>
	if (!(DataflashManager_CheckDataflashOperation()))
     aac:	be de       	rcall	.-644    	; 0x82a <DataflashManager_CheckDataflashOperation>
     aae:	81 11       	cpse	r24, r1
     ab0:	55 cf       	rjmp	.-342    	; 0x95c <SCSI_DecodeSCSICommand+0x5a>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     ab2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <SenseData+0x2>
     ab6:	90 7f       	andi	r25, 0xF0	; 240
     ab8:	94 60       	ori	r25, 0x04	; 4
     aba:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <SenseData+0x2>
     abe:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <SenseData+0xc>
     ac2:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <SenseData+0xd>
}
     ac6:	28 96       	adiw	r28, 0x08	; 8
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	de bf       	out	0x3e, r29	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	cd bf       	out	0x3d, r28	; 61
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	df 90       	pop	r13
     ae0:	cf 90       	pop	r12
     ae2:	08 95       	ret
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
     ae4:	60 e0       	ldi	r22, 0x00	; 0
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     ae6:	c8 01       	movw	r24, r16
     ae8:	c9 de       	rcall	.-622    	; 0x87c <SCSI_Command_ReadWrite_10>
	if (CommandSuccess)
     aea:	88 23       	and	r24, r24
     aec:	61 f3       	breq	.-40     	; 0xac6 <SCSI_DecodeSCSICommand+0x1c4>
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     aee:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <SenseData+0x2>
     af2:	80 7f       	andi	r24, 0xF0	; 240
     af4:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <SenseData+0x2>
     af8:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <SenseData+0xc>
     afc:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <SenseData+0xd>
		return true;
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	e1 cf       	rjmp	.-62     	; 0xac6 <SCSI_DecodeSCSICommand+0x1c4>
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
     b04:	61 e0       	ldi	r22, 0x01	; 1
     b06:	ef cf       	rjmp	.-34     	; 0xae6 <SCSI_DecodeSCSICommand+0x1e4>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b08:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     b0c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     b10:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     b14:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b1c:	8e 77       	andi	r24, 0x7E	; 126
     b1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
     b22:	f8 01       	movw	r30, r16
     b24:	84 89       	ldd	r24, Z+20	; 0x14
     b26:	95 89       	ldd	r25, Z+21	; 0x15
     b28:	a6 89       	ldd	r26, Z+22	; 0x16
     b2a:	b7 89       	ldd	r27, Z+23	; 0x17
     b2c:	04 97       	sbiw	r24, 0x04	; 4
     b2e:	a1 09       	sbc	r26, r1
     b30:	b1 09       	sbc	r27, r1
     b32:	8d cf       	rjmp	.-230    	; 0xa4e <SCSI_DecodeSCSICommand+0x14c>

00000b34 <Endpoint_Null_Stream>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b34:	cf 92       	push	r12
     b36:	df 92       	push	r13
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	ec 01       	movw	r28, r24
     b44:	8b 01       	movw	r16, r22
     b46:	6d d2       	rcall	.+1242   	; 0x1022 <Endpoint_WaitUntilReady>
     b48:	f8 2e       	mov	r15, r24
     b4a:	81 11       	cpse	r24, r1
     b4c:	21 c0       	rjmp	.+66     	; 0xb90 <Endpoint_Null_Stream+0x5c>
     b4e:	01 15       	cp	r16, r1
     b50:	11 05       	cpc	r17, r1
     b52:	29 f0       	breq	.+10     	; 0xb5e <Endpoint_Null_Stream+0x2a>
     b54:	f8 01       	movw	r30, r16
     b56:	80 81       	ld	r24, Z
     b58:	91 81       	ldd	r25, Z+1	; 0x01
     b5a:	c8 1b       	sub	r28, r24
     b5c:	d9 0b       	sbc	r29, r25
     b5e:	c1 2c       	mov	r12, r1
     b60:	d1 2c       	mov	r13, r1
     b62:	20 97       	sbiw	r28, 0x00	; 0
     b64:	a9 f0       	breq	.+42     	; 0xb90 <Endpoint_Null_Stream+0x5c>
     b66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b6a:	85 fd       	sbrc	r24, 5
     b6c:	1f c0       	rjmp	.+62     	; 0xbac <Endpoint_Null_Stream+0x78>
     b6e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b72:	8e 77       	andi	r24, 0x7E	; 126
     b74:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b78:	01 15       	cp	r16, r1
     b7a:	11 05       	cpc	r17, r1
     b7c:	91 f0       	breq	.+36     	; 0xba2 <Endpoint_Null_Stream+0x6e>
     b7e:	f8 01       	movw	r30, r16
     b80:	80 81       	ld	r24, Z
     b82:	91 81       	ldd	r25, Z+1	; 0x01
     b84:	c8 0e       	add	r12, r24
     b86:	d9 1e       	adc	r13, r25
     b88:	d1 82       	std	Z+1, r13	; 0x01
     b8a:	c0 82       	st	Z, r12
     b8c:	85 e0       	ldi	r24, 0x05	; 5
     b8e:	f8 2e       	mov	r15, r24
     b90:	8f 2d       	mov	r24, r15
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	08 95       	ret
     ba2:	3f d2       	rcall	.+1150   	; 0x1022 <Endpoint_WaitUntilReady>
     ba4:	88 23       	and	r24, r24
     ba6:	e9 f2       	breq	.-70     	; 0xb62 <Endpoint_Null_Stream+0x2e>
     ba8:	f8 2e       	mov	r15, r24
     baa:	f2 cf       	rjmp	.-28     	; 0xb90 <Endpoint_Null_Stream+0x5c>
     bac:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     bb0:	21 97       	sbiw	r28, 0x01	; 1
     bb2:	ff ef       	ldi	r31, 0xFF	; 255
     bb4:	cf 1a       	sub	r12, r31
     bb6:	df 0a       	sbc	r13, r31
     bb8:	d4 cf       	rjmp	.-88     	; 0xb62 <Endpoint_Null_Stream+0x2e>

00000bba <Endpoint_Write_Stream_LE>:
     bba:	af 92       	push	r10
     bbc:	bf 92       	push	r11
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	ec 01       	movw	r28, r24
     bce:	8b 01       	movw	r16, r22
     bd0:	7a 01       	movw	r14, r20
     bd2:	27 d2       	rcall	.+1102   	; 0x1022 <Endpoint_WaitUntilReady>
     bd4:	d8 2e       	mov	r13, r24
     bd6:	81 11       	cpse	r24, r1
     bd8:	24 c0       	rjmp	.+72     	; 0xc22 <Endpoint_Write_Stream_LE+0x68>
     bda:	e1 14       	cp	r14, r1
     bdc:	f1 04       	cpc	r15, r1
     bde:	39 f0       	breq	.+14     	; 0xbee <Endpoint_Write_Stream_LE+0x34>
     be0:	f7 01       	movw	r30, r14
     be2:	80 81       	ld	r24, Z
     be4:	91 81       	ldd	r25, Z+1	; 0x01
     be6:	08 1b       	sub	r16, r24
     be8:	19 0b       	sbc	r17, r25
     bea:	c8 0f       	add	r28, r24
     bec:	d9 1f       	adc	r29, r25
     bee:	a1 2c       	mov	r10, r1
     bf0:	b1 2c       	mov	r11, r1
     bf2:	01 15       	cp	r16, r1
     bf4:	11 05       	cpc	r17, r1
     bf6:	a9 f0       	breq	.+42     	; 0xc22 <Endpoint_Write_Stream_LE+0x68>
     bf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     bfc:	85 fd       	sbrc	r24, 5
     bfe:	21 c0       	rjmp	.+66     	; 0xc42 <Endpoint_Write_Stream_LE+0x88>
     c00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c04:	8e 77       	andi	r24, 0x7E	; 126
     c06:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c0a:	e1 14       	cp	r14, r1
     c0c:	f1 04       	cpc	r15, r1
     c0e:	a1 f0       	breq	.+40     	; 0xc38 <Endpoint_Write_Stream_LE+0x7e>
     c10:	f7 01       	movw	r30, r14
     c12:	80 81       	ld	r24, Z
     c14:	91 81       	ldd	r25, Z+1	; 0x01
     c16:	a8 0e       	add	r10, r24
     c18:	b9 1e       	adc	r11, r25
     c1a:	b1 82       	std	Z+1, r11	; 0x01
     c1c:	a0 82       	st	Z, r10
     c1e:	85 e0       	ldi	r24, 0x05	; 5
     c20:	d8 2e       	mov	r13, r24
     c22:	8d 2d       	mov	r24, r13
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	bf 90       	pop	r11
     c34:	af 90       	pop	r10
     c36:	08 95       	ret
     c38:	f4 d1       	rcall	.+1000   	; 0x1022 <Endpoint_WaitUntilReady>
     c3a:	88 23       	and	r24, r24
     c3c:	d1 f2       	breq	.-76     	; 0xbf2 <Endpoint_Write_Stream_LE+0x38>
     c3e:	d8 2e       	mov	r13, r24
     c40:	f0 cf       	rjmp	.-32     	; 0xc22 <Endpoint_Write_Stream_LE+0x68>
     c42:	89 91       	ld	r24, Y+
     c44:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     c48:	01 50       	subi	r16, 0x01	; 1
     c4a:	11 09       	sbc	r17, r1
     c4c:	ff ef       	ldi	r31, 0xFF	; 255
     c4e:	af 1a       	sub	r10, r31
     c50:	bf 0a       	sbc	r11, r31
     c52:	cf cf       	rjmp	.-98     	; 0xbf2 <Endpoint_Write_Stream_LE+0x38>

00000c54 <Endpoint_Write_Stream_BE>:
     c54:	af 92       	push	r10
     c56:	bf 92       	push	r11
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	ec 01       	movw	r28, r24
     c68:	8b 01       	movw	r16, r22
     c6a:	7a 01       	movw	r14, r20
     c6c:	da d1       	rcall	.+948    	; 0x1022 <Endpoint_WaitUntilReady>
     c6e:	d8 2e       	mov	r13, r24
     c70:	81 11       	cpse	r24, r1
     c72:	28 c0       	rjmp	.+80     	; 0xcc4 <Endpoint_Write_Stream_BE+0x70>
     c74:	c8 01       	movw	r24, r16
     c76:	01 97       	sbiw	r24, 0x01	; 1
     c78:	c8 0f       	add	r28, r24
     c7a:	d9 1f       	adc	r29, r25
     c7c:	e1 14       	cp	r14, r1
     c7e:	f1 04       	cpc	r15, r1
     c80:	39 f0       	breq	.+14     	; 0xc90 <Endpoint_Write_Stream_BE+0x3c>
     c82:	f7 01       	movw	r30, r14
     c84:	80 81       	ld	r24, Z
     c86:	91 81       	ldd	r25, Z+1	; 0x01
     c88:	08 1b       	sub	r16, r24
     c8a:	19 0b       	sbc	r17, r25
     c8c:	c8 1b       	sub	r28, r24
     c8e:	d9 0b       	sbc	r29, r25
     c90:	a1 2c       	mov	r10, r1
     c92:	b1 2c       	mov	r11, r1
     c94:	01 15       	cp	r16, r1
     c96:	11 05       	cpc	r17, r1
     c98:	a9 f0       	breq	.+42     	; 0xcc4 <Endpoint_Write_Stream_BE+0x70>
     c9a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     c9e:	85 fd       	sbrc	r24, 5
     ca0:	21 c0       	rjmp	.+66     	; 0xce4 <Endpoint_Write_Stream_BE+0x90>
     ca2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ca6:	8e 77       	andi	r24, 0x7E	; 126
     ca8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     cac:	e1 14       	cp	r14, r1
     cae:	f1 04       	cpc	r15, r1
     cb0:	a1 f0       	breq	.+40     	; 0xcda <Endpoint_Write_Stream_BE+0x86>
     cb2:	f7 01       	movw	r30, r14
     cb4:	80 81       	ld	r24, Z
     cb6:	91 81       	ldd	r25, Z+1	; 0x01
     cb8:	a8 0e       	add	r10, r24
     cba:	b9 1e       	adc	r11, r25
     cbc:	b1 82       	std	Z+1, r11	; 0x01
     cbe:	a0 82       	st	Z, r10
     cc0:	85 e0       	ldi	r24, 0x05	; 5
     cc2:	d8 2e       	mov	r13, r24
     cc4:	8d 2d       	mov	r24, r13
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	ff 90       	pop	r15
     cd0:	ef 90       	pop	r14
     cd2:	df 90       	pop	r13
     cd4:	bf 90       	pop	r11
     cd6:	af 90       	pop	r10
     cd8:	08 95       	ret
     cda:	a3 d1       	rcall	.+838    	; 0x1022 <Endpoint_WaitUntilReady>
     cdc:	88 23       	and	r24, r24
     cde:	d1 f2       	breq	.-76     	; 0xc94 <Endpoint_Write_Stream_BE+0x40>
     ce0:	d8 2e       	mov	r13, r24
     ce2:	f0 cf       	rjmp	.-32     	; 0xcc4 <Endpoint_Write_Stream_BE+0x70>
     ce4:	88 81       	ld	r24, Y
     ce6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     cea:	21 97       	sbiw	r28, 0x01	; 1
     cec:	01 50       	subi	r16, 0x01	; 1
     cee:	11 09       	sbc	r17, r1
     cf0:	ff ef       	ldi	r31, 0xFF	; 255
     cf2:	af 1a       	sub	r10, r31
     cf4:	bf 0a       	sbc	r11, r31
     cf6:	ce cf       	rjmp	.-100    	; 0xc94 <Endpoint_Write_Stream_BE+0x40>

00000cf8 <Endpoint_Read_Stream_LE>:
     cf8:	af 92       	push	r10
     cfa:	bf 92       	push	r11
     cfc:	df 92       	push	r13
     cfe:	ef 92       	push	r14
     d00:	ff 92       	push	r15
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
     d0a:	ec 01       	movw	r28, r24
     d0c:	8b 01       	movw	r16, r22
     d0e:	7a 01       	movw	r14, r20
     d10:	88 d1       	rcall	.+784    	; 0x1022 <Endpoint_WaitUntilReady>
     d12:	d8 2e       	mov	r13, r24
     d14:	81 11       	cpse	r24, r1
     d16:	24 c0       	rjmp	.+72     	; 0xd60 <Endpoint_Read_Stream_LE+0x68>
     d18:	e1 14       	cp	r14, r1
     d1a:	f1 04       	cpc	r15, r1
     d1c:	39 f0       	breq	.+14     	; 0xd2c <Endpoint_Read_Stream_LE+0x34>
     d1e:	f7 01       	movw	r30, r14
     d20:	80 81       	ld	r24, Z
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	08 1b       	sub	r16, r24
     d26:	19 0b       	sbc	r17, r25
     d28:	c8 0f       	add	r28, r24
     d2a:	d9 1f       	adc	r29, r25
     d2c:	a1 2c       	mov	r10, r1
     d2e:	b1 2c       	mov	r11, r1
     d30:	01 15       	cp	r16, r1
     d32:	11 05       	cpc	r17, r1
     d34:	a9 f0       	breq	.+42     	; 0xd60 <Endpoint_Read_Stream_LE+0x68>
     d36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d3a:	85 fd       	sbrc	r24, 5
     d3c:	21 c0       	rjmp	.+66     	; 0xd80 <Endpoint_Read_Stream_LE+0x88>
     d3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d42:	8b 77       	andi	r24, 0x7B	; 123
     d44:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     d48:	e1 14       	cp	r14, r1
     d4a:	f1 04       	cpc	r15, r1
     d4c:	a1 f0       	breq	.+40     	; 0xd76 <Endpoint_Read_Stream_LE+0x7e>
     d4e:	f7 01       	movw	r30, r14
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	a8 0e       	add	r10, r24
     d56:	b9 1e       	adc	r11, r25
     d58:	b1 82       	std	Z+1, r11	; 0x01
     d5a:	a0 82       	st	Z, r10
     d5c:	85 e0       	ldi	r24, 0x05	; 5
     d5e:	d8 2e       	mov	r13, r24
     d60:	8d 2d       	mov	r24, r13
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	df 90       	pop	r13
     d70:	bf 90       	pop	r11
     d72:	af 90       	pop	r10
     d74:	08 95       	ret
     d76:	55 d1       	rcall	.+682    	; 0x1022 <Endpoint_WaitUntilReady>
     d78:	88 23       	and	r24, r24
     d7a:	d1 f2       	breq	.-76     	; 0xd30 <Endpoint_Read_Stream_LE+0x38>
     d7c:	d8 2e       	mov	r13, r24
     d7e:	f0 cf       	rjmp	.-32     	; 0xd60 <Endpoint_Read_Stream_LE+0x68>
     d80:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     d84:	89 93       	st	Y+, r24
     d86:	01 50       	subi	r16, 0x01	; 1
     d88:	11 09       	sbc	r17, r1
     d8a:	ff ef       	ldi	r31, 0xFF	; 255
     d8c:	af 1a       	sub	r10, r31
     d8e:	bf 0a       	sbc	r11, r31
     d90:	cf cf       	rjmp	.-98     	; 0xd30 <Endpoint_Read_Stream_LE+0x38>

00000d92 <Endpoint_Write_Control_Stream_LE>:
     d92:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <USB_ControlRequest+0x6>
     d96:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <USB_ControlRequest+0x7>
     d9a:	26 17       	cp	r18, r22
     d9c:	37 07       	cpc	r19, r23
     d9e:	a8 f0       	brcs	.+42     	; 0xdca <Endpoint_Write_Control_Stream_LE+0x38>
     da0:	61 15       	cp	r22, r1
     da2:	71 05       	cpc	r23, r1
     da4:	29 f4       	brne	.+10     	; 0xdb0 <Endpoint_Write_Control_Stream_LE+0x1e>
     da6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     daa:	2e 77       	andi	r18, 0x7E	; 126
     dac:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     db0:	fc 01       	movw	r30, r24
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	61 15       	cp	r22, r1
     db6:	71 05       	cpc	r23, r1
     db8:	51 f4       	brne	.+20     	; 0xdce <Endpoint_Write_Control_Stream_LE+0x3c>
     dba:	21 11       	cpse	r18, r1
     dbc:	08 c0       	rjmp	.+16     	; 0xdce <Endpoint_Write_Control_Stream_LE+0x3c>
     dbe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dc2:	82 ff       	sbrs	r24, 2
     dc4:	31 c0       	rjmp	.+98     	; 0xe28 <Endpoint_Write_Control_Stream_LE+0x96>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	08 95       	ret
     dca:	b9 01       	movw	r22, r18
     dcc:	f1 cf       	rjmp	.-30     	; 0xdb0 <Endpoint_Write_Control_Stream_LE+0x1e>
     dce:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USB_DeviceState>
     dd2:	88 23       	and	r24, r24
     dd4:	a9 f1       	breq	.+106    	; 0xe40 <Endpoint_Write_Control_Stream_LE+0xae>
     dd6:	85 30       	cpi	r24, 0x05	; 5
     dd8:	a9 f1       	breq	.+106    	; 0xe44 <Endpoint_Write_Control_Stream_LE+0xb2>
     dda:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dde:	83 fd       	sbrc	r24, 3
     de0:	2d c0       	rjmp	.+90     	; 0xe3c <Endpoint_Write_Control_Stream_LE+0xaa>
     de2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     de6:	82 fd       	sbrc	r24, 2
     de8:	ea cf       	rjmp	.-44     	; 0xdbe <Endpoint_Write_Control_Stream_LE+0x2c>
     dea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     dee:	80 ff       	sbrs	r24, 0
     df0:	e1 cf       	rjmp	.-62     	; 0xdb4 <Endpoint_Write_Control_Stream_LE+0x22>
     df2:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     df6:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     dfa:	61 15       	cp	r22, r1
     dfc:	71 05       	cpc	r23, r1
     dfe:	19 f0       	breq	.+6      	; 0xe06 <Endpoint_Write_Control_Stream_LE+0x74>
     e00:	88 30       	cpi	r24, 0x08	; 8
     e02:	91 05       	cpc	r25, r1
     e04:	50 f0       	brcs	.+20     	; 0xe1a <Endpoint_Write_Control_Stream_LE+0x88>
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	08 97       	sbiw	r24, 0x08	; 8
     e0a:	09 f0       	breq	.+2      	; 0xe0e <Endpoint_Write_Control_Stream_LE+0x7c>
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e12:	8e 77       	andi	r24, 0x7E	; 126
     e14:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e18:	cd cf       	rjmp	.-102    	; 0xdb4 <Endpoint_Write_Control_Stream_LE+0x22>
     e1a:	21 91       	ld	r18, Z+
     e1c:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     e20:	61 50       	subi	r22, 0x01	; 1
     e22:	71 09       	sbc	r23, r1
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	e9 cf       	rjmp	.-46     	; 0xdfa <Endpoint_Write_Control_Stream_LE+0x68>
     e28:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USB_DeviceState>
     e2c:	88 23       	and	r24, r24
     e2e:	41 f0       	breq	.+16     	; 0xe40 <Endpoint_Write_Control_Stream_LE+0xae>
     e30:	85 30       	cpi	r24, 0x05	; 5
     e32:	41 f0       	breq	.+16     	; 0xe44 <Endpoint_Write_Control_Stream_LE+0xb2>
     e34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e38:	83 ff       	sbrs	r24, 3
     e3a:	c1 cf       	rjmp	.-126    	; 0xdbe <Endpoint_Write_Control_Stream_LE+0x2c>
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	08 95       	ret
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	08 95       	ret
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	08 95       	ret

00000e48 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     e48:	20 91 7b 01 	lds	r18, 0x017B	; 0x80017b <USB_ControlRequest+0x6>
     e4c:	30 91 7c 01 	lds	r19, 0x017C	; 0x80017c <USB_ControlRequest+0x7>
     e50:	26 17       	cp	r18, r22
     e52:	37 07       	cpc	r19, r23
     e54:	a8 f0       	brcs	.+42     	; 0xe80 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     e56:	61 15       	cp	r22, r1
     e58:	71 05       	cpc	r23, r1
     e5a:	29 f4       	brne	.+10     	; 0xe66 <Endpoint_Write_Control_PStream_LE+0x1e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e5c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e60:	2e 77       	andi	r18, 0x7E	; 126
     e62:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     e66:	fc 01       	movw	r30, r24
     e68:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     e6a:	61 15       	cp	r22, r1
     e6c:	71 05       	cpc	r23, r1
     e6e:	51 f4       	brne	.+20     	; 0xe84 <Endpoint_Write_Control_PStream_LE+0x3c>
     e70:	21 11       	cpse	r18, r1
     e72:	08 c0       	rjmp	.+16     	; 0xe84 <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e74:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     e78:	82 ff       	sbrs	r24, 2
     e7a:	32 c0       	rjmp	.+100    	; 0xee0 <Endpoint_Write_Control_PStream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	08 95       	ret
     e80:	b9 01       	movw	r22, r18
     e82:	f1 cf       	rjmp	.-30     	; 0xe66 <Endpoint_Write_Control_PStream_LE+0x1e>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     e84:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     e88:	88 23       	and	r24, r24
     e8a:	b1 f1       	breq	.+108    	; 0xef8 <Endpoint_Write_Control_PStream_LE+0xb0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     e8c:	85 30       	cpi	r24, 0x05	; 5
     e8e:	b1 f1       	breq	.+108    	; 0xefc <Endpoint_Write_Control_PStream_LE+0xb4>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     e94:	83 fd       	sbrc	r24, 3
     e96:	2e c0       	rjmp	.+92     	; 0xef4 <Endpoint_Write_Control_PStream_LE+0xac>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e98:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
     e9c:	82 fd       	sbrc	r24, 2
     e9e:	ea cf       	rjmp	.-44     	; 0xe74 <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ea0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
     ea4:	80 ff       	sbrs	r24, 0
     ea6:	e1 cf       	rjmp	.-62     	; 0xe6a <Endpoint_Write_Control_PStream_LE+0x22>
					return UEBCX;
     ea8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     eac:	90 91 f3 00 	lds	r25, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     eb0:	61 15       	cp	r22, r1
     eb2:	71 05       	cpc	r23, r1
     eb4:	19 f0       	breq	.+6      	; 0xebc <Endpoint_Write_Control_PStream_LE+0x74>
     eb6:	88 30       	cpi	r24, 0x08	; 8
     eb8:	91 05       	cpc	r25, r1
     eba:	50 f0       	brcs	.+20     	; 0xed0 <Endpoint_Write_Control_PStream_LE+0x88>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     ebc:	21 e0       	ldi	r18, 0x01	; 1
     ebe:	08 97       	sbiw	r24, 0x08	; 8
     ec0:	09 f0       	breq	.+2      	; 0xec4 <Endpoint_Write_Control_PStream_LE+0x7c>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ec4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ec8:	8e 77       	andi	r24, 0x7E	; 126
     eca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ece:	cd cf       	rjmp	.-102    	; 0xe6a <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     ed0:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     ed2:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     ed6:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     ed8:	61 50       	subi	r22, 0x01	; 1
     eda:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	e8 cf       	rjmp	.-48     	; 0xeb0 <Endpoint_Write_Control_PStream_LE+0x68>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ee0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ee4:	88 23       	and	r24, r24
     ee6:	41 f0       	breq	.+16     	; 0xef8 <Endpoint_Write_Control_PStream_LE+0xb0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ee8:	85 30       	cpi	r24, 0x05	; 5
     eea:	41 f0       	breq	.+16     	; 0xefc <Endpoint_Write_Control_PStream_LE+0xb4>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     eec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     ef0:	83 ff       	sbrs	r24, 3
     ef2:	c0 cf       	rjmp	.-128    	; 0xe74 <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     ef4:	81 e0       	ldi	r24, 0x01	; 1
}
     ef6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     ef8:	82 e0       	ldi	r24, 0x02	; 2
     efa:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	08 95       	ret

00000f00 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     f00:	98 2f       	mov	r25, r24
     f02:	97 30       	cpi	r25, 0x07	; 7
     f04:	28 f0       	brcs	.+10     	; 0xf10 <Endpoint_ConfigureEndpoint_Prv+0x10>
     f06:	8f 70       	andi	r24, 0x0F	; 15
     f08:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	08 95       	ret
     f10:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     f14:	98 17       	cp	r25, r24
     f16:	51 f0       	breq	.+20     	; 0xf2c <Endpoint_ConfigureEndpoint_Prv+0x2c>
     f18:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     f1c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     f20:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     f24:	21 fd       	sbrc	r18, 1
     f26:	06 c0       	rjmp	.+12     	; 0xf34 <Endpoint_ConfigureEndpoint_Prv+0x34>
     f28:	9f 5f       	subi	r25, 0xFF	; 255
     f2a:	eb cf       	rjmp	.-42     	; 0xf02 <Endpoint_ConfigureEndpoint_Prv+0x2>
     f2c:	24 2f       	mov	r18, r20
     f2e:	76 2f       	mov	r23, r22
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	f8 cf       	rjmp	.-16     	; 0xf24 <Endpoint_ConfigureEndpoint_Prv+0x24>
     f34:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     f38:	3e 7f       	andi	r19, 0xFE	; 254
     f3a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     f3e:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     f42:	3d 7f       	andi	r19, 0xFD	; 253
     f44:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     f48:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     f4c:	31 60       	ori	r19, 0x01	; 1
     f4e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     f52:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     f56:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     f5a:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
     f5e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     f62:	27 fd       	sbrc	r18, 7
     f64:	e1 cf       	rjmp	.-62     	; 0xf28 <Endpoint_ConfigureEndpoint_Prv+0x28>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	08 95       	ret

00000f6a <Endpoint_ConfigureEndpointTable>:
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	06 2f       	mov	r16, r22
     f74:	ec 01       	movw	r28, r24
     f76:	10 e0       	ldi	r17, 0x00	; 0
     f78:	10 13       	cpse	r17, r16
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <Endpoint_ConfigureEndpointTable+0x16>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	0f c0       	rjmp	.+30     	; 0xf9e <Endpoint_ConfigureEndpointTable+0x34>
     f80:	98 81       	ld	r25, Y
     f82:	91 11       	cpse	r25, r1
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <Endpoint_ConfigureEndpointTable+0x22>
     f86:	1f 5f       	subi	r17, 0xFF	; 255
     f88:	25 96       	adiw	r28, 0x05	; 5
     f8a:	f6 cf       	rjmp	.-20     	; 0xf78 <Endpoint_ConfigureEndpointTable+0xe>
     f8c:	2c 81       	ldd	r18, Y+4	; 0x04
     f8e:	a9 81       	ldd	r26, Y+1	; 0x01
     f90:	ba 81       	ldd	r27, Y+2	; 0x02
     f92:	6b 81       	ldd	r22, Y+3	; 0x03
     f94:	89 2f       	mov	r24, r25
     f96:	8f 70       	andi	r24, 0x0F	; 15
     f98:	87 30       	cpi	r24, 0x07	; 7
     f9a:	30 f0       	brcs	.+12     	; 0xfa8 <Endpoint_ConfigureEndpointTable+0x3e>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	08 95       	ret
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	b0 f4       	brcc	.+44     	; 0xfd8 <Endpoint_ConfigureEndpointTable+0x6e>
     fac:	42 e0       	ldi	r20, 0x02	; 2
     fae:	e8 e0       	ldi	r30, 0x08	; 8
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	ea 17       	cp	r30, r26
     fb6:	fb 07       	cpc	r31, r27
     fb8:	88 f0       	brcs	.+34     	; 0xfdc <Endpoint_ConfigureEndpointTable+0x72>
     fba:	22 95       	swap	r18
     fbc:	20 7f       	andi	r18, 0xF0	; 240
     fbe:	42 2b       	or	r20, r18
     fc0:	20 e4       	ldi	r18, 0x40	; 64
     fc2:	62 9f       	mul	r22, r18
     fc4:	b0 01       	movw	r22, r0
     fc6:	11 24       	eor	r1, r1
     fc8:	99 1f       	adc	r25, r25
     fca:	99 27       	eor	r25, r25
     fcc:	99 1f       	adc	r25, r25
     fce:	69 2b       	or	r22, r25
     fd0:	97 df       	rcall	.-210    	; 0xf00 <Endpoint_ConfigureEndpoint_Prv>
     fd2:	81 11       	cpse	r24, r1
     fd4:	d8 cf       	rjmp	.-80     	; 0xf86 <Endpoint_ConfigureEndpointTable+0x1c>
     fd6:	e2 cf       	rjmp	.-60     	; 0xf9c <Endpoint_ConfigureEndpointTable+0x32>
     fd8:	46 e0       	ldi	r20, 0x06	; 6
     fda:	e9 cf       	rjmp	.-46     	; 0xfae <Endpoint_ConfigureEndpointTable+0x44>
     fdc:	2f 5f       	subi	r18, 0xFF	; 255
     fde:	ee 0f       	add	r30, r30
     fe0:	ff 1f       	adc	r31, r31
     fe2:	e8 cf       	rjmp	.-48     	; 0xfb4 <Endpoint_ConfigureEndpointTable+0x4a>

00000fe4 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     fe4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_ControlRequest>
     fe8:	87 ff       	sbrs	r24, 7
     fea:	13 c0       	rjmp	.+38     	; 0x1012 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     ff0:	82 ff       	sbrs	r24, 2
     ff2:	06 c0       	rjmp	.+12     	; 0x1000 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ff4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ff8:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ffa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ffe:	04 c0       	rjmp	.+8      	; 0x1008 <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1000:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USB_DeviceState>
    1004:	81 11       	cpse	r24, r1
    1006:	f2 cf       	rjmp	.-28     	; 0xfec <Endpoint_ClearStatusStage+0x8>
    1008:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    100a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USB_DeviceState>
    100e:	88 23       	and	r24, r24
    1010:	d9 f3       	breq	.-10     	; 0x1008 <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1012:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
    1016:	80 ff       	sbrs	r24, 0
    1018:	f8 cf       	rjmp	.-16     	; 0x100a <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    101a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    101e:	8e 77       	andi	r24, 0x7E	; 126
    1020:	ec cf       	rjmp	.-40     	; 0xffa <Endpoint_ClearStatusStage+0x16>

00001022 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1022:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1026:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    102a:	85 e6       	ldi	r24, 0x65	; 101
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    102c:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1030:	90 fd       	sbrc	r25, 0
    1032:	20 c0       	rjmp	.+64     	; 0x1074 <Endpoint_WaitUntilReady+0x52>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1034:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1038:	92 fd       	sbrc	r25, 2
    103a:	20 c0       	rjmp	.+64     	; 0x107c <Endpoint_WaitUntilReady+0x5a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    103c:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1040:	99 23       	and	r25, r25
    1042:	91 f0       	breq	.+36     	; 0x1068 <Endpoint_WaitUntilReady+0x46>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1044:	95 30       	cpi	r25, 0x05	; 5
    1046:	91 f0       	breq	.+36     	; 0x106c <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1048:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    104c:	95 fd       	sbrc	r25, 5
    104e:	10 c0       	rjmp	.+32     	; 0x1070 <Endpoint_WaitUntilReady+0x4e>
    1050:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1054:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1058:	42 17       	cp	r20, r18
    105a:	53 07       	cpc	r21, r19
    105c:	39 f3       	breq	.-50     	; 0x102c <Endpoint_WaitUntilReady+0xa>
    105e:	81 50       	subi	r24, 0x01	; 1
    1060:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1062:	21 f7       	brne	.-56     	; 0x102c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1064:	84 e0       	ldi	r24, 0x04	; 4
    1066:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	08 95       	ret
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1074:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (Endpoint_IsINReady())
    1078:	90 ff       	sbrs	r25, 0
    107a:	e0 cf       	rjmp	.-64     	; 0x103c <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	08 95       	ret

00001080 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1088:	4e d0       	rcall	.+156    	; 0x1126 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    108a:	55 d0       	rcall	.+170    	; 0x1136 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    108c:	c8 ed       	ldi	r28, 0xD8	; 216
    108e:	d0 e0       	ldi	r29, 0x00	; 0
    1090:	88 81       	ld	r24, Y
    1092:	8f 77       	andi	r24, 0x7F	; 127
    1094:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1096:	88 81       	ld	r24, Y
    1098:	80 68       	ori	r24, 0x80	; 128
    109a:	88 83       	st	Y, r24
				USBCON &= ~(1 << FRZCLK);
    109c:	88 81       	ld	r24, Y
    109e:	8f 7d       	andi	r24, 0xDF	; 223
    10a0:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    10a2:	e7 ed       	ldi	r30, 0xD7	; 215
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 68       	ori	r24, 0x80	; 128
    10aa:	80 83       	st	Z, r24
				PLLCSR = 0;
    10ac:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    10ae:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <USB_DeviceState>
	USB_Device_ConfigurationNumber  = 0;
    10b2:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <__data_end>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    10b6:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <USB_Device_RemoteWakeupEnabled>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    10ba:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <USB_Device_CurrentlySelfPowered>
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    10be:	00 ee       	ldi	r16, 0xE0	; 224
    10c0:	10 e0       	ldi	r17, 0x00	; 0
    10c2:	f8 01       	movw	r30, r16
    10c4:	80 81       	ld	r24, Z
    10c6:	8b 7f       	andi	r24, 0xFB	; 251
    10c8:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    10ca:	88 81       	ld	r24, Y
    10cc:	81 60       	ori	r24, 0x01	; 1
    10ce:	88 83       	st	Y, r24
				return Endpoint_ConfigureEndpoint_Prv(Number,
    10d0:	42 e0       	ldi	r20, 0x02	; 2
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	14 df       	rcall	.-472    	; 0xf00 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    10d8:	e1 ee       	ldi	r30, 0xE1	; 225
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8e 7f       	andi	r24, 0xFE	; 254
    10e0:	80 83       	st	Z, r24
						UDIEN  |= (1 << SUSPE);
    10e2:	e2 ee       	ldi	r30, 0xE2	; 226
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	81 60       	ori	r24, 0x01	; 1
    10ea:	80 83       	st	Z, r24
						UDIEN  |= (1 << EORSTE);
    10ec:	80 81       	ld	r24, Z
    10ee:	88 60       	ori	r24, 0x08	; 8
    10f0:	80 83       	st	Z, r24
				UDCON  &= ~(1 << DETACH);
    10f2:	f8 01       	movw	r30, r16
    10f4:	80 81       	ld	r24, Z
    10f6:	8e 7f       	andi	r24, 0xFE	; 254
    10f8:	80 83       	st	Z, r24
				USBCON |=  (1 << OTGPADE);
    10fa:	88 81       	ld	r24, Y
    10fc:	80 61       	ori	r24, 0x10	; 16
    10fe:	88 83       	st	Y, r24
}
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	08 95       	ret

0000110a <USB_Init>:
				USBCON &= ~(1 << OTGPADE);
    110a:	e8 ed       	ldi	r30, 0xD8	; 216
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 7e       	andi	r24, 0xEF	; 239
    1112:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
    1114:	e7 ed       	ldi	r30, 0xD7	; 215
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	81 60       	ori	r24, 0x01	; 1
    111c:	80 83       	st	Z, r24
	USB_IsInitialized = true;
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <USB_IsInitialized>
	USB_ResetInterface();
    1124:	ad cf       	rjmp	.-166    	; 0x1080 <USB_ResetInterface>

00001126 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1126:	e8 ed       	ldi	r30, 0xD8	; 216
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8c 7f       	andi	r24, 0xFC	; 252
    112e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1130:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1134:	08 95       	ret

00001136 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1136:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    113a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    113e:	08 95       	ret

00001140 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	0b b6       	in	r0, 0x3b	; 59
    114c:	0f 92       	push	r0
    114e:	2f 93       	push	r18
    1150:	3f 93       	push	r19
    1152:	4f 93       	push	r20
    1154:	5f 93       	push	r21
    1156:	6f 93       	push	r22
    1158:	7f 93       	push	r23
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1166:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    116a:	82 ff       	sbrs	r24, 2
    116c:	0a c0       	rjmp	.+20     	; 0x1182 <__vector_10+0x42>
						return (UDIEN  & (1 << SOFE));
    116e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1172:	82 ff       	sbrs	r24, 2
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <__vector_10+0x42>
						UDINT  &= ~(1 << SOFI);
    1176:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    117a:	8b 7f       	andi	r24, 0xFB	; 251
    117c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1180:	46 d2       	rcall	.+1164   	; 0x160e <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
    1182:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1186:	80 ff       	sbrs	r24, 0
    1188:	18 c0       	rjmp	.+48     	; 0x11ba <__vector_10+0x7a>
						return (USBCON & (1 << VBUSTE));
    118a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    118e:	80 ff       	sbrs	r24, 0
    1190:	14 c0       	rjmp	.+40     	; 0x11ba <__vector_10+0x7a>
						USBINT &= ~(1 << VBUSTI);
    1192:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
    1196:	8e 7f       	andi	r24, 0xFE	; 254
    1198:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    119c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    11a0:	80 ff       	sbrs	r24, 0
    11a2:	91 c0       	rjmp	.+290    	; 0x12c6 <__vector_10+0x186>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    11a4:	8c e0       	ldi	r24, 0x0C	; 12
    11a6:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    11a8:	8e e0       	ldi	r24, 0x0E	; 14
    11aa:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    11ac:	09 b4       	in	r0, 0x29	; 41
    11ae:	00 fe       	sbrs	r0, 0
    11b0:	fd cf       	rjmp	.-6      	; 0x11ac <__vector_10+0x6c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    11b8:	16 d8       	rcall	.-4052   	; 0x1e6 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
    11ba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    11be:	80 ff       	sbrs	r24, 0
    11c0:	18 c0       	rjmp	.+48     	; 0x11f2 <__vector_10+0xb2>
						return (UDIEN  & (1 << SUSPE));
    11c2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    11c6:	80 ff       	sbrs	r24, 0
    11c8:	14 c0       	rjmp	.+40     	; 0x11f2 <__vector_10+0xb2>
						UDIEN  &= ~(1 << SUSPE);
    11ca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    11ce:	8e 7f       	andi	r24, 0xFE	; 254
    11d0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    11d4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    11d8:	80 61       	ori	r24, 0x10	; 16
    11da:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    11de:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    11e2:	80 62       	ori	r24, 0x20	; 32
    11e4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
    11e8:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    11ea:	85 e0       	ldi	r24, 0x05	; 5
    11ec:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    11f0:	0e d2       	rcall	.+1052   	; 0x160e <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
    11f2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    11f6:	84 ff       	sbrs	r24, 4
    11f8:	28 c0       	rjmp	.+80     	; 0x124a <__vector_10+0x10a>
						return (UDIEN  & (1 << WAKEUPE));
    11fa:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    11fe:	84 ff       	sbrs	r24, 4
    1200:	24 c0       	rjmp	.+72     	; 0x124a <__vector_10+0x10a>
				PLLCSR = USB_PLL_PSC;
    1202:	8c e0       	ldi	r24, 0x0C	; 12
    1204:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1206:	8e e0       	ldi	r24, 0x0E	; 14
    1208:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    120a:	09 b4       	in	r0, 0x29	; 41
    120c:	00 fe       	sbrs	r0, 0
    120e:	fd cf       	rjmp	.-6      	; 0x120a <__vector_10+0xca>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1210:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1214:	8f 7d       	andi	r24, 0xDF	; 223
    1216:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
    121a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    121e:	8f 7e       	andi	r24, 0xEF	; 239
    1220:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
    1224:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1228:	8f 7e       	andi	r24, 0xEF	; 239
    122a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
    122e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1232:	81 60       	ori	r24, 0x01	; 1
    1234:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1238:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
    123c:	88 23       	and	r24, r24
    123e:	09 f4       	brne	.+2      	; 0x1242 <__vector_10+0x102>
    1240:	48 c0       	rjmp	.+144    	; 0x12d2 <__vector_10+0x192>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1242:	84 e0       	ldi	r24, 0x04	; 4
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1244:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1248:	e2 d1       	rcall	.+964    	; 0x160e <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
    124a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    124e:	83 ff       	sbrs	r24, 3
    1250:	27 c0       	rjmp	.+78     	; 0x12a0 <__vector_10+0x160>
						return (UDIEN  & (1 << EORSTE));
    1252:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1256:	83 ff       	sbrs	r24, 3
    1258:	23 c0       	rjmp	.+70     	; 0x12a0 <__vector_10+0x160>
						UDINT  &= ~(1 << EORSTI);
    125a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    125e:	87 7f       	andi	r24, 0xF7	; 247
    1260:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    126a:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <__data_end>
						UDINT  &= ~(1 << SUSPI);
    126e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    1272:	8e 7f       	andi	r24, 0xFE	; 254
    1274:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
    1278:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    127c:	8e 7f       	andi	r24, 0xFE	; 254
    127e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
    1282:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    1286:	80 61       	ori	r24, 0x10	; 16
    1288:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    128c:	42 e0       	ldi	r20, 0x02	; 2
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	36 de       	rcall	.-916    	; 0xf00 <Endpoint_ConfigureEndpoint_Prv>
						UEIENX |= (1 << RXSTPE);
    1294:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1298:	88 60       	ori	r24, 0x08	; 8
    129a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    129e:	b7 d1       	rcall	.+878    	; 0x160e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    12a0:	ff 91       	pop	r31
    12a2:	ef 91       	pop	r30
    12a4:	bf 91       	pop	r27
    12a6:	af 91       	pop	r26
    12a8:	9f 91       	pop	r25
    12aa:	8f 91       	pop	r24
    12ac:	7f 91       	pop	r23
    12ae:	6f 91       	pop	r22
    12b0:	5f 91       	pop	r21
    12b2:	4f 91       	pop	r20
    12b4:	3f 91       	pop	r19
    12b6:	2f 91       	pop	r18
    12b8:	0f 90       	pop	r0
    12ba:	0b be       	out	0x3b, r0	; 59
    12bc:	0f 90       	pop	r0
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	0f 90       	pop	r0
    12c2:	1f 90       	pop	r1
    12c4:	18 95       	reti
				PLLCSR = 0;
    12c6:	19 bc       	out	0x29, r1	; 41
			USB_DeviceState = DEVICE_STATE_Unattached;
    12c8:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    12cc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <EVENT_USB_Device_Disconnect>
    12d0:	74 cf       	rjmp	.-280    	; 0x11ba <__vector_10+0x7a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    12d2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    12d6:	87 fd       	sbrc	r24, 7
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <__vector_10+0x19e>
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	b3 cf       	rjmp	.-154    	; 0x1244 <__vector_10+0x104>
    12de:	83 e0       	ldi	r24, 0x03	; 3
    12e0:	b1 cf       	rjmp	.-158    	; 0x1244 <__vector_10+0x104>

000012e2 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    12e2:	1f 92       	push	r1
    12e4:	0f 92       	push	r0
    12e6:	0f b6       	in	r0, 0x3f	; 63
    12e8:	0f 92       	push	r0
    12ea:	11 24       	eor	r1, r1
    12ec:	0b b6       	in	r0, 0x3b	; 59
    12ee:	0f 92       	push	r0
    12f0:	2f 93       	push	r18
    12f2:	3f 93       	push	r19
    12f4:	4f 93       	push	r20
    12f6:	5f 93       	push	r21
    12f8:	6f 93       	push	r22
    12fa:	7f 93       	push	r23
    12fc:	8f 93       	push	r24
    12fe:	9f 93       	push	r25
    1300:	af 93       	push	r26
    1302:	bf 93       	push	r27
    1304:	cf 93       	push	r28
    1306:	ef 93       	push	r30
    1308:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    130a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    130e:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1310:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1314:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX &= ~(1 << RXSTPE);
    1318:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    131c:	87 7f       	andi	r24, 0xF7	; 247
    131e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1322:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1324:	1d d0       	rcall	.+58     	; 0x1360 <USB_Device_ProcessControlRequest>
    1326:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
						UEIENX |= (1 << RXSTPE);
    132a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    132e:	88 60       	ori	r24, 0x08	; 8
    1330:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    1334:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1338:	ff 91       	pop	r31
    133a:	ef 91       	pop	r30
    133c:	cf 91       	pop	r28
    133e:	bf 91       	pop	r27
    1340:	af 91       	pop	r26
    1342:	9f 91       	pop	r25
    1344:	8f 91       	pop	r24
    1346:	7f 91       	pop	r23
    1348:	6f 91       	pop	r22
    134a:	5f 91       	pop	r21
    134c:	4f 91       	pop	r20
    134e:	3f 91       	pop	r19
    1350:	2f 91       	pop	r18
    1352:	0f 90       	pop	r0
    1354:	0b be       	out	0x3b, r0	; 59
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	aa 97       	sbiw	r28, 0x2a	; 42
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	e5 e7       	ldi	r30, 0x75	; 117
    1378:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    137a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    137e:	81 93       	st	Z+, r24
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1380:	21 e0       	ldi	r18, 0x01	; 1
    1382:	ed 37       	cpi	r30, 0x7D	; 125
    1384:	f2 07       	cpc	r31, r18
    1386:	c9 f7       	brne	.-14     	; 0x137a <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
    1388:	0e 94 01 01 	call	0x202	; 0x202 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    138c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    1390:	83 ff       	sbrs	r24, 3
    1392:	10 c0       	rjmp	.+32     	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1394:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1398:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <USB_ControlRequest+0x1>
    139c:	95 30       	cpi	r25, 0x05	; 5
    139e:	09 f4       	brne	.+2      	; 0x13a2 <USB_Device_ProcessControlRequest+0x42>
    13a0:	d2 c0       	rjmp	.+420    	; 0x1546 <USB_Device_ProcessControlRequest+0x1e6>
    13a2:	00 f5       	brcc	.+64     	; 0x13e4 <USB_Device_ProcessControlRequest+0x84>
    13a4:	91 30       	cpi	r25, 0x01	; 1
    13a6:	09 f4       	brne	.+2      	; 0x13aa <USB_Device_ProcessControlRequest+0x4a>
    13a8:	88 c0       	rjmp	.+272    	; 0x14ba <USB_Device_ProcessControlRequest+0x15a>
    13aa:	08 f4       	brcc	.+2      	; 0x13ae <USB_Device_ProcessControlRequest+0x4e>
    13ac:	61 c0       	rjmp	.+194    	; 0x1470 <USB_Device_ProcessControlRequest+0x110>
    13ae:	93 30       	cpi	r25, 0x03	; 3
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
    13b2:	83 c0       	rjmp	.+262    	; 0x14ba <USB_Device_ProcessControlRequest+0x15a>
    13b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    13b8:	83 ff       	sbrs	r24, 3
    13ba:	0a c0       	rjmp	.+20     	; 0x13d0 <USB_Device_ProcessControlRequest+0x70>
				UEINTX &= ~(1 << RXSTPI);
    13bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    13c0:	87 7f       	andi	r24, 0xF7	; 247
    13c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
    13c6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    13ca:	80 62       	ori	r24, 0x20	; 32
    13cc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    13d0:	aa 96       	adiw	r28, 0x2a	; 42
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	08 95       	ret
		switch (USB_ControlRequest.bRequest)
    13e4:	98 30       	cpi	r25, 0x08	; 8
    13e6:	09 f4       	brne	.+2      	; 0x13ea <USB_Device_ProcessControlRequest+0x8a>
    13e8:	e6 c0       	rjmp	.+460    	; 0x15b6 <USB_Device_ProcessControlRequest+0x256>
    13ea:	99 30       	cpi	r25, 0x09	; 9
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <USB_Device_ProcessControlRequest+0x90>
    13ee:	f0 c0       	rjmp	.+480    	; 0x15d0 <USB_Device_ProcessControlRequest+0x270>
    13f0:	96 30       	cpi	r25, 0x06	; 6
    13f2:	01 f7       	brne	.-64     	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    13f4:	80 58       	subi	r24, 0x80	; 128
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	e8 f6       	brcc	.-70     	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    13fa:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_ControlRequest+0x2>
    13fe:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <USB_ControlRequest+0x3>
    1402:	8c 3d       	cpi	r24, 0xDC	; 220
    1404:	23 e0       	ldi	r18, 0x03	; 3
    1406:	92 07       	cpc	r25, r18
    1408:	09 f0       	breq	.+2      	; 0x140c <USB_Device_ProcessControlRequest+0xac>
    140a:	c1 c0       	rjmp	.+386    	; 0x158e <USB_Device_ProcessControlRequest+0x22e>
	SignatureDescriptor.Header.Type = DTYPE_String;
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1410:	8a e2       	ldi	r24, 0x2A	; 42
    1412:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1414:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1416:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1418:	de 01       	movw	r26, r28
    141a:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    141c:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    141e:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1420:	51 e2       	ldi	r21, 0x21	; 33
    1422:	e3 2f       	mov	r30, r19
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    142a:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    142c:	20 ff       	sbrs	r18, 0
    142e:	03 c0       	rjmp	.+6      	; 0x1436 <USB_Device_ProcessControlRequest+0xd6>
					{
						SerialByte >>= 4;
    1430:	e2 95       	swap	r30
    1432:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1434:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1436:	ef 70       	andi	r30, 0x0F	; 15
    1438:	8e 2f       	mov	r24, r30
    143a:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    143c:	ea 30       	cpi	r30, 0x0A	; 10
    143e:	08 f4       	brcc	.+2      	; 0x1442 <USB_Device_ProcessControlRequest+0xe2>
    1440:	a4 c0       	rjmp	.+328    	; 0x158a <USB_Device_ProcessControlRequest+0x22a>
    1442:	c7 96       	adiw	r24, 0x37	; 55
    1444:	8d 93       	st	X+, r24
    1446:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1448:	2f 5f       	subi	r18, 0xFF	; 255
    144a:	24 31       	cpi	r18, 0x14	; 20
    144c:	51 f7       	brne	.-44     	; 0x1422 <USB_Device_ProcessControlRequest+0xc2>
				SREG = GlobalIntState;
    144e:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
    1450:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1454:	87 7f       	andi	r24, 0xF7	; 247
    1456:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    145a:	6a e2       	ldi	r22, 0x2A	; 42
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	ce 01       	movw	r24, r28
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	97 dc       	rcall	.-1746   	; 0xd92 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1464:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1468:	8b 77       	andi	r24, 0x7B	; 123
    146a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    146e:	a2 cf       	rjmp	.-188    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1470:	80 38       	cpi	r24, 0x80	; 128
    1472:	81 f0       	breq	.+32     	; 0x1494 <USB_Device_ProcessControlRequest+0x134>
    1474:	82 38       	cpi	r24, 0x82	; 130
    1476:	09 f0       	breq	.+2      	; 0x147a <USB_Device_ProcessControlRequest+0x11a>
    1478:	9d cf       	rjmp	.-198    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    147a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <USB_ControlRequest+0x4>
    147e:	8f 70       	andi	r24, 0x0F	; 15
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1480:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1484:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1488:	85 fb       	bst	r24, 5
    148a:	88 27       	eor	r24, r24
    148c:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    148e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <USB_Device_ProcessControlRequest+0x140>
	uint8_t CurrentStatus = 0;
    1494:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
    1498:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <USB_Device_RemoteWakeupEnabled>
    149c:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    149e:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
    14a0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14a4:	97 7f       	andi	r25, 0xF7	; 247
    14a6:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    14aa:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
    14ae:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    14b6:	8e 77       	andi	r24, 0x7E	; 126
    14b8:	2f c0       	rjmp	.+94     	; 0x1518 <USB_Device_ProcessControlRequest+0x1b8>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    14ba:	28 2f       	mov	r18, r24
    14bc:	2d 7f       	andi	r18, 0xFD	; 253
    14be:	09 f0       	breq	.+2      	; 0x14c2 <USB_Device_ProcessControlRequest+0x162>
    14c0:	79 cf       	rjmp	.-270    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    14c2:	88 23       	and	r24, r24
    14c4:	d1 f0       	breq	.+52     	; 0x14fa <USB_Device_ProcessControlRequest+0x19a>
    14c6:	82 30       	cpi	r24, 0x02	; 2
    14c8:	09 f0       	breq	.+2      	; 0x14cc <USB_Device_ProcessControlRequest+0x16c>
    14ca:	74 cf       	rjmp	.-280    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    14cc:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_ControlRequest+0x2>
    14d0:	81 11       	cpse	r24, r1
    14d2:	1d c0       	rjmp	.+58     	; 0x150e <USB_Device_ProcessControlRequest+0x1ae>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    14d4:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <USB_ControlRequest+0x4>
    14d8:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    14da:	09 f4       	brne	.+2      	; 0x14de <USB_Device_ProcessControlRequest+0x17e>
    14dc:	6b cf       	rjmp	.-298    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    14de:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
    14e2:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    14e6:	20 ff       	sbrs	r18, 0
    14e8:	12 c0       	rjmp	.+36     	; 0x150e <USB_Device_ProcessControlRequest+0x1ae>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    14ea:	93 30       	cpi	r25, 0x03	; 3
    14ec:	c9 f4       	brne	.+50     	; 0x1520 <USB_Device_ProcessControlRequest+0x1c0>
				UECONX |= (1 << STALLRQ);
    14ee:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    14f2:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
    14f4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    14f8:	0a c0       	rjmp	.+20     	; 0x150e <USB_Device_ProcessControlRequest+0x1ae>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    14fa:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <USB_ControlRequest+0x2>
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	09 f0       	breq	.+2      	; 0x1504 <USB_Device_ProcessControlRequest+0x1a4>
    1502:	58 cf       	rjmp	.-336    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1504:	93 30       	cpi	r25, 0x03	; 3
    1506:	09 f0       	breq	.+2      	; 0x150a <USB_Device_ProcessControlRequest+0x1aa>
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    150e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
    1512:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1516:	87 7f       	andi	r24, 0xF7	; 247
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1518:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    151c:	63 dd       	rcall	.-1338   	; 0xfe4 <Endpoint_ClearStatusStage>
    151e:	4a cf       	rjmp	.-364    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
				UECONX |= (1 << STALLRQC);
    1520:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1524:	90 61       	ori	r25, 0x10	; 16
    1526:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    152a:	21 e0       	ldi	r18, 0x01	; 1
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <USB_Device_ProcessControlRequest+0x1d2>
    1530:	22 0f       	add	r18, r18
    1532:	8a 95       	dec	r24
    1534:	ea f7       	brpl	.-6      	; 0x1530 <USB_Device_ProcessControlRequest+0x1d0>
    1536:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    153a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
    153e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1542:	88 60       	ori	r24, 0x08	; 8
    1544:	d7 cf       	rjmp	.-82     	; 0x14f4 <USB_Device_ProcessControlRequest+0x194>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1546:	81 11       	cpse	r24, r1
    1548:	35 cf       	rjmp	.-406    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    154a:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <USB_ControlRequest+0x2>
    154e:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1550:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1554:	80 78       	andi	r24, 0x80	; 128
    1556:	81 2b       	or	r24, r17
    1558:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
    155c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1560:	87 7f       	andi	r24, 0xF7	; 247
    1562:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
    1566:	3e dd       	rcall	.-1412   	; 0xfe4 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1568:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
    156c:	80 ff       	sbrs	r24, 0
    156e:	fc cf       	rjmp	.-8      	; 0x1568 <USB_Device_ProcessControlRequest+0x208>
				UDADDR |= (1 << ADDEN);
    1570:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1574:	80 68       	ori	r24, 0x80	; 128
    1576:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    157a:	11 11       	cpse	r17, r1
    157c:	04 c0       	rjmp	.+8      	; 0x1586 <USB_Device_ProcessControlRequest+0x226>
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <USB_DeviceState>
    1584:	17 cf       	rjmp	.-466    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
    1586:	83 e0       	ldi	r24, 0x03	; 3
    1588:	fb cf       	rjmp	.-10     	; 0x1580 <USB_Device_ProcessControlRequest+0x220>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    158a:	c0 96       	adiw	r24, 0x30	; 48
    158c:	5b cf       	rjmp	.-330    	; 0x1444 <USB_Device_ProcessControlRequest+0xe4>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    158e:	ae 01       	movw	r20, r28
    1590:	4f 5f       	subi	r20, 0xFF	; 255
    1592:	5f 4f       	sbci	r21, 0xFF	; 255
    1594:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <USB_ControlRequest+0x4>
    1598:	0e 94 13 01 	call	0x226	; 0x226 <CALLBACK_USB_GetDescriptor>
    159c:	bc 01       	movw	r22, r24
    159e:	89 2b       	or	r24, r25
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <USB_Device_ProcessControlRequest+0x244>
    15a2:	08 cf       	rjmp	.-496    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    15a4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15a8:	97 7f       	andi	r25, 0xF7	; 247
    15aa:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	9a 81       	ldd	r25, Y+2	; 0x02
    15b2:	4a dc       	rcall	.-1900   	; 0xe48 <Endpoint_Write_Control_PStream_LE>
    15b4:	57 cf       	rjmp	.-338    	; 0x1464 <USB_Device_ProcessControlRequest+0x104>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    15b6:	80 38       	cpi	r24, 0x80	; 128
    15b8:	09 f0       	breq	.+2      	; 0x15bc <USB_Device_ProcessControlRequest+0x25c>
    15ba:	fc ce       	rjmp	.-520    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
    15bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15c0:	87 7f       	andi	r24, 0xF7	; 247
    15c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    15c6:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
				UEDATX = Data;
    15ca:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    15ce:	71 cf       	rjmp	.-286    	; 0x14b2 <USB_Device_ProcessControlRequest+0x152>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    15d0:	81 11       	cpse	r24, r1
    15d2:	f0 ce       	rjmp	.-544    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    15d4:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <USB_ControlRequest+0x2>
    15d8:	92 30       	cpi	r25, 0x02	; 2
    15da:	08 f0       	brcs	.+2      	; 0x15de <USB_Device_ProcessControlRequest+0x27e>
    15dc:	eb ce       	rjmp	.-554    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>
				UEINTX &= ~(1 << RXSTPI);
    15de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    15e2:	87 7f       	andi	r24, 0xF7	; 247
    15e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    15e8:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <__data_end>
	Endpoint_ClearStatusStage();
    15ec:	fb dc       	rcall	.-1546   	; 0xfe4 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
    15ee:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
    15f2:	88 23       	and	r24, r24
    15f4:	11 f0       	breq	.+4      	; 0x15fa <USB_Device_ProcessControlRequest+0x29a>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    15f6:	84 e0       	ldi	r24, 0x04	; 4
    15f8:	05 c0       	rjmp	.+10     	; 0x1604 <USB_Device_ProcessControlRequest+0x2a4>
				return (UDADDR & (1 << ADDEN));
    15fa:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    15fe:	87 fd       	sbrc	r24, 7
    1600:	fa cf       	rjmp	.-12     	; 0x15f6 <USB_Device_ProcessControlRequest+0x296>
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
    1608:	0e 94 f7 00 	call	0x1ee	; 0x1ee <EVENT_USB_Device_ConfigurationChanged>
    160c:	d3 ce       	rjmp	.-602    	; 0x13b4 <USB_Device_ProcessControlRequest+0x54>

0000160e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    160e:	08 95       	ret

00001610 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1610:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1612:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USB_DeviceState>
    1616:	88 23       	and	r24, r24
    1618:	91 f0       	breq	.+36     	; 0x163e <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    161a:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    161e:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1620:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    1624:	80 fd       	sbrc	r24, 0
    1626:	0d c0       	rjmp	.+26     	; 0x1642 <USB_USBTask+0x32>
    1628:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    162a:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    162c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1630:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1634:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1636:	94 de       	rcall	.-728    	; 0x1360 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1638:	cf 70       	andi	r28, 0x0F	; 15
    163a:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
    163e:	cf 91       	pop	r28
    1640:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1642:	80 e8       	ldi	r24, 0x80	; 128
    1644:	f2 cf       	rjmp	.-28     	; 0x162a <USB_USBTask+0x1a>

00001646 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    164c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    1650:	83 ff       	sbrs	r24, 3
    1652:	1b c0       	rjmp	.+54     	; 0x168a <MS_Device_ProcessControlRequest+0x44>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1654:	88 81       	ld	r24, Y
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <USB_ControlRequest+0x4>
    165c:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <USB_ControlRequest+0x5>
    1660:	28 17       	cp	r18, r24
    1662:	39 07       	cpc	r19, r25
    1664:	91 f4       	brne	.+36     	; 0x168a <MS_Device_ProcessControlRequest+0x44>
	  return;

	switch (USB_ControlRequest.bRequest)
    1666:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <USB_ControlRequest+0x1>
    166a:	8e 3f       	cpi	r24, 0xFE	; 254
    166c:	89 f0       	breq	.+34     	; 0x1690 <MS_Device_ProcessControlRequest+0x4a>
    166e:	8f 3f       	cpi	r24, 0xFF	; 255
    1670:	61 f4       	brne	.+24     	; 0x168a <MS_Device_ProcessControlRequest+0x44>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1672:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_ControlRequest>
    1676:	81 32       	cpi	r24, 0x21	; 33
    1678:	41 f4       	brne	.+16     	; 0x168a <MS_Device_ProcessControlRequest+0x44>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    167a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    167e:	87 7f       	andi	r24, 0xF7	; 247
    1680:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1684:	af dc       	rcall	.-1698   	; 0xfe4 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	88 af       	std	Y+56, r24	; 0x38
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1690:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <USB_ControlRequest>
    1694:	81 3a       	cpi	r24, 0xA1	; 161
    1696:	c9 f7       	brne	.-14     	; 0x168a <MS_Device_ProcessControlRequest+0x44>
    1698:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    169c:	87 7f       	andi	r24, 0xF7	; 247
    169e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				return ((UEINTX & (1 << TXINI)) ? true : false);
    16a2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				while (!(Endpoint_IsINReady()));
    16a6:	80 ff       	sbrs	r24, 0
    16a8:	fc cf       	rjmp	.-8      	; 0x16a2 <MS_Device_ProcessControlRequest+0x5c>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    16aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    16ac:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    16ae:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    16b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    16b6:	8e 77       	andi	r24, 0x7E	; 126
    16b8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
}
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
				Endpoint_ClearStatusStage();
    16c0:	91 cc       	rjmp	.-1758   	; 0xfe4 <Endpoint_ClearStatusStage>

000016c2 <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    16c8:	fc 01       	movw	r30, r24
    16ca:	3c 96       	adiw	r30, 0x0c	; 12
    16cc:	8d e2       	ldi	r24, 0x2D	; 45
    16ce:	df 01       	movw	r26, r30
    16d0:	1d 92       	st	X+, r1
    16d2:	8a 95       	dec	r24
    16d4:	e9 f7       	brne	.-6      	; 0x16d0 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    16d6:	82 e0       	ldi	r24, 0x02	; 2
    16d8:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    16da:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	ce 01       	movw	r24, r28
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	43 dc       	rcall	.-1914   	; 0xf6a <Endpoint_ConfigureEndpointTable>
    16e4:	88 23       	and	r24, r24
    16e6:	31 f0       	breq	.+12     	; 0x16f4 <MS_Device_ConfigureEndpoints+0x32>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    16e8:	61 e0       	ldi	r22, 0x01	; 1
    16ea:	ce 01       	movw	r24, r28
    16ec:	06 96       	adiw	r24, 0x06	; 6
	  return false;

	return true;
}
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    16f2:	3b cc       	rjmp	.-1930   	; 0xf6a <Endpoint_ConfigureEndpointTable>
}
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	00 d0       	rcall	.+0      	; 0x170a <MS_Device_USBTask+0xe>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1710:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USB_DeviceState>
    1714:	84 30       	cpi	r24, 0x04	; 4
    1716:	09 f0       	breq	.+2      	; 0x171a <MS_Device_USBTask+0x1e>
    1718:	7f c0       	rjmp	.+254    	; 0x1818 <MS_Device_USBTask+0x11c>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    171a:	f8 01       	movw	r30, r16
    171c:	86 81       	ldd	r24, Z+6	; 0x06
    171e:	8f 70       	andi	r24, 0x0F	; 15
    1720:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1724:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1728:	82 ff       	sbrs	r24, 2
    172a:	3d c0       	rjmp	.+122    	; 0x17a6 <MS_Device_USBTask+0xaa>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    172c:	86 81       	ldd	r24, Z+6	; 0x06
    172e:	8f 70       	andi	r24, 0x0F	; 15
    1730:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    1734:	1a 82       	std	Y+2, r1	; 0x02
    1736:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1738:	78 01       	movw	r14, r16
    173a:	fc e0       	ldi	r31, 0x0C	; 12
    173c:	ef 0e       	add	r14, r31
    173e:	f1 1c       	adc	r15, r1
    1740:	ae 01       	movw	r20, r28
    1742:	4f 5f       	subi	r20, 0xFF	; 255
    1744:	5f 4f       	sbci	r21, 0xFF	; 255
    1746:	6f e0       	ldi	r22, 0x0F	; 15
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	c7 01       	movw	r24, r14
    174c:	d5 da       	rcall	.-2646   	; 0xcf8 <Endpoint_Read_Stream_LE>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    174e:	f8 01       	movw	r30, r16
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1750:	85 30       	cpi	r24, 0x05	; 5
    1752:	31 f1       	breq	.+76     	; 0x17a0 <MS_Device_USBTask+0xa4>
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1754:	84 85       	ldd	r24, Z+12	; 0x0c
    1756:	95 85       	ldd	r25, Z+13	; 0x0d
    1758:	a6 85       	ldd	r26, Z+14	; 0x0e
    175a:	b7 85       	ldd	r27, Z+15	; 0x0f
    175c:	85 35       	cpi	r24, 0x55	; 85
    175e:	93 45       	sbci	r25, 0x53	; 83
    1760:	a2 44       	sbci	r26, 0x42	; 66
    1762:	b3 44       	sbci	r27, 0x43	; 67
    1764:	69 f4       	brne	.+26     	; 0x1780 <MS_Device_USBTask+0x84>
    1766:	f8 01       	movw	r30, r16
    1768:	91 8d       	ldd	r25, Z+25	; 0x19
    176a:	83 85       	ldd	r24, Z+11	; 0x0b
    176c:	98 17       	cp	r25, r24
    176e:	40 f4       	brcc	.+16     	; 0x1780 <MS_Device_USBTask+0x84>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1770:	80 8d       	ldd	r24, Z+24	; 0x18
    1772:	8f 71       	andi	r24, 0x1F	; 31
    1774:	29 f4       	brne	.+10     	; 0x1780 <MS_Device_USBTask+0x84>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1776:	82 8d       	ldd	r24, Z+26	; 0x1a
    1778:	81 50       	subi	r24, 0x01	; 1
    177a:	80 31       	cpi	r24, 0x10	; 16
    177c:	08 f4       	brcc	.+2      	; 0x1780 <MS_Device_USBTask+0x84>
    177e:	55 c0       	rjmp	.+170    	; 0x182a <MS_Device_USBTask+0x12e>
				UECONX |= (1 << STALLRQ);
    1780:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1784:	80 62       	ori	r24, 0x20	; 32
    1786:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    178a:	f8 01       	movw	r30, r16
    178c:	81 81       	ldd	r24, Z+1	; 0x01
    178e:	8f 70       	andi	r24, 0x0F	; 15
    1790:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQ);
    1794:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1798:	80 62       	ori	r24, 0x20	; 32
    179a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    179e:	03 c0       	rjmp	.+6      	; 0x17a6 <MS_Device_USBTask+0xaa>
		if (MSInterfaceInfo->State.IsMassStoreReset)
    17a0:	80 ad       	ldd	r24, Z+56	; 0x38
    17a2:	88 23       	and	r24, r24
    17a4:	69 f2       	breq	.-102    	; 0x1740 <MS_Device_USBTask+0x44>
	if (MSInterfaceInfo->State.IsMassStoreReset)
    17a6:	f8 01       	movw	r30, r16
    17a8:	80 ad       	ldd	r24, Z+56	; 0x38
    17aa:	88 23       	and	r24, r24
    17ac:	a9 f1       	breq	.+106    	; 0x1818 <MS_Device_USBTask+0x11c>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    17ae:	26 81       	ldd	r18, Z+6	; 0x06
    17b0:	2f 70       	andi	r18, 0x0F	; 15
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	ac 01       	movw	r20, r24
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <MS_Device_USBTask+0xc2>
    17ba:	44 0f       	add	r20, r20
    17bc:	55 1f       	adc	r21, r21
    17be:	2a 95       	dec	r18
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <MS_Device_USBTask+0xbe>
    17c2:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    17c6:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    17ca:	21 81       	ldd	r18, Z+1	; 0x01
    17cc:	2f 70       	andi	r18, 0x0F	; 15
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <MS_Device_USBTask+0xd6>
    17d0:	88 0f       	add	r24, r24
    17d2:	2a 95       	dec	r18
    17d4:	ea f7       	brpl	.-6      	; 0x17d0 <MS_Device_USBTask+0xd4>
    17d6:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
    17da:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17de:	86 81       	ldd	r24, Z+6	; 0x06
    17e0:	8f 70       	andi	r24, 0x0F	; 15
    17e2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
    17e6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    17ea:	80 61       	ori	r24, 0x10	; 16
    17ec:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
    17f0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    17f4:	88 60       	ori	r24, 0x08	; 8
    17f6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    17fa:	81 81       	ldd	r24, Z+1	; 0x01
    17fc:	8f 70       	andi	r24, 0x0F	; 15
    17fe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UECONX |= (1 << STALLRQC);
    1802:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1806:	80 61       	ori	r24, 0x10	; 16
    1808:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UECONX |= (1 << RSTDT);
    180c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    1810:	88 60       	ori	r24, 0x08	; 8
    1812:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		MSInterfaceInfo->State.IsMassStoreReset = false;
    1816:	10 ae       	std	Z+56, r1	; 0x38
}
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	08 95       	ret
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    182a:	1a 82       	std	Y+2, r1	; 0x02
    182c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    182e:	78 01       	movw	r14, r16
    1830:	fb e1       	ldi	r31, 0x1B	; 27
    1832:	ef 0e       	add	r14, r31
    1834:	f1 1c       	adc	r15, r1
    1836:	f8 01       	movw	r30, r16
    1838:	62 8d       	ldd	r22, Z+26	; 0x1a
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	ae 01       	movw	r20, r28
    183e:	4f 5f       	subi	r20, 0xFF	; 255
    1840:	5f 4f       	sbci	r21, 0xFF	; 255
    1842:	c7 01       	movw	r24, r14
    1844:	59 da       	rcall	.-2894   	; 0xcf8 <Endpoint_Read_Stream_LE>
    1846:	85 30       	cpi	r24, 0x05	; 5
    1848:	09 f4       	brne	.+2      	; 0x184c <MS_Device_USBTask+0x150>
    184a:	5e c0       	rjmp	.+188    	; 0x1908 <MS_Device_USBTask+0x20c>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    184c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1850:	8b 77       	andi	r24, 0x7B	; 123
    1852:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1856:	f8 01       	movw	r30, r16
    1858:	80 8d       	ldd	r24, Z+24	; 0x18
    185a:	87 ff       	sbrs	r24, 7
    185c:	04 c0       	rjmp	.+8      	; 0x1866 <MS_Device_USBTask+0x16a>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    185e:	81 81       	ldd	r24, Z+1	; 0x01
    1860:	8f 70       	andi	r24, 0x0F	; 15
    1862:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1866:	c8 01       	movw	r24, r16
    1868:	0e 94 05 01 	call	0x20a	; 0x20a <CALLBACK_MS_Device_SCSICommandReceived>
			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    186c:	91 e0       	ldi	r25, 0x01	; 1
    186e:	98 27       	eor	r25, r24
    1870:	f8 01       	movw	r30, r16
    1872:	97 ab       	std	Z+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1874:	45 e5       	ldi	r20, 0x55	; 85
    1876:	53 e5       	ldi	r21, 0x53	; 83
    1878:	62 e4       	ldi	r22, 0x42	; 66
    187a:	73 e5       	ldi	r23, 0x53	; 83
    187c:	43 a7       	std	Z+43, r20	; 0x2b
    187e:	54 a7       	std	Z+44, r21	; 0x2c
    1880:	65 a7       	std	Z+45, r22	; 0x2d
    1882:	76 a7       	std	Z+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1884:	40 89       	ldd	r20, Z+16	; 0x10
    1886:	51 89       	ldd	r21, Z+17	; 0x11
    1888:	62 89       	ldd	r22, Z+18	; 0x12
    188a:	73 89       	ldd	r23, Z+19	; 0x13
    188c:	47 a7       	std	Z+47, r20	; 0x2f
    188e:	50 ab       	std	Z+48, r21	; 0x30
    1890:	61 ab       	std	Z+49, r22	; 0x31
    1892:	72 ab       	std	Z+50, r23	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    1894:	44 89       	ldd	r20, Z+20	; 0x14
    1896:	55 89       	ldd	r21, Z+21	; 0x15
    1898:	66 89       	ldd	r22, Z+22	; 0x16
    189a:	77 89       	ldd	r23, Z+23	; 0x17
    189c:	43 ab       	std	Z+51, r20	; 0x33
    189e:	54 ab       	std	Z+52, r21	; 0x34
    18a0:	65 ab       	std	Z+53, r22	; 0x35
    18a2:	76 ab       	std	Z+54, r23	; 0x36
			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    18a4:	81 11       	cpse	r24, r1
    18a6:	09 c0       	rjmp	.+18     	; 0x18ba <MS_Device_USBTask+0x1be>
    18a8:	45 2b       	or	r20, r21
    18aa:	46 2b       	or	r20, r22
    18ac:	47 2b       	or	r20, r23
    18ae:	29 f0       	breq	.+10     	; 0x18ba <MS_Device_USBTask+0x1be>
				UECONX |= (1 << STALLRQ);
    18b0:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    18b4:	80 62       	ori	r24, 0x20	; 32
    18b6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18ba:	f8 01       	movw	r30, r16
    18bc:	86 81       	ldd	r24, Z+6	; 0x06
    18be:	8f 70       	andi	r24, 0x0F	; 15
    18c0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    18c4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    18c8:	f8 01       	movw	r30, r16
	while (Endpoint_IsStalled())
    18ca:	85 fd       	sbrc	r24, 5
    18cc:	23 c0       	rjmp	.+70     	; 0x1914 <MS_Device_USBTask+0x218>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    18ce:	81 81       	ldd	r24, Z+1	; 0x01
    18d0:	8f 70       	andi	r24, 0x0F	; 15
    18d2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    18d6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    18da:	85 fd       	sbrc	r24, 5
    18dc:	1f c0       	rjmp	.+62     	; 0x191c <MS_Device_USBTask+0x220>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    18de:	1a 82       	std	Y+2, r1	; 0x02
    18e0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    18e2:	78 01       	movw	r14, r16
    18e4:	fb e2       	ldi	r31, 0x2B	; 43
    18e6:	ef 0e       	add	r14, r31
    18e8:	f1 1c       	adc	r15, r1
    18ea:	ae 01       	movw	r20, r28
    18ec:	4f 5f       	subi	r20, 0xFF	; 255
    18ee:	5f 4f       	sbci	r21, 0xFF	; 255
    18f0:	6d e0       	ldi	r22, 0x0D	; 13
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	c7 01       	movw	r24, r14
    18f6:	61 d9       	rcall	.-3390   	; 0xbba <Endpoint_Write_Stream_LE>
    18f8:	85 30       	cpi	r24, 0x05	; 5
    18fa:	a9 f0       	breq	.+42     	; 0x1926 <MS_Device_USBTask+0x22a>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1900:	8e 77       	andi	r24, 0x7E	; 126
    1902:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1906:	4f cf       	rjmp	.-354    	; 0x17a6 <MS_Device_USBTask+0xaa>
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1908:	f8 01       	movw	r30, r16
    190a:	80 ad       	ldd	r24, Z+56	; 0x38
    190c:	88 23       	and	r24, r24
    190e:	09 f4       	brne	.+2      	; 0x1912 <MS_Device_USBTask+0x216>
    1910:	92 cf       	rjmp	.-220    	; 0x1836 <MS_Device_USBTask+0x13a>
    1912:	49 cf       	rjmp	.-366    	; 0x17a6 <MS_Device_USBTask+0xaa>
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1914:	80 ad       	ldd	r24, Z+56	; 0x38
    1916:	88 23       	and	r24, r24
    1918:	a9 f2       	breq	.-86     	; 0x18c4 <MS_Device_USBTask+0x1c8>
    191a:	45 cf       	rjmp	.-374    	; 0x17a6 <MS_Device_USBTask+0xaa>
		if (MSInterfaceInfo->State.IsMassStoreReset)
    191c:	f8 01       	movw	r30, r16
    191e:	80 ad       	ldd	r24, Z+56	; 0x38
    1920:	88 23       	and	r24, r24
    1922:	c9 f2       	breq	.-78     	; 0x18d6 <MS_Device_USBTask+0x1da>
    1924:	40 cf       	rjmp	.-384    	; 0x17a6 <MS_Device_USBTask+0xaa>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1926:	f8 01       	movw	r30, r16
    1928:	80 ad       	ldd	r24, Z+56	; 0x38
    192a:	88 23       	and	r24, r24
    192c:	f1 f2       	breq	.-68     	; 0x18ea <MS_Device_USBTask+0x1ee>
    192e:	3b cf       	rjmp	.-394    	; 0x17a6 <MS_Device_USBTask+0xaa>

00001930 <_exit>:
    1930:	f8 94       	cli

00001932 <__stop_program>:
    1932:	ff cf       	rjmp	.-2      	; 0x1932 <__stop_program>
